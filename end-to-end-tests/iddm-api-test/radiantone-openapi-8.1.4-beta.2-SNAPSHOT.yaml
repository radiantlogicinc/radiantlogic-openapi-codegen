openapi: 3.0.3
servers:
  - url: http://localhost
info:
  title: RadiantOne V8 API
  version: 8.1.4-beta.2-SNAPSHOT
tags:
  - name: Access Control
    description: Access Control
  - name: AuthToken API
    description: This API is used to login a user with a user name and password and
      obtain an authentication/authorization token. Logged in users can also
      request a token refresh.
  - name: Automatic Configuration Promotion
    description: Automatically promote configurations between IDDM environments.
      Take configures developed in a "lower environment" (ex, dev) and
      automatically promote them to a higher environment (ex, prod).
  - name: Client Access Configuration
    description: This API configures all of the supported protocols which clients
      may use to connect to FID and perform directory operations.
  - name: Control Panel Messages
    description: Manage configurable messages that are integrated into the control panel UI.
  - name: Dashboard
    description: Dashboard
  - name: Data Preview
    description: Data Preview
  - name: Data Source Type Metadata
    description: Data Source Type Metadata
  - name: Data Sources
    description: Data Sources
  - name: Directory Browser
    description: Directory Browser
  - name: Directory Namespace API
    description: API to view and edit the directory namespace.
  - name: Directory Schema API
    description: Directory Schema API
  - name: Entry Statistics API
    description: API for generating and reading statistics about naming contexts.
  - name: FID Directory Manager
    description: FID Directory Manager
  - name: FID Roles and Permissions
    description: FID Roles and Permissions
  - name: FID Users
    description: FID Users
  - name: Identity Observability Configuration
    description: Manage Identity Observability Configuration.
  - name: JDBC Drivers
    description: JDBC Drivers
  - name: Login Page Information API
    description: API to get information to display on the login page.
  - name: Private File management for data catalog.
    description: Private File management for data catalog.
  - name: Saas Configuration
    description: This API gets RadiantOne saas info
  - name: Schema Diff Manager
    description: Schema Diff Manager
  - name: Schema Manager
    description: Schema Manager
  - name: "Security Settings: Access Control"
    description: API to configure access control settings.
  - name: "Security Settings: Attribute Encryption"
    description: API to configure attribute encryption security settings.
  - name: "Security Settings: Client Certificate Truststore"
    description: API to configure client certificate truststore security settings.
  - name: "Security Settings: OIDC Provider"
    description: API to configure oidc provider security settings.
  - name: Task Management API
    description: API to manage task scheduler state and to start, stop, cancel, and
      remove scheduled tasks.
paths:
  /settings-service/configuration/state/auto:
    get:
      operationId: get-auto-promotion-state
      summary: Get the state of the auto-promotion operation.
      description: Get the current v of the auto-promotion operation of this IDDM.
        Either ACTIVE_EXPORT, ACTIVE_IMPORT, OR INACTIVE.
      responses:
        "200":
          description: The state of the auto-promotion operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConfigurationAutoPromotionStateResponse"
              examples:
                success:
                  $ref: "#/components/examples/ConfigurationAutoPromotionStateResponse"
      security:
        - bearer_auth: []
      tags:
        - Automatic Configuration Promotion
  /settings-service/configuration/export/auto:
    post:
      operationId: auto-export-iddm-configuration
      summary: Auto-export IDDM configuration.
      description: Export IDDM configuration using a fully automated mechanism.
        Configurations will be exported to a storage location where  the target
        IDDM can import them from.
      responses:
        "200":
          description: The auto-promotion export has been successful.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PromotionOperationResponse"
              examples:
                success:
                  $ref: "#/components/examples/PromotionOperationResponse"
        "400":
          description: The auto-promotion export has failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_CONFIGURATION_EXPORT_ENABLED
      tags:
        - Automatic Configuration Promotion
  /settings-service/configuration/export/auto/reports:
    get:
      operationId: get-auto-export-report-list
      summary: Get a list of auto-export reports.
      description: Get a list of all the auto-export reports that exist in the system.
        Each report corresponds to an operation that  was performed. Only the
        last 100 reports are preserved.
      responses:
        "200":
          description: A list of the reports of past auto-export operations.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AutoPromotionReportList"
              examples:
                report-names:
                  $ref: "#/components/examples/AutoPromotionReportList"
      security:
        - bearer_auth:
            - SCOPE_CONFIGURATION_EXPORT_ENABLED
      tags:
        - Automatic Configuration Promotion
  /settings-service/configuration/export/auto/reports/{timestamp}:
    get:
      operationId: get-auto-export-report-details
      summary: Get the details for an auto-export.
      description: Get the detailed report for the specified auto-export operation.
      parameters:
        - in: path
          name: timestamp
          required: true
          schema:
            $ref: "#/components/schemas/ReadOnlyDateTime"
      responses:
        "200":
          description: The detailed report for a past auto-export operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConfigurationAutoExportReport"
              examples:
                success-report:
                  $ref: "#/components/examples/ConfigurationAutoExportSuccessReport"
                failure-report:
                  $ref: "#/components/examples/ConfigurationAutoExportFailureReport"
        "400":
          description: The auto-export report does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_CONFIGURATION_EXPORT_ENABLED
      tags:
        - Automatic Configuration Promotion
  /settings-service/configuration/import/auto:
    post:
      operationId: auto-import-iddm-configuration
      summary: Auto-import IDDM configuration.
      description: Import IDDM configuration using a fully automated mechanism. The
        configurations must have previously been exported from the source IDDM
        so that they are staged for import.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConfigurationAutoImportRequest"
            examples:
              request:
                $ref: "#/components/examples/ConfigurationAutoImportRequest"
      responses:
        "200":
          description: The auto-promotion import has been successful.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PromotionOperationResponse"
              examples:
                success:
                  $ref: "#/components/examples/PromotionOperationResponse"
        "400":
          description: The auto-promotion import has failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_CONFIGURATION_IMPORT_ENABLED
      tags:
        - Automatic Configuration Promotion
  /settings-service/configuration/import/auto/reports:
    get:
      operationId: get-auto-import-report-list
      summary: Get a list of auto-import reports.
      description: Get a list of all the auto-import reports that exist in the system.
        Each report corresponds to an operation that  was performed. Only the
        last 100 reports are preserved.
      responses:
        "200":
          description: A list of the reports of past auto-import operations.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AutoPromotionReportList"
              examples:
                report-names:
                  $ref: "#/components/examples/AutoPromotionReportList"
      security:
        - bearer_auth:
            - SCOPE_CONFIGURATION_IMPORT_ENABLED
      tags:
        - Automatic Configuration Promotion
  /settings-service/configuration/import/auto/reports/{timestamp}:
    get:
      operationId: get-auto-import-report-details
      summary: Get the details for an auto-import.
      description: Get the detailed report for the specified auto-import operation.
      parameters:
        - in: path
          name: timestamp
          schema:
            $ref: "#/components/schemas/ReadOnlyDateTime"
      responses:
        "200":
          description: The detailed report for a past auto-import operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConfigurationAutoImportReport"
              examples:
                success-report:
                  $ref: "#/components/examples/ConfigurationAutoImportSuccessReport"
                failure-report:
                  $ref: "#/components/examples/ConfigurationAutoImportFailureReport"
        "404":
          description: The auto-import report does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_CONFIGURATION_IMPORT_ENABLED
      tags:
        - Automatic Configuration Promotion
  /settings-service/configuration/settings:
    get:
      summary: Get configuration promotion settings.
      operationId: get-configuration-promotion-settings
      description: Get the current settings for configuration promotion.
      responses:
        "200":
          description: The settings.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConfigurationPromotionSettingsResponse"
              examples:
                settings:
                  $ref: "#/components/examples/ConfigurationPromotionSettingsResponse"
      security:
        - bearer_auth: []
      tags:
        - Automatic Configuration Promotion
  /settings-service/identity_observability/{pipelineId}/connector_config:
    parameters:
      - $ref: "#/components/parameters/pipelineId"
    get:
      operationId: getConnectorConfigByPipelineId
      summary: Get the connector configuration for a specified pipeline id.
      description: Get specific connector configuration to manage connectors by the
        pipeline id.
      responses:
        "200":
          description: The connector configuration retrieved by pipeline id.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConnectorConfig"
              examples:
                example-1:
                  $ref: "#/components/examples/ConnectorConfig"
        "404":
          description: The connector configuration does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_IDENTITY_OBSERVABILITY_VIEW
            - SCOPE_IDENTITY_OBSERVABILITY_EDIT
      tags:
        - Identity Observability Configuration
    put:
      operationId: updateConnectorConfigByPipelineId
      summary: Update the connector configuration for a specified pipeline id.
      description: Update specific connector configuration to manage connectors by the
        pipeline id.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConnectorConfig"
            examples:
              example-1:
                $ref: "#/components/examples/ConnectorConfig"
      responses:
        "200":
          description: The connector configuration updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConnectorConfig"
              examples:
                example-1:
                  $ref: "#/components/examples/ConnectorConfig"
        "400":
          description: Invalid request body.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
        "404":
          description: The connector configuration does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_IDENTITY_OBSERVABILITY_VIEW
            - SCOPE_IDENTITY_OBSERVABILITY_EDIT
      tags:
        - Identity Observability Configuration
  /settings-service/identity_observability/{pipelineId}/connector_types:
    parameters:
      - $ref: "#/components/parameters/pipelineId"
    get:
      operationId: getConnectorTypesByPipelineId
      summary: Get the available connector types for a specified pipeline id.
      description: Get the available connector types and their properties for a pipeline.
      responses:
        "200":
          description: Connector types fetched successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ConnectorType"
              examples:
                example-1:
                  $ref: "#/components/examples/ConnectorTypeList"
        "404":
          description: The pipeline does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_IDENTITY_OBSERVABILITY_VIEW
            - SCOPE_IDENTITY_OBSERVABILITY_EDIT
      tags:
        - Identity Observability Configuration
  /settings-service/identity_observability/{pipelineId}/connector_reset:
    parameters:
      - $ref: "#/components/parameters/pipelineId"
    post:
      operationId: resetConnectorByPipelineId
      summary: Reset the connector cursor for a specified pipeline id.
      description: Reset the cursor position for a connector associated with the
        specified pipeline id.
      responses:
        "200":
          description: The connector cursor reset successfully.
        "404":
          description: The pipeline or connector does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
        "500":
          description: Internal server error when resetting the connector.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_IDENTITY_OBSERVABILITY_EDIT
      tags:
        - Identity Observability Configuration
  /settings-service/identity_observability/{pipelineId}/suspend:
    parameters:
      - $ref: "#/components/parameters/pipelineId"
    post:
      operationId: suspendPipelineByPipelineId
      summary: Suspend a pipeline by pipeline id.
      description: Change the state of a pipeline to suspended.
      responses:
        "200":
          description: The pipeline was suspended successfully.
        "404":
          description: The pipeline does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
        "500":
          description: Internal server error when suspending the pipeline.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_IDENTITY_OBSERVABILITY_EDIT
      tags:
        - Identity Observability Configuration
  /settings-service/identity_observability/{pipelineId}/resume:
    parameters:
      - $ref: "#/components/parameters/pipelineId"
    post:
      operationId: resumePipelineByPipelineId
      summary: Resume a pipeline by pipeline id.
      description: Change the state of a suspended pipeline to active.
      responses:
        "200":
          description: The pipeline was resumed successfully.
        "404":
          description: The pipeline does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
        "500":
          description: Internal server error when resuming the pipeline.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_IDENTITY_OBSERVABILITY_EDIT
      tags:
        - Identity Observability Configuration
  /authentication-service/access_tokens:
    get:
      operationId: get-access-token-list
      description: Get a list of access tokens.
      summary: Get list of access tokens
      security:
        - bearer_auth: []
      responses:
        "200":
          description: Access tokens Found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AccessToken"
              examples:
                example-1:
                  $ref: "#/components/examples/GetAccessTokenListExample"
      tags:
        - Access Control
    post:
      description: Create an access token. The access token value will be returned in
        the response body, and cannot be retrieved again after creation.
      operationId: create-access-token
      summary: Create an access token
      security:
        - bearer_auth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccessToken"
            examples:
              example-1:
                $ref: "#/components/examples/AccessTokenExample"
      responses:
        "201":
          description: Access token Created
          content:
            application/json:
              schema:
                type: string
                description: The token value. The value cannot be retrieved again after the
                  request is completed (that is, it can only be viewed once).
        "400":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
        "409":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      tags:
        - Access Control
  /authentication-service/access_tokens/{name}:
    parameters:
      - $ref: "#/components/parameters/AccessTokenName"
    get:
      summary: Get an access token
      description: Get an access token by name.
      operationId: get-access-token
      security:
        - bearer_auth: []
      responses:
        "200":
          description: Access token found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessToken"
              examples:
                example-1:
                  $ref: "#/components/examples/AccessTokenExample"
        "404":
          description: Client error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      tags:
        - Access Control
    delete:
      description: Delete an access token by name.
      operationId: delete-access-token
      summary: Delete an access token
      security:
        - bearer_auth: []
      responses:
        "200":
          description: OK
      tags:
        - Access Control
  /authentication-service/login:
    post:
      summary: Login and obtain an auth token
      operationId: post-login
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                x-examples:
                  example-1:
                    token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJwcml2aWxlZ2VzIjpbIlJPTEVfREFUQV9TVE9SRV9XUklURSIsIlJPTEVfR0xPQkFMX1BST0ZJTEVfVklFV0VSX0RFU0lHTkVSIiwiUk9MRV9EQVRBX1NPVVJDRV9XUklURSIsIlJPTEVfSUNTX0FETUlOIiwiUk9MRV9EQVRBX1NUT1JFX1JFQUQiLCJST0xFX0FDTF9XUklURSIsIlJPTEVfU0VSVklDRVNfU0hVVERPV04iLCJST0xFX05BTUlOR19DT05URVhUX1dSSVRFIiwiUk9MRV9BQ0xfUkVBRCIsIlJPTEVfREFUQV9TT1VSQ0VfUkVBRCIsIlJPTEVfTkFNSU5HX0NPTlRFWFRfUkVBRCIsIlJPTEVfVEFTS1NfQURNSU4iLCJST0xFX0lOU1RBTkNFX1dSSVRFIiwiUk9MRV9VUERBVEVfU0NIRU1BIiwiUk9MRV9DT05GSUdfV1JJVEUiLCJST0xFX0NPTkZJR19SRUFEIiwiUk9MRV9JTlNUQU5DRV9SRUFEIiwiUk9MRV9HTE9CQUxfUFJPRklMRV9WSUVXRVJfUkVBRCIsIlJPTEVfU0VSVklDRVNfUkVTVEFSVCIsIlJPTEVfR0xPQkFMX1BST0ZJTEVfVklFV0VSX1dSSVRFIl0sInNlcnZlciI6Imh0dHBzOi8vY3AucmFkaWFudG9uZWZpZHNlcnZpY2UuY29tIiwib3JnYW5pemF0aW9uIjoiUmFkaWFudCBMb2dpYyBJbmMiLCJpc3MiOiJyYWRpYW50bG9naWMiLCJleHAiOjE2ODA4MDUwMTcsImlhdCI6MTY4MDgwMTQxNywiZW1haWwiOiJtbW9nZXNzaWVAcmFkaWFudGxvZ2ljLmNvbSIsInVzZXJuYW1lIjoidWlkPW5ld3VzZXIsb3U9Z2xvYmFsdXNlcnMsY249Y29uZmlnIn0.w_fe0mN34cltJsdrCjPNfKSsvMnbvC8bPGiC5443EZA
              examples:
                Example JWT:
                  value:
                    token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJwcml2aWxlZ2VzIjpbIlJPTEVfREFUQV9TVE9SRV9XUklURSIsIlJPTEVfR0xPQkFMX1BST0ZJTEVfVklFV0VSX0RFU0lHTkVSIiwiUk9MRV9EQVRBX1NPVVJDRV9XUklURSIsIlJPTEVfSUNTX0FETUlOIiwiUk9MRV9EQVRBX1NUT1JFX1JFQUQiLCJST0xFX0FDTF9XUklURSIsIlJPTEVfU0VSVklDRVNfU0hVVERPV04iLCJST0xFX05BTUlOR19DT05URVhUX1dSSVRFIiwiUk9MRV9BQ0xfUkVBRCIsIlJPTEVfREFUQV9TT1VSQ0VfUkVBRCIsIlJPTEVfTkFNSU5HX0NPTlRFWFRfUkVBRCIsIlJPTEVfVEFTS1NfQURNSU4iLCJST0xFX0lOU1RBTkNFX1dSSVRFIiwiUk9MRV9VUERBVEVfU0NIRU1BIiwiUk9MRV9DT05GSUdfV1JJVEUiLCJST0xFX0NPTkZJR19SRUFEIiwiUk9MRV9JTlNUQU5DRV9SRUFEIiwiUk9MRV9HTE9CQUxfUFJPRklMRV9WSUVXRVJfUkVBRCIsIlJPTEVfU0VSVklDRVNfUkVTVEFSVCIsIlJPTEVfR0xPQkFMX1BST0ZJTEVfVklFV0VSX1dSSVRFIl0sInNlcnZlciI6Imh0dHBzOi8vY3AucmFkaWFudG9uZWZpZHNlcnZpY2UuY29tIiwib3JnYW5pemF0aW9uIjoiUmFkaWFudCBMb2dpYyBJbmMiLCJpc3MiOiJyYWRpYW50bG9naWMiLCJleHAiOjE2ODA4MDUwMTcsImlhdCI6MTY4MDgwMTQxNywiZW1haWwiOiJtbW9nZXNzaWVAcmFkaWFudGxvZ2ljLmNvbSIsInVzZXJuYW1lIjoidWlkPW5ld3VzZXIsb3U9Z2xvYmFsdXNlcnMsY249Y29uZmlnIn0.w_fe0mN34cltJsdrCjPNfKSsvMnbvC8bPGiC5443EZA
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  reason:
                    type: string
              examples:
                Example - Unauthorized:
                  value:
                    reason: Authentication failed.
      security: []
      description: A Login endpoint with basic authentication
      parameters:
        - schema:
            type: string
            maxLength: 10000
          in: header
          name: Authorization
          description: "Base 64 encoded username and password concatenated with :"
      tags:
        - AuthToken API
  /authentication-service/authToken/refresh:
    put:
      summary: Refresh an auth token that is about to expire
      operationId: put-token-refresh
      security: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                x-examples:
                  example-1:
                    token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJwcml2aWxlZ2VzIjpbIlJPTEVfREFUQV9TVE9SRV9XUklURSIsIlJPTEVfR0xPQkFMX1BST0ZJTEVfVklFV0VSX0RFU0lHTkVSIiwiUk9MRV9EQVRBX1NPVVJDRV9XUklURSIsIlJPTEVfSUNTX0FETUlOIiwiUk9MRV9EQVRBX1NUT1JFX1JFQUQiLCJST0xFX0FDTF9XUklURSIsIlJPTEVfU0VSVklDRVNfU0hVVERPV04iLCJST0xFX05BTUlOR19DT05URVhUX1dSSVRFIiwiUk9MRV9BQ0xfUkVBRCIsIlJPTEVfREFUQV9TT1VSQ0VfUkVBRCIsIlJPTEVfTkFNSU5HX0NPTlRFWFRfUkVBRCIsIlJPTEVfVEFTS1NfQURNSU4iLCJST0xFX0lOU1RBTkNFX1dSSVRFIiwiUk9MRV9VUERBVEVfU0NIRU1BIiwiUk9MRV9DT05GSUdfV1JJVEUiLCJST0xFX0NPTkZJR19SRUFEIiwiUk9MRV9JTlNUQU5DRV9SRUFEIiwiUk9MRV9HTE9CQUxfUFJPRklMRV9WSUVXRVJfUkVBRCIsIlJPTEVfU0VSVklDRVNfUkVTVEFSVCIsIlJPTEVfR0xPQkFMX1BST0ZJTEVfVklFV0VSX1dSSVRFIl0sInNlcnZlciI6Imh0dHBzOi8vY3AucmFkaWFudG9uZWZpZHNlcnZpY2UuY29tIiwib3JnYW5pemF0aW9uIjoiUmFkaWFudCBMb2dpYyBJbmMiLCJpc3MiOiJyYWRpYW50bG9naWMiLCJleHAiOjE2ODA4MDUwMTcsImlhdCI6MTY4MDgwMTQxNywiZW1haWwiOiJtbW9nZXNzaWVAcmFkaWFudGxvZ2ljLmNvbSIsInVzZXJuYW1lIjoidWlkPW5ld3VzZXIsb3U9Z2xvYmFsdXNlcnMsY249Y29uZmlnIn0.w_fe0mN34cltJsdrCjPNfKSsvMnbvC8bPGiC5443EZA
              examples:
                Example - Refresh:
                  value:
                    token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJwcml2aWxlZ2VzIjpbIlJPTEVfREFUQV9TVE9SRV9XUklURSIsIlJPTEVfR0xPQkFMX1BST0ZJTEVfVklFV0VSX0RFU0lHTkVSIiwiUk9MRV9EQVRBX1NPVVJDRV9XUklURSIsIlJPTEVfSUNTX0FETUlOIiwiUk9MRV9EQVRBX1NUT1JFX1JFQUQiLCJST0xFX0FDTF9XUklURSIsIlJPTEVfU0VSVklDRVNfU0hVVERPV04iLCJST0xFX05BTUlOR19DT05URVhUX1dSSVRFIiwiUk9MRV9BQ0xfUkVBRCIsIlJPTEVfREFUQV9TT1VSQ0VfUkVBRCIsIlJPTEVfTkFNSU5HX0NPTlRFWFRfUkVBRCIsIlJPTEVfVEFTS1NfQURNSU4iLCJST0xFX0lOU1RBTkNFX1dSSVRFIiwiUk9MRV9VUERBVEVfU0NIRU1BIiwiUk9MRV9DT05GSUdfV1JJVEUiLCJST0xFX0NPTkZJR19SRUFEIiwiUk9MRV9JTlNUQU5DRV9SRUFEIiwiUk9MRV9HTE9CQUxfUFJPRklMRV9WSUVXRVJfUkVBRCIsIlJPTEVfU0VSVklDRVNfUkVTVEFSVCIsIlJPTEVfR0xPQkFMX1BST0ZJTEVfVklFV0VSX1dSSVRFIl0sInNlcnZlciI6Imh0dHBzOi8vY3AucmFkaWFudG9uZWZpZHNlcnZpY2UuY29tIiwib3JnYW5pemF0aW9uIjoiUmFkaWFudCBMb2dpYyBJbmMiLCJpc3MiOiJyYWRpYW50bG9naWMiLCJleHAiOjE2ODA4MDUwMTcsImlhdCI6MTY4MDgwMTQxNywiZW1haWwiOiJtbW9nZXNzaWVAcmFkaWFudGxvZ2ljLmNvbSIsInVzZXJuYW1lIjoidWlkPW5ld3VzZXIsb3U9Z2xvYmFsdXNlcnMsY249Y29uZmlnIn0.w_fe0mN34cltJsdrCjPNfKSsvMnbvC8bPGiC5443EZA
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
              examples:
                Example - Unauthorized:
                  value:
                    reason: Authentication failed.
      parameters:
        - schema:
            type: string
            maxLength: 10000
          in: header
          name: Authorization
          description: Authorization header containing the bearer token
      description: An endpoint for for obtaining a refresh auth token to replace an
        auth token that is about to expire
      tags:
        - AuthToken API
  /authentication-service/authToken/{authToken}:
    delete:
      summary: Revoke a token. Once a token is revoked, it cannot be used to perform
        any operation that requires authorization.
      operationId: delete-auth-token
      security:
        - bearer_auth:
            - SCOPE_AUTH_TOKEN_REVOKE
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized - the token used to perform this operation does not
            have the required authorization, has expired, or has been revoked.
          content:
            application/json:
              schema:
                type: string
              examples:
                Example - Unauthorized:
                  value: Token has expired or has been revoked.
      parameters:
        - schema:
            type: string
            maxLength: 10000
          in: path
          name: authToken
          required: true
          description: The authToken to be revoked
        - schema:
            type: string
            maxLength: 10000
          in: header
          name: Authorization
          description: Authorization header containing the bearer token that it authorized
            to perform a revoke token operation.
      tags:
        - AuthToken API
  /authentication-service/directory_manager:
    get:
      summary: Get the directory manager settings
      operationId: getDirManager
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DirectoryManagerSettings"
              examples:
                example-1:
                  $ref: "#/components/examples/DirectoryManagerSettings"
      security:
        - bearer_auth: []
      tags:
        - FID Directory Manager
    put:
      summary: Update the directory manager settings
      operationId: updateDirManager
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DirectoryManagerSettings"
            examples:
              example-1:
                $ref: "#/components/examples/DirectoryManagerSettings"
      responses:
        "200":
          description: OK
        "400":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth: []
      tags:
        - FID Directory Manager
  /authentication-service/special_groups:
    get:
      summary: Get special groups settings
      operationId: getSpecialGroups
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SpecialGroups"
              examples:
                example-1:
                  $ref: "#/components/examples/SpecialGroups"
      security:
        - bearer_auth: []
      tags:
        - FID Directory Manager
    put:
      summary: Update the special groups settings
      operationId: UpdateSpecialGroups
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SpecialGroups"
            examples:
              example-1:
                $ref: "#/components/examples/SpecialGroups"
      responses:
        "200":
          description: OK
        "400":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth: []
      tags:
        - FID Directory Manager
  /authentication-service/roles:
    get:
      operationId: get-role-list
      description: Get a list of roles
      summary: Get a list of Roles
      security:
        - bearer_auth: []
      responses:
        "200":
          description: Roles Found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/GetRolesResponseItem"
              examples:
                example-1:
                  $ref: "#/components/examples/GetRolesResponseExample"
      tags:
        - FID Roles and Permissions
    post:
      description: Create a role based on an existing role
      operationId: create-role
      summary: Create a role
      parameters:
        - $ref: "#/components/parameters/roleToClone"
      security:
        - bearer_auth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoleDetails"
            examples:
              example-1:
                $ref: "#/components/examples/RoleDetailsExample"
      responses:
        "201":
          description: Role Created
        "400":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
        "409":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      tags:
        - FID Roles and Permissions
  /authentication-service/roles/{name}:
    parameters:
      - $ref: "#/components/parameters/name"
    get:
      summary: Get a Role
      description: Get a role by name
      operationId: get-role
      security:
        - bearer_auth: []
      responses:
        "200":
          description: Role found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoleDetails"
              examples:
                example-1:
                  $ref: "#/components/examples/RoleDetailsExample"
        "404":
          description: Client error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      tags:
        - FID Roles and Permissions
    put:
      description: Update an existing role
      operationId: update-role
      summary: Update a role
      security:
        - bearer_auth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoleDetails"
            examples:
              example-1:
                $ref: "#/components/examples/RoleDetailsExample"
      responses:
        "200":
          description: Role updated
        "400":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
        "404":
          description: Client error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      tags:
        - FID Roles and Permissions
    delete:
      description: Delete a role
      operationId: delete-role
      summary: Delete a role
      security:
        - bearer_auth: []
      responses:
        "200":
          description: OK
        "400":
          description: Default role deletion attempted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      tags:
        - FID Roles and Permissions
  /authentication-service/users:
    get:
      operationId: get-user-list
      description: Get a list of fid users.
      summary: Get a list of Users
      parameters:
        - $ref: "#/components/parameters/searchFilter"
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/cursor"
      security:
        - bearer_auth: []
      responses:
        "200":
          description: Users Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUsersResponse"
              examples:
                example-1:
                  $ref: "#/components/examples/UserDetailsListExample"
      tags:
        - FID Users
    post:
      description: Create a new user
      operationId: create-user
      summary: Create a user
      security:
        - bearer_auth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserDetails"
            examples:
              example-1:
                $ref: "#/components/examples/UserDetailsExample"
      responses:
        "201":
          description: User Created
        "400":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
        "409":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      tags:
        - FID Users
  /authentication-service/users/{username}:
    parameters:
      - $ref: "#/components/parameters/username"
    get:
      summary: Get a user
      description: Get a user by username
      operationId: get-user
      security:
        - bearer_auth: []
      responses:
        "200":
          description: User found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDetails"
              examples:
                example-1:
                  $ref: "#/components/examples/UserDetailsExample"
        "404":
          description: Client error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      tags:
        - FID Users
    put:
      description: Update an existing user
      operationId: update-user
      summary: Update a user
      security:
        - bearer_auth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserDetails"
            examples:
              example-1:
                $ref: "#/components/examples/UserDetailsExample"
      responses:
        "200":
          description: User updated
        "400":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
        "404":
          description: Client error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      tags:
        - FID Users
    delete:
      description: Delete a user
      operationId: delete-user
      summary: Delete a user
      security:
        - bearer_auth: []
      responses:
        "200":
          description: OK
      tags:
        - FID Users
  /authentication-service/users/{username}/roles:
    put:
      description: Update the list of roles associated with a user
      operationId: update-user-roles
      summary: Update Roles for User
      parameters:
        - $ref: "#/components/parameters/username"
      security:
        - bearer_auth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            example:
              - admin
              - testRole
              - dev
      responses:
        "200":
          description: User updated
        "404":
          description: Client error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      deprecated: true
      tags:
        - FID Users
  /settings-service/dashboard:
    get:
      summary: Get Dashboard
      operationId: get-dashboard
      description: Get information for the main Dashboard screen
      security:
        - bearer_auth:
            - SCOPE_DASHBOARD_VIEW
            - SCOPE_DASHBOARD_EDIT
      responses:
        "200":
          description: Dashboard retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DashboardItem"
              examples:
                example-1:
                  $ref: "#/components/examples/DashboardGetExample"
      tags:
        - Dashboard
    put:
      summary: Update Dashboard
      operationId: update-dashboard
      description: Update the main Dashboard screen
      security:
        - bearer_auth:
            - SCOPE_DASHBOARD_EDIT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/DashboardItem"
            examples:
              example-1:
                $ref: "#/components/examples/DashboardPutExample"
      responses:
        "200":
          description: Dashboard widget updated successfully
      tags:
        - Dashboard
  /settings-service/dashboard/service_summary:
    get:
      summary: Get Service Summary Widget
      operationId: get-service-summary
      description: Get information for the Service Summary widget
      security:
        - bearer_auth:
            - SCOPE_DASHBOARD_VIEW
            - SCOPE_DASHBOARD_EDIT
      responses:
        "200":
          description: Service Summary widget info retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceSummaryWidget"
              examples:
                example-1:
                  $ref: "#/components/examples/GetServiceSummaryWidgetResponseExample"
      tags:
        - Dashboard
  /settings-service/dashboard/what_new:
    get:
      summary: Get What's New Widget
      operationId: get-what-new
      description: Get information for the What's New widget
      security:
        - bearer_auth:
            - SCOPE_DASHBOARD_VIEW
            - SCOPE_DASHBOARD_EDIT
      parameters:
        - name: numberOfItems
          in: query
          required: false
          description: Number of items returned. If not specified, five items will be
            returned.
          schema:
            type: integer
            default: 5
      responses:
        "200":
          description: What's New widget info retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WhatNewWidgetItem"
              examples:
                example-1:
                  $ref: "#/components/examples/GetWhatNewWidgetResponseExample"
      tags:
        - Dashboard
  /settings-service/dashboard/product_version:
    get:
      summary: Get Product Version Widget
      operationId: get-product-version
      description: Get information for the Product Version widget
      security:
        - bearer_auth:
            - SCOPE_DASHBOARD_VIEW
            - SCOPE_DASHBOARD_EDIT
      responses:
        "200":
          description: Product Version widget info retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductVersionWidget"
              examples:
                example-1:
                  $ref: "#/components/examples/GetProductVersionWidgetResponseExample"
      tags:
        - Dashboard
  /settings-service/dashboard/links:
    get:
      summary: Get Links Widget
      operationId: get-links
      description: Get information for the Links widget
      security:
        - bearer_auth:
            - SCOPE_DASHBOARD_VIEW
            - SCOPE_DASHBOARD_EDIT
      responses:
        "200":
          description: Links widget info retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LinksWidgetItem"
              examples:
                example-1:
                  $ref: "#/components/examples/LinksWidgetExample"
      tags:
        - Dashboard
    put:
      summary: Update Links Widget
      description: Update the Links displayed in the widget. If creating a new link,
        use an id outside of (<) 1-10.
      operationId: update-links
      security:
        - bearer_auth:
            - SCOPE_DASHBOARD_EDIT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              maxItems: 100
              items:
                $ref: "#/components/schemas/LinksWidgetItem"
            examples:
              example-1:
                $ref: "#/components/examples/LinksWidgetExample"
      responses:
        "200":
          description: Links widget updated successfully.
      tags:
        - Dashboard
  /settings-service/dashboard/links/restore_defaults:
    put:
      summary: Restore Default Links
      description: Add any default widgets that are missing and restore all default
        widgets that were modified
      operationId: restore-links
      security:
        - bearer_auth:
            - SCOPE_DASHBOARD_EDIT
      responses:
        "200":
          description: New list of Links after defaults are restored
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LinksWidgetItem"
              examples:
                example-1:
                  $ref: "#/components/examples/LinksWidgetExample"
      tags:
        - Dashboard
  /data-catalog-service/data_preview/ldap:
    post:
      summary: Get ldap root nodes
      description: Get the root nodes for a new or existing LDAP data source.
      operationId: getPreviewLdapRoot
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PreviewLdapDataSource"
      responses:
        "200":
          description: Root nodes retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
                - o=company_directory
                - o=example
                - cn=config
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DATA_CATALOG_DATA_SOURCE_VIEW
            - SCOPE_DATA_CATALOG_DATA_SOURCE_EDIT
      tags:
        - Data Preview
  /data-catalog-service/data_preview/ldap/{baseDn}:
    post:
      summary: Get ldap children nodes
      description: Get the children nodes of a base dn for a new or existing ldap data
        source.
      operationId: getPreviewLdapChildren
      parameters:
        - $ref: "#/components/parameters/SizeLimit"
        - $ref: "#/components/parameters/baseDn"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PreviewLdapDataSource"
      responses:
        "200":
          description: Child nodes retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PreviewBaseDnResponse"
              example:
                - dn: ou=Accounting,o=company_directory
                  rdn: ou=Accounting
                - dn: ou=Administration,o=companydirectory
                  rdn: ou=Administration
                - dn: ou=Inventory,o=companydirectory
                  rdn: ou=Inventory
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DATA_CATALOG_DATA_SOURCE_VIEW
            - SCOPE_DATA_CATALOG_DATA_SOURCE_EDIT
      tags:
        - Data Preview
  /data-catalog-service/data_sources/.search:
    post:
      description: Get a list of datasources and objects based on case-insensitive
        search. At least one of the query parameters (dataSourceFilter or
        objectFilter) must be provided.
      summary: Search data source objects
      operationId: search-data-source-objects
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                dataSourceFilter:
                  type: string
                  description: Search for data sources whose name contains (case-insensitive) the
                    filter. If this filter is not provided, all data sources
                    will be searched.
                objectFilter:
                  type: string
                  description: Search for data source objects whose name contains
                    (case-insensitive) the filter. If this filter is not
                    provided, then no objects will be searched.
      responses:
        "200":
          description: Objects Found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/searchObjectsResponse"
              examples:
                example-1:
                  $ref: "#/components/examples/searchObjectList"
        "400":
          description: Bad input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DATA_CATALOG_DATA_SOURCE_VIEW
            - SCOPE_DATA_CATALOG_DATA_SOURCE_EDIT
      tags:
        - Data Sources
  /data-catalog-service/data_sources:
    get:
      parameters:
        - $ref: "#/components/parameters/activeOnly"
        - $ref: "#/components/parameters/PageNumber"
        - $ref: "#/components/parameters/PageSize"
        - $ref: "#/components/parameters/Filter"
        - $ref: "#/components/parameters/SortOrder"
        - $ref: "#/components/parameters/sortBy"
        - $ref: "#/components/parameters/type"
      summary: Get a list of data sources
      security:
        - bearer_auth:
            - SCOPE_DATA_CATALOG_DATA_SOURCE_VIEW
            - SCOPE_DATA_CATALOG_DATA_SOURCE_EDIT
      responses:
        "200":
          description: Data Sources Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getDataSourcesReturnObj"
              examples:
                example1:
                  $ref: "#/components/examples/getDataSourcesReturnObjExample"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      operationId: get-data-sources
      description: Retrieve the list of data sources for the data catalog.
      tags:
        - Data Sources
    post:
      description: Create new data source
      operationId: create-data-source
      summary: Create a data source
      security:
        - bearer_auth:
            - SCOPE_DATA_CATALOG_DATA_SOURCE_EDIT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/genericDataSource"
      responses:
        "201":
          description: Data source created. A message will be returned if schema
            extraction fails for ldap data source.
          content:
            application/json:
              schema:
                type: string
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
        "409":
          description: Data source name conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      tags:
        - Data Sources
  /data-catalog-service/data_sources/{existingDataSource}/copy:
    post:
      description: Copy a data source into a new data source
      operationId: clone-data-source
      summary: Clone a data source
      parameters:
        - $ref: "#/components/parameters/existingDataSource"
        - $ref: "#/components/parameters/newDataSourceName"
      security:
        - bearer_auth:
            - SCOPE_DATA_CATALOG_DATA_SOURCE_EDIT
      responses:
        "201":
          description: Data source created. A message will be returned if schema
            extraction fails for ldap data source.
          content:
            application/json:
              schema:
                type: string
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
        "409":
          description: Data source name conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      tags:
        - Data Sources
  /data-catalog-service/data_sources/{name}:
    get:
      parameters:
        - $ref: "#/components/parameters/DataSourceName"
      security:
        - bearer_auth:
            - SCOPE_DATA_CATALOG_DATA_SOURCE_VIEW
            - SCOPE_DATA_CATALOG_DATA_SOURCE_EDIT
      summary: Get data source by name
      responses:
        "200":
          description: Data Source Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/genericDataSource"
              examples:
                ldap:
                  value:
                    name: openDj
                    category: ldap
                    type: opendj
                    createdOn: 2022-09-27T08:30:00Z
                    readOnly: false
                    description: An example OpenDJ data source
                    defaultSchema: opendjschema
                    active: true
                    addedSchemas:
                      - extraopendjschema
                    host: my.localhost
                    port: 2222
                    ssl: false
                    bindDn: fakeDn
                    password: null
                    baseDn: o=examples
                    pagedResultsControl: true
                    pageSize: 100
                    chaseReferrals: false
                    failovers:
                      - host: my.otherhost
                        port: 2223
                        ssl: false
                      - host: 10.11.12.789
                        port: 7070
                        ssl: true
                    verifySslHostname: true
                    kerberosProfile: mykrb
                database:
                  value:
                    name: myDerby
                    category: database
                    type: derby
                    createdOn: 2022-09-27T08:30:00Z
                    readOnly: false
                    description: Sample Apache Derby data source
                    defaultSchema: derbyschema
                    active: false
                    addedSchemas:
                      - extraderbyschema
                      - extraextraderbyschema
                    driverClassName: org.apache.derby.jdbc.ClientDriver
                    url: jdbc:derby://hostname:1527/AdvWorks
                    username: app
                    password: null
                    failoverName: log2db
                custom:
                  value:
                    name: aws
                    category: custom
                    type: AWS
                    createdOn: 2022-09-27T08:30:00Z
                    readOnly: false
                    description: Sample AWS custom data source
                    defaultSchema: awsschema
                    active: true
                    addedSchemas: []
                    customProps:
                      url: https://fakeurl.com
                      isSecure: "false"
                      passthru: "false"
                      protocol: http
                      pubAppClassName: acsclient
                      subAppClassName: ascserver
        "404":
          description: Data source not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      operationId: get-data-source
      description: Get a single data source by name
      tags:
        - Data Sources
    put:
      summary: Update a data source.
      description: Update a data source specified by name with the passed data source info.
      operationId: update-data-source
      security:
        - bearer_auth:
            - SCOPE_DATA_CATALOG_DATA_SOURCE_EDIT
      parameters:
        - $ref: "#/components/parameters/DataSourceName"
        - $ref: "#/components/parameters/useExistingCredentials"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/genericDataSource"
      responses:
        "200":
          description: Data source updated successfully.
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
        "404":
          description: Data source not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      tags:
        - Data Sources
    delete:
      description: Delete the specified data source
      operationId: delete-data-source
      security:
        - bearer_auth:
            - SCOPE_DATA_CATALOG_DATA_SOURCE_EDIT
      summary: Delete a data source
      responses:
        "200":
          description: OK
      parameters:
        - $ref: "#/components/parameters/DataSourceName"
      tags:
        - Data Sources
  /data-catalog-service/data_sources/{name}/link_schema:
    put:
      summary: Link schema to data source
      description: Add a schema to the data source's default/added schema.
      operationId: link-data-source
      security:
        - bearer_auth:
            - SCOPE_DATA_CATALOG_DATA_SOURCE_EDIT
      parameters:
        - $ref: "#/components/parameters/DataSourceName"
        - $ref: "#/components/parameters/schemaName"
      responses:
        "200":
          description: Schema linked to data source
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
        "404":
          description: Data source or schema not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      tags:
        - Data Sources
  /data-catalog-service/data_sources/test_connection:
    post:
      description: Test the connection to a specified data source.
      summary: Test connection to data source
      operationId: data_sources-test_connection
      security:
        - bearer_auth:
            - SCOPE_DATA_CATALOG_DATA_SOURCE_VIEW
            - SCOPE_DATA_CATALOG_DATA_SOURCE_EDIT
      parameters:
        - $ref: "#/components/parameters/useExistingCredentials"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/genericDataSource"
      responses:
        "200":
          description: Data source connection attempted. True indicates successful
            connection; False indicates that connection failed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/testConnectionResults"
              examples:
                connection-success:
                  value:
                    success: true
                    message: null
                connection-failure:
                  value:
                    success: false
                    message: Invalid credentials
        "404":
          description: Existing data source not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      tags:
        - Data Sources
  /data-catalog-service/data_sources/import:
    post:
      summary: Import data source(s) from zip file
      description: Create data source(s) and associated schemas from a zip file. The
        file must contain a datasources.json file. It can also contain lod and
        org folders with orx schema files in them.
      security:
        - bearer_auth:
            - SCOPE_DATA_CATALOG_DATA_SOURCE_EDIT
      parameters:
        - $ref: "#/components/parameters/overrideExisting"
        - $ref: "#/components/parameters/performOpOnSchemas"
        - $ref: "#/components/parameters/crossEnvironment"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  nullable: false
                  format: binary
      responses:
        "201":
          description: Data source(s) and associated schemas (if requested) imported. A
            message will be returned if import is only partially successful.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationResult"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      operationId: import-data-source
      tags:
        - Data Sources
  /data-catalog-service/data_sources/import_xml:
    post:
      summary: Import data source(s) from xml file
      description: Create data source(s) from an XML file. This endpoint should be
        used to transfer 7.4.x XML exports of data sources to 8.1 envs.
      security:
        - bearer_auth:
            - SCOPE_DATA_CATALOG_DATA_SOURCE_EDIT
      parameters:
        - $ref: "#/components/parameters/overrideExisting"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  nullable: false
                  format: binary
      responses:
        "201":
          description: Data source(s) imported. A message will be returned if import is
            only partially successful.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationResult"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      operationId: import-data-source-xml
      tags:
        - Data Sources
  /data-catalog-service/data_sources/export:
    get:
      summary: Export data source(s) to zip file
      security:
        - bearer_auth:
            - SCOPE_DATA_CATALOG_DATA_SOURCE_VIEW
            - SCOPE_DATA_CATALOG_DATA_SOURCE_EDIT
      parameters:
        - $ref: "#/components/parameters/dataSources"
        - $ref: "#/components/parameters/performOpOnSchemas"
        - $ref: "#/components/parameters/crossEnvironment"
      responses:
        "200":
          description: Data source(s) and associated schemas (if requested) exported into
            zip file
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "404":
          description: Data source(s) not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      operationId: export-data-source
      description: Export data source(s) to a zip file. The file will contain a
        datasources.json file. It can also contain lod and org folders with orx
        schema files in them.
      tags:
        - Data Sources
  /data-catalog-service/data_sources/{name}/utils/objects:
    get:
      parameters:
        - $ref: "#/components/parameters/DataSourceName"
      summary: Get Objects for Data Source
      description: Get the list of objects available for schema extraction for a ldap
        or custom data source.
      operationId: get-objects
      security:
        - bearer_auth:
            - SCOPE_DATA_CATALOG_DATA_SOURCE_VIEW
            - SCOPE_DATA_CATALOG_DATA_SOURCE_EDIT
      responses:
        "200":
          description: Data source objects fetched successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
                - obj1
                - obj2
                - obj3
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
        "404":
          description: Data source not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      tags:
        - Data Sources
  /data-catalog-service/data_sources/utils/database_tables:
    post:
      summary: Get list of Database Tables
      description: Get the list of tables either in an existing database or in a new
        database. For an existing data source, pass the datasource name in the
        body. For a new data source, pass the connection info (driver, url,
        username, password) in the body.
      operationId: getDatabaseTablesList
      security:
        - bearer_auth:
            - SCOPE_DATA_CATALOG_DATA_SOURCE_VIEW
            - SCOPE_DATA_CATALOG_DATA_SOURCE_EDIT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DatabaseTablesRequestInfo"
      responses:
        "200":
          description: Database tables fetched successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DatabaseObject"
              examples:
                example-1:
                  value:
                    - name: APP.CUSTOMERLIST
                      type: VIEW
                    - name: APP.CUSTOMERS
                      type: TABLE
                    - name: APP.CUSTOMERSTATUS
                      type: VIEW
                    - name: APP.EMPLOYEES
                      type: TABLE
                    - name: APP.FAVORITEPRODUCTS
                      type: VIEW
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      tags:
        - Data Sources
  /data-catalog-service/data_sources/sdc/groups:
    get:
      summary: Get SDC Groups
      description: List the available secure data connector groups.
      operationId: getSDCGroups
      responses:
        "200":
          description: SDC groups listed successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SDCGroup"
              example:
                - id: 0a878505-f90a-41d8-b1e8-b645e74f0e2d
                  name: Dev-Group
                - id: 39d32bd7-2842-48e2-9b20-559041eb8495
                  name: Test-Group
                - id: 432eea8c-2b5e-406c-8650-764897a42714
                  name: Test-Group-2
      security:
        - bearer_auth:
            - SCOPE_DATA_CATALOG_DATA_SOURCE_VIEW
            - SCOPE_DATA_CATALOG_DATA_SOURCE_EDIT
      tags:
        - Data Sources
  /data-catalog-service/jdbc_drivers/upload:
    post:
      security:
        - bearer_auth:
            - SCOPE_DATA_CATALOG_TEMPLATE_MANAGEMENT_EDIT
      summary: Upload New Driver
      operationId: upload-new-driver
      description: Upload a driver file
      responses:
        "201":
          description: Driver Uploaded
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DriverFileClassName"
              example:
                driverClass: oracle.jdbc.OracleDriver
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
              description: The local file uploaded by the user.
      tags:
        - JDBC Drivers
  /data-catalog-service/jdbc_drivers/upload/{name}:
    parameters:
      - $ref: "#/components/parameters/JdbcDriverName"
    delete:
      security:
        - bearer_auth:
            - SCOPE_DATA_CATALOG_TEMPLATE_MANAGEMENT_EDIT
      summary: Delete Driver Uploaded File
      operationId: delete-uploaded-file
      responses:
        "200":
          description: Driver File Deleted
      description: Delete a driver upload file.
      tags:
        - JDBC Drivers
  /data-catalog-service/jdbc_drivers/files:
    get:
      security:
        - bearer_auth:
            - SCOPE_DATA_CATALOG_TEMPLATE_MANAGEMENT_VIEW
            - SCOPE_DATA_CATALOG_TEMPLATE_MANAGEMENT_EDIT
      summary: Get Driver Files and Classnames
      operationId: get-driver-files-and-classnames
      description: Get list of driver files and driver classes
      responses:
        "200":
          description: Get list of driver files and their classnames
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DriverFile"
              example:
                - name: someDriver.jar
                  driverClass: com.test.driverclass
                - name: otherDriver.jar
                  driverClass: com.test.otherdriverclass
      tags:
        - JDBC Drivers
  /data-catalog-service/meta/data_source_types:
    get:
      summary: Get data source type list
      operationId: get-data-source-type-list
      description: Get a list of data source types and metadata
      responses:
        "200":
          description: Data source type list fetched successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DataSourceType"
              examples:
                DataSourceTypeList:
                  value:
                    - name: Active Directory
                      description: A microsoft Active Directory data source
                      backendCategory: ldap
                      userCreated: false
                      icon: asdasdas
                      isLdap: true
                      meta:
                        - name: Username
                          description: User to bind with
                          sectionName: Credentials
                          defaultValue: ""
                          dataType: STRING
                          regex: ""
                          isRequired: true
                        - name: Password
                          description: Password to bind with
                          sectionName: Credentials
                          defaultValue: ""
                          dataType: PASSWORD
                          regex: ""
                          isRequired: true
                    - name: Derby
                      description: Apache Derby
                      backendCategory: database
                      userCreated: false
                      icon: ""
                      driverClass: com.rli.derby
                      urlPattern: jdbc:derby://&lt;hostname&gt;:&lt;port&gt;/&lt;database name&gt;
                      meta:
                        - name: Username
                          description: User to bind with
                          sectionName: Credentials
                          defaultValue: ""
                          dataType: STRING
                          regex: ""
                          isRequired: true
                        - name: Password
                          description: Password to bind with
                          sectionName: Credentials
                          defaultValue: ""
                          dataType: PASSWORD
                          regex: ""
                          isRequired: true
                    - name: AWS
                      description: Amazon AWS data source
                      backendCategory: custom
                      userCreated: false
                      icon: ""
                      javaClassName: com.rli.aws
                      meta:
                        - name: Username
                          description: User to bind with
                          sectionName: Credentials
                          defaultValue: ""
                          dataType: STRING
                          regex: ""
                          isRequired: true
                        - name: Password
                          description: Password to bind with
                          sectionName: Credentials
                          defaultValue: ""
                          dataType: PASSWORD
                          regex: ""
                          isRequired: true
                    - name: myderby
                      description: User-defined derby source type
                      backendCategory: database
                      userCreated: true
                      icon: ""
                      driverClass: org.apache.derby.jdbc.ClientDriver
                      urlPattern: jdbc:derby://&lt;hostname&gt;:&lt;port&gt;/&lt;database name&gt;
                      meta:
                        - name: Username
                          description: User to bind with
                          sectionName: Credentials
                          defaultValue: ""
                          dataType: STRING
                          regex: ""
                          isRequired: true
                        - name: Password
                          description: Password to bind with
                          sectionName: Credentials
                          defaultValue: ""
                          dataType: PASSWORD
                          regex: ""
                          isRequired: true
                    - name: okta
                      description: Custom OKTA data source type
                      backendCategory: custom
                      userCreated: true
                      icon: ""
                      javaClassName: com.rli.scripts.customobjects.oktaclient
                      meta:
                        - name: username
                          description: User to bind with
                          sectionName: Credentials
                          defaultValue: ""
                          dataType: STRING
                          regex: ""
                          isRequired: true
                        - name: Password
                          description: Password to bind with
                          sectionName: Credentials
                          defaultValue: ""
                          dataType: PASSWORD
                          regex: ""
                          isRequired: true
                        - name: apikey
                          description: API connection key
                          sectionName: Connection
                          defaultValue: ""
                          dataType: STRING
                          regex: ""
                          isRequired: true
                        - name: url
                          description: Url to connect to
                          sectionName: Connection
                          defaultValue: ""
                          dataType: STRING
                          regex: ""
                          isRequired: true
      security:
        - bearer_auth:
            - SCOPE_DATA_CATALOG_TEMPLATE_MANAGEMENT_VIEW
            - SCOPE_DATA_CATALOG_TEMPLATE_MANAGEMENT_EDIT
            - SCOPE_DATA_CATALOG_DATA_SOURCE_VIEW
      tags:
        - Data Source Type Metadata
    post:
      description: Create new meta data source type
      operationId: create-data-source-type
      summary: Create meta data source type
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DataSourceType"
            examples:
              example-DatabaseDataSourceType:
                value:
                  name: Derby
                  description: Apache Derby
                  backendCategory: database
                  icon: ""
                  driverClass: com.rli.derby
                  urlPattern: jdbc:derby://&lt;hostname&gt;:&lt;port&gt;/&lt;database name&gt;
              example-CustomDataSourceType:
                value:
                  name: AWS
                  description: Amazon AWS data source
                  backendCategory: custom
                  icon: ""
                  javaClassName: com.rli.aws
                  meta:
                    - name: Username
                      description: User to bind with
                      sectionName: Credentials
                      defaultValue: ""
                      dataType: STRING
                      regex: ""
                      isRequired: true
                    - name: Password
                      description: Password to bind with
                      sectionName: Credentials
                      defaultValue: ""
                      dataType: PASSWORD
                      regex: ""
                      isRequired: true
      responses:
        "201":
          description: Meta data source type created successfully.
        "409":
          description: Meta file already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DATA_CATALOG_TEMPLATE_MANAGEMENT_EDIT
      tags:
        - Data Source Type Metadata
  /data-catalog-service/meta/data_source_types/{name}:
    parameters:
      - $ref: "#/components/parameters/DataSourceTypeName"
    get:
      summary: Get data source type by name
      operationId: get-data-source-type-by-name
      description: Get a data source type and metadata
      responses:
        "200":
          description: Data source type fetched successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DataSourceType"
              examples:
                example-LdapDataSourceType:
                  value:
                    name: Active Directory
                    description: A microsoft Active Directory data source
                    backendCategory: ldap
                    userCreated: false
                    icon: ""
                    isLdap: true
                    meta:
                      - name: Username
                        description: User to bind with
                        sectionName: Credentials
                        defaultValue: ""
                        dataType: STRING
                        regex: ""
                        isRequired: true
                      - name: Password
                        description: Password to bind with
                        sectionName: Credentials
                        defaultValue: ""
                        dataType: PASSWORD
                        regex: ""
                        isRequired: true
                example-DatabaseDataSourceType:
                  value:
                    name: Derby
                    description: Apache Derby
                    backendCategory: database
                    userCreated: false
                    icon: ""
                    driverClass: com.rli.derby
                    urlPattern: jdbc:derby://&lt;hostname&gt;:&lt;port&gt;/&lt;database name&gt;
                    meta:
                      - name: Username
                        description: User to bind with
                        sectionName: Credentials
                        defaultValue: ""
                        dataType: STRING
                        regex: ""
                        isRequired: true
                      - name: Password
                        description: Password to bind with
                        sectionName: Credentials
                        defaultValue: ""
                        dataType: PASSWORD
                        regex: ""
                        isRequired: true
                example-CustomDataSourceType:
                  value:
                    name: AWS
                    description: Amazon AWS data source
                    backendCategory: custom
                    userCreated: false
                    icon: ""
                    javaClassName: com.rli.aws
                    isSchemaExtractable: false
                    meta:
                      - name: Username
                        description: User to bind with
                        sectionName: Credentials
                        defaultValue: ""
                        dataType: STRING
                        regex: ""
                        isRequired: true
                      - name: Password
                        description: Password to bind with
                        sectionName: Credentials
                        defaultValue: ""
                        dataType: PASSWORD
                        regex: ""
                        isRequired: true
        "404":
          description: Meta not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DATA_CATALOG_TEMPLATE_MANAGEMENT_VIEW
            - SCOPE_DATA_CATALOG_TEMPLATE_MANAGEMENT_EDIT
            - SCOPE_DATA_CATALOG_DATA_SOURCE_VIEW
      tags:
        - Data Source Type Metadata
    put:
      description: Update meta data source type
      operationId: update-data-source-type
      summary: Update meta data source type
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DataSourceType"
            examples:
              example-DatabaseDataSourceType:
                value:
                  name: Derby
                  description: Apache Derby
                  backendCategory: database
                  icon: ""
                  driverClass: com.rli.derby
                  urlPattern: jdbc:derby://&lt;hostname&gt;:&lt;port&gt;/&lt;database name&gt;
              example-CustomDataSourceType:
                value:
                  name: AWS
                  description: Amazon AWS data source
                  backendCategory: custom
                  icon: ""
                  javaClassName: com.rli.aws
                  meta:
                    - name: Username
                      description: User to bind with
                      sectionName: Credentials
                      defaultValue: ""
                      dataType: STRING
                      regex: ""
                      isRequired: true
                    - name: Password
                      description: Password to bind with
                      sectionName: Credentials
                      defaultValue: ""
                      dataType: PASSWORD
                      regex: ""
                      isRequired: true
      responses:
        "200":
          description: Meta data source type updated successfully.
        "404":
          description: Meta not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DATA_CATALOG_TEMPLATE_MANAGEMENT_EDIT
      tags:
        - Data Source Type Metadata
    delete:
      description: Delete meta data source type
      operationId: delete-data-source-type
      summary: Delete meta data source type
      responses:
        "200":
          description: Meta data source type successfully deleted.
      security:
        - bearer_auth:
            - SCOPE_DATA_CATALOG_TEMPLATE_MANAGEMENT_EDIT
      tags:
        - Data Source Type Metadata
  /data-catalog-service/meta/plugins:
    get:
      summary: Get plugins
      operationId: get-plugins
      description: Get list of uploaded plugins.
      security:
        - bearer_auth:
            - SCOPE_DATA_CATALOG_TEMPLATE_MANAGEMENT_VIEW
            - SCOPE_DATA_CATALOG_TEMPLATE_MANAGEMENT_EDIT
      responses:
        "200":
          description: Plugins fetched successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              examples:
                example-1:
                  value:
                    - TestPlugin1
                    - SomeOtherTestPlugin2
      tags:
        - Data Source Type Metadata
    post:
      summary: Import plugin
      operationId: import-plugin
      description: Upload a plugin file
      security:
        - bearer_auth:
            - SCOPE_DATA_CATALOG_TEMPLATE_MANAGEMENT_EDIT
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        "200":
          description: Import operation created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TemplateContents"
      tags:
        - Data Source Type Metadata
  /data-catalog-service/meta/plugins/{pluginName}:
    parameters:
      - $ref: "#/components/parameters/pluginName"
    delete:
      summary: Delete plugin
      operationId: delete-plugin
      description: Delete a plugin.
      responses:
        "200":
          description: Plugin deleted successfully.
      security:
        - bearer_auth:
            - SCOPE_DATA_CATALOG_TEMPLATE_MANAGEMENT_EDIT
      tags:
        - Data Source Type Metadata
  /data-catalog-service/meta/plugins/{pluginName}/classes:
    parameters:
      - $ref: "#/components/parameters/pluginName"
    get:
      summary: Get plugin classes
      operationId: get-plugin-classes
      description: Get class names for a specified plugin.
      responses:
        "200":
          description: Plugin classes fetched successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              examples:
                example-1:
                  value:
                    - com.rli.TestClass
                    - com.test.TestClass2
        "404":
          description: Plugin not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DATA_CATALOG_TEMPLATE_MANAGEMENT_VIEW
            - SCOPE_DATA_CATALOG_TEMPLATE_MANAGEMENT_EDIT
      tags:
        - Data Source Type Metadata
  /data-catalog-service/meta/check_is_loaded:
    post:
      summary: Check is loaded
      operationId: check-is-loaded
      description: Check if plugin/driver is loaded for specified class.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IsLoadedRequestBody"
            example:
              className: org.apache.derby.jdbc.ClientDriver
      responses:
        "200":
          description: Is loaded status fetched successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IsLoadedResponse"
              example:
                isLoaded: true
      security:
        - bearer_auth:
            - SCOPE_DATA_CATALOG_TEMPLATE_MANAGEMENT_VIEW
            - SCOPE_DATA_CATALOG_TEMPLATE_MANAGEMENT_EDIT
      tags:
        - Data Source Type Metadata
  /data-catalog-service/meta/import/{id}:
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Unique identifier of a particular import operation
    get:
      summary: Get Import Info
      operationId: getUploadedTemplates
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TemplateContents"
      security:
        - bearer_auth:
            - SCOPE_DATA_CATALOG_TEMPLATE_MANAGEMENT_VIEW
            - SCOPE_DATA_CATALOG_TEMPLATE_MANAGEMENT_EDIT
      tags:
        - Data Source Type Metadata
    post:
      summary: Execute Import
      description: Complete the import operation started with a previous upload
      operationId: importUploadedTemplates
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        description: Specify a list of datasource type names to be imported from the
          upload's content
      responses:
        "200":
          description: Import completed successfully
        "404":
          description: Import not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TemplateContents"
      security:
        - bearer_auth:
            - SCOPE_DATA_CATALOG_TEMPLATE_MANAGEMENT_EDIT
      tags:
        - Data Source Type Metadata
    delete:
      summary: Delete a Meta Import
      operationId: deleteUploadedTemplates
      responses:
        "200":
          description: OK
      security:
        - bearer_auth:
            - SCOPE_DATA_CATALOG_TEMPLATE_MANAGEMENT_EDIT
      tags:
        - Data Source Type Metadata
  /data-catalog-service/meta/import/{importId}/meta:
    parameters:
      - $ref: "#/components/parameters/importId"
    get:
      operationId: list-import-metas
      summary: List import metas
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DataSourceType"
      security:
        - bearer_auth:
            - SCOPE_DATA_CATALOG_TEMPLATE_MANAGEMENT_VIEW
            - SCOPE_DATA_CATALOG_TEMPLATE_MANAGEMENT_EDIT
      tags:
        - Data Source Type Metadata
    post:
      operationId: add-meta-to-import
      summary: Add meta to import
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DataSourceType"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DataSourceType"
      security:
        - bearer_auth:
            - SCOPE_DATA_CATALOG_TEMPLATE_MANAGEMENT_EDIT
      tags:
        - Data Source Type Metadata
  /data-catalog-service/meta/import/{importId}/meta/{name}:
    parameters:
      - $ref: "#/components/parameters/importId"
      - $ref: "#/components/parameters/DataSourceTypeName"
    get:
      summary: Get import meta
      operationId: get-import-meta
      description: Get contents of a template staged for import
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DataSourceType"
        "404":
          description: Template not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TemplateContents"
      security:
        - bearer_auth:
            - SCOPE_DATA_CATALOG_TEMPLATE_MANAGEMENT_VIEW
            - SCOPE_DATA_CATALOG_TEMPLATE_MANAGEMENT_EDIT
      tags:
        - Data Source Type Metadata
    put:
      summary: Update import meta
      operationId: update-import-meta
      description: Replace contents of a meta staged for import
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DataSourceType"
      responses:
        "200":
          description: OK
      security:
        - bearer_auth:
            - SCOPE_DATA_CATALOG_TEMPLATE_MANAGEMENT_EDIT
      tags:
        - Data Source Type Metadata
    delete:
      summary: Delete import meta
      operationId: delete-import-meta
      description: Remove a template staged for import
      responses:
        "200":
          description: OK
      security:
        - bearer_auth:
            - SCOPE_DATA_CATALOG_TEMPLATE_MANAGEMENT_EDIT
      tags:
        - Data Source Type Metadata
  /data-catalog-service/meta/import/{importId}/plugins/{pluginName}/classes:
    parameters:
      - $ref: "#/components/parameters/importId"
      - $ref: "#/components/parameters/pluginName"
    get:
      summary: Get import plugin classes
      operationId: get-import-plugin-classes
      description: Get class names for a specified plugin within import contents
      responses:
        "200":
          description: Plugin classes fetched successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              examples:
                example-1:
                  value:
                    - com.rli.TestClass
                    - com.test.TestClass2
        "404":
          description: Plugin not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DATA_CATALOG_TEMPLATE_MANAGEMENT_VIEW
            - SCOPE_DATA_CATALOG_TEMPLATE_MANAGEMENT_EDIT
      tags:
        - Data Source Type Metadata
  /data-catalog-service/meta/import:
    post:
      summary: Upload Meta Import File
      description: Upload a zip of meta content to stage an import operation.  The
        server will scan the uploaded file, and return a description of the
        contents, an ID for referencing this import operation, and a timestamp
        of how long the staged import will be retained before being
        automatically cancelled and deleted.
      operationId: uploadTemplates
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
              example:
                selectedItems:
                  templates:
                    - Active Directory
                    - AWS
                    - Azure AD
                  plugins:
                    - aws-1.8.10.jar
                    - azure-2.1.10.jar
                file: SOMEBINARYSTRING
        description: A zip file of exported meta content.
      responses:
        "200":
          description: Meta import file uploaded and scanned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TemplateContents"
              examples: {}
      security:
        - bearer_auth:
            - SCOPE_DATA_CATALOG_TEMPLATE_MANAGEMENT_EDIT
      tags:
        - Data Source Type Metadata
  /data-catalog-service/meta/export:
    post:
      summary: Export Metas
      description: Export list of selected templates and template plugins
      operationId: exportTemplates
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SelectedTemplates"
            example:
              templates:
                - Active Directory
                - AWS
                - Azure AD
      responses:
        "200":
          description: Templates and plugins exported successfully
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "404":
          description: Template or plugin not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DATA_CATALOG_TEMPLATE_MANAGEMENT_VIEW
            - SCOPE_DATA_CATALOG_TEMPLATE_MANAGEMENT_EDIT
      tags:
        - Data Source Type Metadata
  /data-catalog-service/private_files/{name}/upload/{meta}/{property}:
    parameters:
      - $ref: "#/components/parameters/DataSourceName"
      - $ref: "#/components/parameters/MetaName"
      - $ref: "#/components/parameters/PropertyName"
    post:
      description: Allows for upload of private file used by data catalog meta driven
        plugins.
      summary: Upload file.
      operationId: private-files_upload
      security:
        - bearer_auth:
            - SCOPE_DATA_CATALOG_DATA_SOURCE_VIEW
            - SCOPE_DATA_CATALOG_DATA_SOURCE_EDIT
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/PrivateBinaryFile"
      responses:
        "200":
          description: File operation result.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileOperationResult"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      tags:
        - Private File management for data catalog.
  /data-catalog-service/private_files/{name}/delete/{filename}:
    parameters:
      - $ref: "#/components/parameters/DataSourceName"
      - $ref: "#/components/parameters/PrivateFileName"
    delete:
      description: Allows for deletion of a private file.
      summary: Delete a file.
      operationId: private-files_delete
      security:
        - bearer_auth:
            - SCOPE_DATA_CATALOG_DATA_SOURCE_EDIT
      responses:
        "200":
          description: File operation result.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileOperationResult"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      tags:
        - Private File management for data catalog.
  /directory-browser-service/directory_browser:
    get:
      summary: Get Root DSE
      description: Fetch root entry and attributes. The root entry contains an
        attribute called "namingContexts", which holds a list of the names of
        the base-level nodes.
      operationId: getRootEntry
      parameters:
        - $ref: "#/components/parameters/attributes"
        - $ref: "#/components/parameters/AuthorizationHeader"
      responses:
        "200":
          description: Entry/Entries fetched successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntryResponse"
              examples:
                root-example:
                  value:
                    nodes:
                      - dn: ""
                        rdn: ""
                        attributes:
                          - name: objectclass
                            values:
                              - top
                              - vdapcontainer
                              - vdlabel
                              - vdDirectoryView
                          - name: namingContexts
                            values:
                              - cn=replicationjournal
                              - cn=system-registry
                              - o=companydirectory
                              - cn=registry
                              - cn=config
                              - o=companyprofiles
                              - ou=AllProfiles
                              - o=examples
                              - o=vds
                              - cn=changelog
                    cursor: null
                    next: null
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_BROWSER_VIEW
            - SCOPE_DIRECTORY_BROWSER_EDIT
      tags:
        - Directory Browser
    post:
      summary: Add Entry
      description: Add a new entry
      operationId: addEntry
      parameters:
        - $ref: "#/components/parameters/AuthorizationHeader"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Entry"
            example:
              dn: uid=aaaaa,ou=ad_sample,ou=AllProfiles
              attributes:
                - name: cn
                  values:
                    - aaaaaaa
                - name: sn
                  values:
                    - aaa
                - name: givenname
                  values:
                    - aaa
                - name: userpassword
                  values:
                    - secret123
                - name: uid
                  values:
                    - aaaaa
                - name: objectclass
                  values:
                    - top
                    - person
                    - organizationalPerson
                    - inetOrgPerson
      responses:
        "201":
          description: Entry added successfully
        "400":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_BROWSER_EDIT
      tags:
        - Directory Browser
  /directory-browser-service/directory_browser/search/info:
    get:
      summary: Get Directory browser info.
      description: Gets the user's directory browser info
      operationId: getDirectoryBrowserSearchInfo
      responses:
        "200":
          description: Directory browser info successfully fetched
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DirectoryBrowserSearchInfo"
              examples:
                example-1:
                  $ref: "#/components/examples/DirectoryBrowserSearchInfoExample1"
                example-2:
                  $ref: "#/components/examples/DirectoryBrowserSearchInfoExample2"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_BROWSER_VIEW
            - SCOPE_DIRECTORY_BROWSER_EDIT
      tags:
        - Directory Browser
    post:
      summary: Save the users directory browser info. (Search Tabs & History)
      description: Stores the directory browser search tabs and history in LDAP
      operationId: saveDirectoryBrowserSearchInfo
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DirectoryBrowserSearchInfo"
            examples:
              example-1:
                $ref: "#/components/examples/DirectoryBrowserSearchInfoExample1"
              example-2:
                $ref: "#/components/examples/DirectoryBrowserSearchInfoExample2"
      responses:
        "200":
          description: Search filter saved successfully
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_BROWSER_EDIT
      tags:
        - Directory Browser
  /directory-browser-service/directory_browser/{dn}:
    get:
      summary: Get Entries
      description: Fetch entry, attributes, and child entries for the entry specified by DN
      operationId: getEntry
      parameters:
        - $ref: "#/components/parameters/dn"
        - $ref: "#/components/parameters/LdapSearchFilter"
        - $ref: "#/components/parameters/scope"
        - $ref: "#/components/parameters/attributes"
        - $ref: "#/components/parameters/DirectoryBrowserPageSize"
        - $ref: "#/components/parameters/hierarchical"
        - $ref: "#/components/parameters/DirectoryBrowserCursor"
        - $ref: "#/components/parameters/AuthorizationHeader"
      responses:
        "200":
          description: Entry fetched successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntryResponse"
              examples:
                root-example:
                  value:
                    nodes:
                      - dn: ou=AllProfiles
                        rdn: ou=AllProfiles
                        attributes:
                          - name: objectclass
                            values:
                              - top
                              - vdapcontainer
                              - vdlabel
                              - vdDirectoryView
                      - dn: cn=changelog
                        rdn: cn=changelog
                        attributes:
                          - name: objectclass
                            values:
                              - top
                              - container
                      - dn: o=companydirectory
                        rdn: o=companydirectory
                        attributes:
                          - name: objectclass
                            values:
                              - top
                              - organization
                    cursor: A5B6C7
                    next: https://myurl.com/directory_browser?filter=(objectclass=*)&scope=ONE&cursor=A5B6C7
                children-example:
                  value:
                    nodes:
                      - dn: ou=Accounting,o=companydirectory
                        rdn: ou=Accounting
                        attributes:
                          - name: objectclass
                            values:
                              - top
                              - organizationalunit
                      - dn: ou=Administration,o=companydirectory
                        rdn: ou=Administration
                        attributes:
                          - name: objectclass
                            values:
                              - top
                              - organizationalunit
                    cursor: null
                    next: null
                hierarchical-example:
                  value:
                    nodes:
                      - dn: ou=Accounting,o=companydirectory
                        rdn: ou=Accounting
                        attributes:
                          - name: objectclass
                            values:
                              - top
                              - organizationalunit
                        children:
                          - dn: uid=Aaron_Medler,ou=Accounting,o=companydirectory
                            rdn: uid=Aaron_Medler
                            attributes:
                              - name: objectclass
                                values:
                                  - top
                                  - person
                                  - organizationalPerson
                                  - inetorgperson
                      - dn: ou=Administration,o=companydirectory
                        rdn: ou=Administration
                        attributes:
                          - name: objectclass
                            values:
                              - top
                              - organizationalunit
                    cursor: null
                    next: null
                json-example:
                  value:
                    nodes:
                      - dn: cn=Alan_Rickman,ou=Accounting,o=companydirectory
                        rdn: cn=Alan_Rickman
                        attributes:
                          - name: objectclass
                            values:
                              - top
                              - person
                              - user
                          - name: testobject
                            values:
                              - '{"someattribute":"somevalue","someOtherAttribute":{"someSubAttribute":"someValue","someOtherSubAttribute":"someOtherValue"},"someListAttribute":["someValue","someOtherValue"]}'
                    cursor: null
                    next: null
                attrs-example:
                  value:
                    nodes:
                      - dn: cn=Aggie Newcombe,ou=ad_sample,ou=AllProfiles
                        rdn: cn=Aggie Newcombe
                        attributes:
                          - name: birthdate
                            values:
                              - 12/10/1970
                          - name: cn
                            values:
                              - Aggie Newcombe
                          - name: country
                            values:
                              - USA
                          - name: createTimestamp
                            values:
                              - 20230124230255.128Z
                          - name: creatorsName
                            values:
                              - cn=directory manager
                          - name: employeeID
                            values:
                              - "12"
                          - name: employeetype
                            values:
                              - Employee
                          - name: entrydn
                            values:
                              - cn=Aggie Newcombe,ou=ad_sample,ou=AllProfiles
                          - name: givenname
                            values:
                              - Aggie
                          - name: homephone
                            values:
                              - +1 818 267-3636
                          - name: l
                            values:
                              - San Mateo
                          - name: mail
                            values:
                              - Aggie_Newcombe@mycompany.com
                          - name: mobile
                            values:
                              - +1 213 410-7149
                          - name: modifiersName
                            values:
                              - cn=directory manager
                          - name: modifyTimestamp
                            values:
                              - 20230124230255.128Z
                          - name: objectclass
                            values:
                              - top
                              - extensibleObject
                              - person
                              - organizationalPerson
                              - user
                          - name: ou
                            values:
                              - Inside Sales
                          - name: postaladdress
                            values:
                              - 815 duboce Ave
                          - name: region
                            values:
                              - PA
                          - name: sAMAccountName
                            values:
                              - Aggie_Newcombe
                          - name: sn
                            values:
                              - Newcombe
                          - name: telephonenumber
                            values:
                              - +1 408 520-2203
                          - name: title
                            values:
                              - Guru Inside Sales Manager
                          - name: titleofcourtesy
                            values:
                              - Mrs
                          - name: userpassword
                            values:
                              - BINARY(62 bytes)
        "404":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_BROWSER_VIEW
            - SCOPE_DIRECTORY_BROWSER_EDIT
      tags:
        - Directory Browser
    delete:
      summary: Delete Entry
      description: Delete the specified entry by dn
      operationId: deleteNode
      parameters:
        - $ref: "#/components/parameters/dn"
        - $ref: "#/components/parameters/deleteSubNodes"
        - $ref: "#/components/parameters/AuthorizationHeader"
      responses:
        "200":
          description: Node deleted successfully
        "400":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_BROWSER_EDIT
      tags:
        - Directory Browser
  /directory-browser-service/directory_browser/{dn}/ldap_modify:
    post:
      summary: LDAP Modify
      description: Execute a list of LDAP modifications on the specified entry
      operationId: ldapModify
      parameters:
        - $ref: "#/components/parameters/dn"
        - $ref: "#/components/parameters/AuthorizationHeader"
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/LDAPModification"
              nullable: false
              minItems: 1
              maxItems: 5000
            examples:
              example-1:
                value:
                  - modifyType: ADD
                    attributes:
                      - name: cn
                        values:
                          - Greg
                      - name: sn
                        values:
                          - Smith
      responses:
        "200":
          description: Modifications applied successfully
        "404":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_BROWSER_EDIT
      tags:
        - Directory Browser
  /directory-browser-service/directory_browser/{dn}/mod_rdn:
    parameters:
      - $ref: "#/components/parameters/dn"
    post:
      summary: Mod RDN
      description: Modify entry RDN
      operationId: modRdn
      parameters:
        - $ref: "#/components/parameters/AuthorizationHeader"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ModRdnRequestBody"
            examples:
              example1:
                value:
                  newRdn: uid=Aaron_Medler4
      responses:
        "200":
          description: RDN updated successfully
        "404":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_BROWSER_EDIT
      tags:
        - Directory Browser
  /directory-browser-service/directory_browser/{dn}/move_entry:
    parameters:
      - $ref: "#/components/parameters/dn"
    post:
      summary: Move Entry
      description: Move entry to a new specified DN
      operationId: moveEntry
      parameters:
        - $ref: "#/components/parameters/AuthorizationHeader"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MoveEntryRequestBody"
            examples:
              example1:
                value:
                  newParentDn: ou=Administration,o=companydirectory
      responses:
        "200":
          description: Entry moved successfully
        "404":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_BROWSER_EDIT
      tags:
        - Directory Browser
  /directory-browser-service/directory_browser/{dn}/reset_password:
    parameters:
      - $ref: "#/components/parameters/dn"
      - $ref: "#/components/parameters/AuthorizationHeader"
    post:
      summary: Reset Password
      description: Change password for specified DN
      operationId: resetPassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RequiredPassword"
      responses:
        "200":
          description: Password change successfully
        "404":
          description: Node specified by DN does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_BROWSER_EDIT
      tags:
        - Directory Browser
  /directory-browser-service/directory_browser/{dn}/members/dynamic:
    parameters:
      - $ref: "#/components/parameters/dn"
      - $ref: "#/components/parameters/AuthorizationHeader"
    get:
      summary: Get Dynamic Group Members
      description: Get dyanmic group members for the specified DN
      operationId: getDynamicGroupMembers
      responses:
        "200":
          description: Dynamic group members fetched successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
                - ldap://ou=label2,employees?sub?(uid=*)
        "404":
          description: Node specified by DN does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_BROWSER_VIEW
            - SCOPE_DIRECTORY_BROWSER_EDIT
      tags:
        - Directory Browser
    post:
      summary: Save Dynamic Group Members
      description: Save dyanmic group members for the specified DN
      operationId: saveDynamicGroupMembers
      parameters:
        - $ref: "#/components/parameters/AuthorizationHeader"
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
                maxLength: 5000
                minLength: 1
                nullable: false
              maxItems: 1000
            example:
              - ldap://ou=label2,employees?sub?(uid=*)
              - ldap://ou=label3,employees?sub?(uid=*)
      responses:
        "200":
          description: Dynamic group members saved successfully
        "404":
          description: Node specified by DN does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_BROWSER_EDIT
      tags:
        - Directory Browser
  /directory-browser-service/directory_browser/{dn}/members/explicit:
    parameters:
      - $ref: "#/components/parameters/dn"
      - $ref: "#/components/parameters/AuthorizationHeader"
    get:
      summary: Get Explicit Group Members
      description: Get explicit group members for the specified DN
      operationId: getExplicitGroupMembers
      responses:
        "200":
          description: Explicit group members fetched successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
                - uid=jmcgee,ou=Users,o=localstore
        "404":
          description: Node specified by DN does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_BROWSER_VIEW
            - SCOPE_DIRECTORY_BROWSER_EDIT
      tags:
        - Directory Browser
    post:
      summary: Save Explicit Group Members
      description: Save explicit group members for the specified DN
      operationId: saveExplicitGroupMembers
      parameters:
        - $ref: "#/components/parameters/AuthorizationHeader"
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
                maxLength: 5000
                minLength: 1
                nullable: false
              maxItems: 1000
            example:
              - uid=jmcgee,ou=Users,o=localstore
              - uid=lgrady,ou=Users,o=localstore
      responses:
        "200":
          description: Explicit group members saved successfully
        "404":
          description: Node specified by DN does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_BROWSER_EDIT
      tags:
        - Directory Browser
  /directory-browser-service/directory_browser/members/explicit/search:
    post:
      summary: Search Explicit Group Members
      description: Search explicit group members
      operationId: searchExplicitGroupMembers
      parameters:
        - $ref: "#/components/parameters/AuthorizationHeader"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GroupMembersSearchOptions"
            example:
              type: USERS
              dn: o=localstore
              keywords: lgrady
      responses:
        "200":
          description: Explicit group members fetched successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
                - uid=jmcgee,ou=Users,o=localstore
                - uid=lgrady,ou=Users,o=localstore
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_BROWSER_VIEW
            - SCOPE_DIRECTORY_BROWSER_EDIT
      tags:
        - Directory Browser
  /directory-browser-service/directory_browser/test_authentication:
    post:
      summary: Test Authentication
      description: Test authentication with the selected DN
      operationId: testAuthentication
      parameters:
        - $ref: "#/components/parameters/AuthorizationHeader"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TestAuthenticationRequestBody"
            example:
              dn: uid=Aaron_Medler,ou=Accounting,o=companydirectory
              password: password
      responses:
        "200":
          description: Authenticated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TestAuthenticationResponse"
              examples:
                successful-example:
                  value:
                    success: true
                unsuccessful-example:
                  value:
                    success: false
                    message: "LDAP: error code 49 - Invalid Credentials"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_BROWSER_VIEW
            - SCOPE_DIRECTORY_BROWSER_EDIT
      tags:
        - Directory Browser
  /directory-browser-service/directory_browser/ldif/export:
    post:
      summary: Export LDIF
      description: Export specified entries to an LDIF file on the server
      operationId: exportLdif
      parameters:
        - $ref: "#/components/parameters/AuthorizationHeader"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExportLdifOptions"
            examples:
              example-1:
                value:
                  sourceDn: ou=ad_sample,ou=AllProfiles
                  scope: SUB
                  fileName: ad_sample.ldif
              example-2:
                value:
                  sourceDn: ou=Accounting,o=companydirectory
                  targetDn: ou=Test,o=companydirectory
                  scope: ONE
                  maxEntries: 300
                  fileName: test.ldifz
                  isExportForReplication: true
      responses:
        "200":
          description: LDIF Export task launched successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LaunchedTask"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_BROWSER_VIEW
            - SCOPE_DIRECTORY_BROWSER_EDIT
      tags:
        - Directory Browser
  /directory-browser-service/directory_browser/ldif/download:
    post:
      summary: Download LDIF
      description: Export specified entries to an LDIF file and download it locally
      operationId: downloadLdif
      parameters:
        - $ref: "#/components/parameters/AuthorizationHeader"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExportLdifOptions"
            examples:
              example-1:
                value:
                  sourceDn: ou=ad_sample,ou=AllProfiles
                  scope: SUB
                  fileName: ad_sample.ldif
              example-2:
                value:
                  sourceDn: ou=Accounting,o=companydirectory
                  targetDn: ou=Test,o=companydirectory
                  scope: ONE
                  maxEntries: 300
                  fileName: test.ldifz
                  isExportForReplication: true
      responses:
        "200":
          description: LDIF downloaded successfully
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_BROWSER_VIEW
            - SCOPE_DIRECTORY_BROWSER_EDIT
      tags:
        - Directory Browser
  /directory-browser-service/directory_browser/ldif/import_ldif/server:
    post:
      summary: Import LDIF Server
      description: Import an LDIF file.
      operationId: importLdifServer
      parameters:
        - $ref: "#/components/parameters/AuthorizationHeader"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                filename:
                  type: string
                  nullable: false
                  maxLength: 1000
                  minLength: 1
                overwrite:
                  type: boolean
                  nullable: true
                  default: false
      responses:
        "200":
          description: LDIF Server import task launched successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LaunchedTask"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_BROWSER_EDIT
      tags:
        - Directory Browser
  /directory-browser-service/directory_browser/ldif/import_ldif/local:
    post:
      summary: Import LDIF Local
      description: Import an LDIF file.
      operationId: importLdifLocal
      parameters:
        - $ref: "#/components/parameters/AuthorizationHeader"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  nullable: false
                overwrite:
                  type: boolean
                  nullable: true
                  default: false
      responses:
        "200":
          description: LDIF local import task launched successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LaunchedTask"
              example:
                taskId: InitializeLDIF_import
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_BROWSER_EDIT
      tags:
        - Directory Browser
  /directory-browser-service/directory_browser/ldif/files:
    get:
      summary: Get List LDIF files
      description: Get the list of ldif files
      operationId: getLDIFFiles
      parameters:
        - $ref: "#/components/parameters/AuthorizationHeader"
      responses:
        "200":
          description: List of ldif file names
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "404":
          description: No LDIF files found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_BROWSER_VIEW
            - SCOPE_DIRECTORY_BROWSER_EDIT
      tags:
        - Directory Browser
  /directory-browser-service/directory_browser/ldif/files/{fileName}:
    parameters:
      - $ref: "#/components/parameters/fileName"
      - $ref: "#/components/parameters/AuthorizationHeader"
    delete:
      summary: Delete LDIF file
      description: Delete the specified LDIF file by name
      operationId: deleteLDIFFile
      parameters:
        - $ref: "#/components/parameters/AuthorizationHeader"
      responses:
        "200":
          description: File deleted successfully
        "400":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_BROWSER_EDIT
      tags:
        - Directory Browser
  /directory-browser-service/directory_browser/paged_searches/close:
    parameters:
      - $ref: "#/components/parameters/pagedSearchCookie"
      - $ref: "#/components/parameters/AuthorizationHeader"
    post:
      summary: Close the paged search session identified by the cookie.
      operationId: closePagedSearchSession
      responses:
        "200":
          description: Successfully closed the session
        "404":
          description: Session not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_BROWSER_EDIT
      tags:
        - Directory Browser
  /directory-namespace-service/naming_contexts:
    get:
      summary: Get Root Naming Contexts
      description: Returns a list of root naming contexts
      operationId: getRootNamingContexts
      parameters:
        - $ref: "#/components/parameters/DirectoryNamespaceActiveOnly"
        - $ref: "#/components/parameters/datasources"
        - $ref: "#/components/parameters/DirectoryNamespaceSearchFilter"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/typeFilter"
      responses:
        "200":
          description: Root naming contexts list retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NamingContextNodeList"
              examples:
                root-contexts:
                  value:
                    nodes:
                      - label: o=companydirectory
                        nodeType: STORE
                        dn: o=companydirectory
                        isRoot: true
                        isActive: true
                        datasources: []
                        description: A sample store
                        primaryDataSource: ""
                        hasChildren: false
                      - label: o=companyprofiles
                        nodeType: LDAP_PROXY
                        dn: o=companyprofiles
                        isRoot: true
                        isActive: true
                        datasources:
                          - VDS
                          - examples
                        description: A sample LDAP proxy
                        primaryDataSource: VDS
                        hasChildren: false
                      - label: o=examples
                        nodeType: VIRTUAL_TREE
                        dn: o=examples
                        isRoot: true
                        isActive: true
                        datasources:
                          - VDS
                        description: A sample virtual tree
                        primaryDataSource: VDS
                        hasChildren: true
                    pagination:
                      limit: 100
                      offset: 0
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_VIEW
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
    post:
      summary: Add Root Naming Context
      description: Add a new root naming context
      operationId: addNewRootNamingContext
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewRootNamingContextDn"
            example:
              dn: o=mynewroot
      responses:
        "201":
          description: Root naming context added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NewNamingContextResponse"
              examples:
                example-1:
                  value:
                    dn: o=Untitled View
          links:
            GetNamingContextNodeByDn:
              operationId: getNamingContextNode
              parameters:
                dn: $response.body#/dn
              description: >
                The `dn` value returned in the response can be used as the `dn`
                parameter in `GET /naming_contexts/{dn}`.
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
  /directory-namespace-service/naming_contexts/{dn}:
    parameters:
      - $ref: "#/components/parameters/relaxed_dn"
    get:
      summary: Get Naming Context
      description: Returns a node specified by DN
      operationId: getNamingContextNode
      responses:
        "200":
          description: Naming context retrieved.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NamingContextNode"
              examples:
                root-label-node:
                  value:
                    label: o=rootLabelExample
                    nodeType: LABEL
                    dn: o=rootLabelExample
                    description: Example of a root label
                    isRoot: true
                    isActive: true
                    datasources: []
                    primaryDataSource: ""
                    hasChildren: false
                level-one-child-label-node:
                  value:
                    label: ou=Sales
                    nodeType: LABEL
                    dn: ou=Sales,o=rootLabelExample
                    description: Example of a non-root label
                    isRoot: false
                    isActive: true
                    datasources: []
                    primaryDataSource: ""
                    hasChildren: true
                level-two-child-label-node:
                  value:
                    label: ou=Regional
                    nodeType: LABEL
                    dn: ou=Regional,ou=Sales,o=rootLabelExample
                    description: Example of a non-root label
                    isRoot: false
                    isActive: true
                    datasources: []
                    primaryDataSource: ""
                    hasChildren: true
                naming-context-node:
                  value:
                    label: ou=hr
                    nodeType: DB_PROXY
                    dn: ou=hr,o=examples
                    isRoot: false
                    isActive: true
                    datasources:
                      - examples
                    description: ""
                    primaryDataSource: examples
                    hasChildren: true
        "404":
          description: Node specified by DN does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_VIEW
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
    delete:
      summary: Delete Node
      description: Delete the specified node
      operationId: deleteNamingContextNode
      responses:
        "204":
          description: Node has been deleted successfully.
        "404":
          description: Node specified by DN does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
  /directory-namespace-service/naming_contexts/{dn}/children:
    parameters:
      - $ref: "#/components/parameters/relaxed_dn"
      - $ref: "#/components/parameters/Limit"
      - $ref: "#/components/parameters/Offset"
    get:
      summary: Get Node Children
      description: Returns a list of child nodes under the node specified by the dn
      operationId: getNodeChildren
      responses:
        "200":
          description: Child naming contexts retrieved.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NamingContextNodeList"
              examples:
                child-contexts:
                  value:
                    nodes:
                      - label: ou=hr
                        nodeType: DB_PROXY
                        dn: ou=hr,o=examples
                        isRoot: false
                        isActive: true
                        datasources:
                          - examples
                        description: ""
                        primaryDataSource: examples
                        hasChildren: false
                    pagination:
                      limit: 100
                      offset: 0
        "404":
          description: Node specified by DN does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_VIEW
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
  /directory-namespace-service/naming_contexts/{dn}/toggle_active:
    parameters:
      - $ref: "#/components/parameters/relaxed_dn"
    put:
      summary: Toggle Naming Context Active
      description: Toggle if naming context is active
      operationId: toggleActive
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IsActive"
            examples:
              toggle-active-example:
                value:
                  isActive: true
      responses:
        "200":
          description: Node active property set successfully.
        "404":
          description: Node specified by DN does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
  /directory-namespace-service/naming_contexts/{dn}/mount_backend:
    parameters:
      - $ref: "#/components/parameters/relaxed_dn"
    post:
      summary: Mount Backend
      description: Mount backend under selected node
      operationId: mountBackend
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MountBackendOptions"
            examples:
              LDAP_PROXY:
                value:
                  backendType: LDAP_PROXY
                  datasource: opendj
                  remoteBaseDn: ou=test,o=myopendj
              DB_PROXY:
                value:
                  backendType: DB_PROXY
                  datasource: derby
                  schema: derby.orx
                  isTables: true
                  isViews: true
                  isSystemTables: false
                  isSynonyms: false
                  isQuoteTableNames: false
                  isQuoteColumnNames: false
                  tableViews:
                    - CUSTOMERS
                    - EMPLOYEES
              VIRTUAL_TREE:
                value:
                  backendType: VIRTUAL_TREE
                  existingViewName: myview
              STORE:
                value:
                  backendType: STORE
                  isActive: true
              DSML_SPML_SERVICE:
                value:
                  backendType: DSML_SPML_SERVICE
                  datasource: aws
                  remoteBaseDn: ou=test
                  targetId: user
      responses:
        "200":
          description: Backend mounted under specified node.
        "404":
          description: Node specified by DN does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
  /directory-namespace-service/naming_contexts/{dn}/add_label:
    parameters:
      - $ref: "#/components/parameters/relaxed_dn"
    post:
      summary: Add Child Label
      description: Add child label under specified node
      operationId: addChildLabel
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewLabelProps"
            example:
              rdn: ou=testlabel
      responses:
        "201":
          description: Child label added successfully.
        "404":
          description: Node specified by DN does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
  /directory-namespace-service/naming_contexts/{dn}/add_content:
    parameters:
      - $ref: "#/components/parameters/relaxed_dn"
    post:
      summary: Add Child Content
      description: Add child content under specified node
      operationId: addChildContent
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewContentProps"
            examples:
              New Content Example:
                value:
                  relationshipObjectDn: APP.ORDERS,APP.CUSTOMERS
              New Container Example:
                value:
                  relationshipObjectDn: APP.PACKAGES,APP.RECOMMENDATION,APP.CUSTOMERS
                  isQuoteTableNames: true
                  isRelatedObjectsOnly: true
      responses:
        "201":
          description: OK
        "404":
          description: Node specified by DN does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
  /directory-namespace-service/naming_contexts/{dn}/add_container:
    parameters:
      - $ref: "#/components/parameters/relaxed_dn"
    post:
      summary: Add Child Container
      description: Add child container under specified node
      operationId: addChildContainer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewContentProps"
            examples:
              New Content Example:
                value:
                  relationshipObjectDn: APP.ORDERS,APP.CUSTOMERS
                  isQuoteTableNames: true
                  isQuoteColumnNames: true
                  isRelatedObjectsOnly: true
              New Container Example:
                value:
                  relationshipObjectDn: APP.PACKAGES,APP.RECOMMENDATION,APP.CUSTOMERS
      responses:
        "201":
          description: OK
        "404":
          description: Node specified by DN does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
  /directory-namespace-service/naming_contexts/{dn}/add_link:
    parameters:
      - $ref: "#/components/parameters/relaxed_dn"
    post:
      summary: Add Child Link
      description: Add child link under specified node
      operationId: addLink
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewLinkProps"
            examples:
              example-1:
                value:
                  linkType: STANDARD_LINK
                  existingView: adap
      responses:
        "201":
          description: OK
        "404":
          description: Node specified by DN does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
  /directory-namespace-service/naming_contexts/{dn}/store/properties:
    parameters:
      - $ref: "#/components/parameters/relaxed_dn"
    get:
      summary: Get HDAP Store Properties
      description: Get store properties
      operationId: getStoreProperties
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StoreProperties"
              examples:
                example-1:
                  value:
                    isActive: true
                    storageLocation: $RLI_HOME/vds_server/test
                    isSchemaChecking: false
                    isEnsureSuperiorObjectClasses: false
                    isNormalizeAttributeNames: false
                    indexedAttributes:
                      - cacheCreatorsName
                    nonIndexedAttributes:
                      - cacheCreateTimestamp
                    sortedAttributes:
                      - cacheModifiersName
                    encryptedAttributes:
                      - cacheModifyTimestamp
                    isInterClusterRep: false
                    isEnsurePushModeEnabled: false
                    pushModeDataSources:
                      - advworks
                    replicationExcludedAttributes:
                      - cacheCreatorsName
                    isFullTextSearchEnabled: false
                    isOptimizeLinkAttributes: false
                    enableChangelog: false
                    asyncIndexing: false
        "404":
          description: Node specified by DN does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_VIEW
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
    put:
      summary: Update Store Properties
      description: Update store properties
      operationId: updateStoreProperties
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StoreProperties"
            examples:
              example-1:
                value:
                  isActive: true
                  storageLocation: $RLI_HOME/vds_server/test
                  isSchemaChecking: false
                  isEnsureSuperiorObjectClasses: false
                  isNormalizeAttributeNames: false
                  indexedAttributes:
                    - cacheCreatorsName
                  nonIndexedAttributes:
                    - cacheCreateTimestamp
                  sortedAttributes:
                    - cacheModifiersName
                  encryptedAttributes:
                    - cacheModifyTimestamp
                  isInterClusterRep: false
                  isEnsurePushModeEnabled: false
                  pushModeDataSources:
                    - advworks
                  replicationExcludedAttributes:
                    - cacheCreatorsName
                  isFullTextSearchEnabled: false
                  isOptimizeLinkAttributes: false
                  enableChangelog: false
                  asyncIndexing: false
      responses:
        "200":
          description: OK
        "404":
          description: Node specified by DN does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
  /directory-namespace-service/naming_contexts/{dn}/store/initialize/server:
    parameters:
      - $ref: "#/components/parameters/relaxed_dn"
    post:
      summary: Initialize Store from Server File
      description: Initialize a store from a file on the server
      operationId: initStoreFromServer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ServerFilePath"
            example:
              filePath: RLI_HOME/ldifs/sample.ldif
      responses:
        "200":
          description: Store initialize task launched successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DirectoryNamespaceLaunchedTask"
              example:
                taskId: IntializeHdapStore_o_companydirectory
        "404":
          description: Node specified by DN does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
  /directory-namespace-service/naming_contexts/{dn}/store/initialize/upload:
    parameters:
      - $ref: "#/components/parameters/relaxed_dn"
    post:
      summary: Initialize Store from Uploaded File
      description: Initialize a store from an uploaded file
      operationId: initStoreFromUpload
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              description: Upload LDIF file to initialize from
              properties:
                file:
                  type: string
                  format: binary
      responses:
        "200":
          description: Store initialize task launched successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DirectoryNamespaceLaunchedTask"
              example:
                taskId: IntializeHdapStore_o_companydirectory
        "404":
          description: Node specified by DN does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
  /directory-namespace-service/naming_contexts/{dn}/store/rebuild_index:
    parameters:
      - $ref: "#/components/parameters/relaxed_dn"
    post:
      summary: Rebuild Store Index
      description: Launches a rebuild index task for a store and returns the task ID
      operationId: rebuildStoreIndex
      responses:
        "200":
          description: Rebuild index task launched successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DirectoryNamespaceLaunchedTask"
              example:
                taskId: RebuildIndexHdapStore_o_companydirectory
        "404":
          description: Node specified by DN does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
  /directory-namespace-service/naming_contexts/{dn}/store/backup:
    parameters:
      - $ref: "#/components/parameters/relaxed_dn"
    post:
      summary: Backup Store
      description: Backup store
      operationId: backupStore
      responses:
        "200":
          description: OK
        "404":
          description: Node specified by DN does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
  /directory-namespace-service/naming_contexts/{dn}/store/backup/download:
    parameters:
      - $ref: "#/components/parameters/relaxed_dn"
    get:
      summary: Download Store Backup
      description: Download the backup for a store
      operationId: downloadStoreBackup
      responses:
        "200":
          description: Backup file downloaded successfully
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "404":
          description: Node specified by DN does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_VIEW
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
  /directory-namespace-service/naming_contexts/{dn}/store/list_backups:
    parameters:
      - $ref: "#/components/parameters/relaxed_dn"
    get:
      summary: List Backups
      description: List the available backup files for a store
      operationId: listBackups
      responses:
        "200":
          description: Backups listed successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/StoreBackup"
              example:
                - id: 2023-05-22_16-03-03
                  label: 05/22/2023 16:03:57
                - id: 2023-05-23_10-40-22
                  label: 05/23/2023 10:40:22
        "404":
          description: Node specified by DN does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_VIEW
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
  /directory-namespace-service/naming_contexts/{dn}/store/restore:
    parameters:
      - $ref: "#/components/parameters/relaxed_dn"
    post:
      summary: Restore a Store
      description: Restore a store from a backup file on the server
      operationId: restoreStore
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestoreOptions"
            example:
              backupId: 2023-05-22_16-03-03
      responses:
        "200":
          description: Restore performed successfully
        "404":
          description: Node specified by DN does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
  /directory-namespace-service/naming_contexts/{dn}/store/restore/upload:
    parameters:
      - $ref: "#/components/parameters/relaxed_dn"
    post:
      summary: Restore Store From Uploaded File
      description: Restore store from an uploaded file
      operationId: restoreStoreUpload
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              description: Upload backup archive file to initialize from
              properties:
                file:
                  type: string
                  format: binary
      responses:
        "200":
          description: Restore performed successfully
        "404":
          description: Node specified by DN does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
  /directory-namespace-service/naming_contexts/{dn}/ldap_proxy/backend:
    parameters:
      - $ref: "#/components/parameters/relaxed_dn"
    get:
      summary: Get LDAP Proxy Backend Properties
      description: Get LDAP proxy backend properties
      operationId: getLdapProxyBackendProperties
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LDAPProxyBackendProperties"
              examples:
                example-1:
                  value:
                    baseDn: o=companydirectory
                    datasource: openDj
                    isActive: true
                    isDedicatedConnection: false
                    isPassThroughAuthorization: false
                    isProxyAuthorization: false
                    schemaEnforcementMode: PASS_THROUGH
                    namespaceDn: o=test
        "404":
          description: Node specified by DN does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_VIEW
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
    put:
      summary: Update LDAP Proxy Backend Properties
      description: Update LDAP proxy backend properties
      operationId: updateLdapProxyBackendProperties
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LDAPProxyBackendProperties"
      responses:
        "200":
          description: OK
        "404":
          description: Node specified by DN does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
  /directory-namespace-service/naming_contexts/{dn}/ldap_proxy/backend/merged_backends:
    parameters:
      - $ref: "#/components/parameters/relaxed_dn"
    get:
      summary: Get LDAP Proxy Merged Backends
      description: Get merged backends for an LDAP proxy.
      operationId: getLdapProxyMergedBackends
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MergeBackendConfiguration"
              example:
                - dataSource: vds
                  remoteBaseDn: o=companydirectory
                  radiantoneNamespaceDn: ou=Accounting,o=companydirectory
                - dataSource: opendj
                  remoteBaseDn: ou=test,o=people
                  radiantoneNamespaceDn: o=myopendj
        "404":
          description: Node specified by DN does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_VIEW
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
    post:
      summary: Create LDAP Proxy Merged Backend
      description: Create a merged backend for an LDAP proxy.
      operationId: createLdapProxyMergedBackend
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MergeBackendConfiguration"
            example:
              dataSource: vds
              remoteBaseDn: o=companydirectory
              radiantoneNamespaceDn: ou=Accounting,o=companydirectory
      responses:
        "201":
          description: Created
        "404":
          description: Node specified by DN does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
  /directory-namespace-service/naming_contexts/{dn}/ldap_proxy/backend/merged_backends/delete:
    parameters:
      - $ref: "#/components/parameters/relaxed_dn"
    post:
      summary: Delete LDAP Proxy Merged Backend
      description: Delete a merged backend for an LDAP proxy.
      operationId: deleteLdapProxyMergedBackend
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MergeBackendConfiguration"
            example:
              dataSource: vds
              remoteBaseDn: o=companydirectory
              radiantoneNamespaceDn: ou=Accounting,o=companydirectory
      responses:
        "204":
          description: Merged backend deleted successfully
        "404":
          description: Node specified by DN or specified merged backend does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
  /directory-namespace-service/naming_contexts/{dn}/ldap_proxy/advanced:
    parameters:
      - $ref: "#/components/parameters/relaxed_dn"
    get:
      summary: Get LDAP Proxy Advanced Properties
      description: Get LDAP proxy advanced properties
      operationId: getLdapProxyAdvancedProperties
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LdapProxyAdvancedProperties"
              examples:
                example-1:
                  $ref: "#/components/examples/LdapProxyAdvancedProperties"
        "404":
          description: Node specified by DN does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_VIEW
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
    put:
      summary: Update LDAP Proxy Advanced Properties
      description: Update LDAP proxy advanced properties
      operationId: updateLdapProxyAdvancedProperties
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LdapProxyAdvancedProperties"
            examples:
              example-1:
                $ref: "#/components/examples/LdapProxyAdvancedProperties"
      responses:
        "200":
          description: OK
        "404":
          description: Node specified by DN does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
  /directory-namespace-service/naming_contexts/{dn}/db_proxy/properties:
    parameters:
      - $ref: "#/components/parameters/strict_dn"
    get:
      summary: Get Database Proxy Properties
      description: Get database proxy properties
      operationId: getDbProxyProperties
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DBProxyProperties"
              examples:
                example-1:
                  value:
                    mappedBaseDn: ou=hr,o=examples
                    directoryView: dv=ou_hr_o_examples
                    isActive: true
                    dataSource: myDerby
        "404":
          description: Node specified by DN does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_VIEW
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
    put:
      summary: Update Database Proxy Properties
      description: Update database proxy properties
      operationId: updateDbProxyProperties
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DBProxyProperties"
            examples:
              example-1:
                value:
                  isActive: true
                  dataSource: myDerby
      responses:
        "200":
          description: OK
        "404":
          description: Node specified by DN does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
  /directory-namespace-service/naming_contexts/{dn}/virtual_tree/properties:
    parameters:
      - $ref: "#/components/parameters/strict_dn"
    get:
      summary: Get Virtual Tree Properties
      description: Get virtual tree properties
      operationId: getVirtualTreeProperties
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VirtualTreeProperties"
              examples:
                example-ldap:
                  $ref: "#/components/examples/VirtualTreeProperties_LDAP"
                example-database:
                  $ref: "#/components/examples/VirtualTreeProperties_DATABASE"
                example-custom:
                  $ref: "#/components/examples/VirtualTreeProperties_CUSTOM"
        "404":
          description: Node specified by DN does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_VIEW
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
    put:
      summary: Update Virtual Tree Properties
      description: Update virtual tree properties
      operationId: updateVirtualTreeProperties
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VirtualTreeProperties"
            examples:
              example-ldap:
                $ref: "#/components/examples/VirtualTreeProperties_LDAP"
              example-database:
                $ref: "#/components/examples/VirtualTreeProperties_DATABASE"
              example-custom:
                $ref: "#/components/examples/VirtualTreeProperties_CUSTOM"
      responses:
        "200":
          description: OK
        "404":
          description: Node specified by DN does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
  /directory-namespace-service/naming_contexts/{dn}/content/properties:
    parameters:
      - $ref: "#/components/parameters/relaxed_dn"
    get:
      summary: Get Content Properties
      description: Get properties tab contents for the specified content node.
      operationId: getContentProperties
      responses:
        "200":
          description: Content properties fetched successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContentProperties"
              example:
                rdnName: devices
                rdnValues:
                  - id
                primaryKey: id
                schema: SchemaFileName.orx
                type: CONTENT
        "404":
          description: Node specified by DN does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_VIEW
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
    put:
      summary: Save Content Properties
      description: Save properties tab for the specified content node.
      operationId: saveContentProperties
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ContentProperties"
            example:
              rdnName: devices
              rdnValues:
                - id
                - groupinfo-groupname
      responses:
        "200":
          description: Content properties saved successfully
        "404":
          description: Node specified by DN does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
  /directory-namespace-service/naming_contexts/{dn}/content/properties/rdn_attributes:
    parameters:
      - $ref: "#/components/parameters/relaxed_dn"
    get:
      summary: Get Content RDN Attributes
      description: Get the possible RDN attributes for a specified content node.
      operationId: getContentRdnAttributes
      responses:
        "200":
          description: Content node RDN attributes fetched successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/VirtualAttribute"
              example:
                - name: id
                  mappedName: id
                - name: description
                  mappedName: description
                - name: groupinfo-groupname
                  mappedName: groupName
                - name: groupinfo-grouptype
                  mappedName: groupType
        "404":
          description: Node specified by DN does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_VIEW
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
  /directory-namespace-service/naming_contexts/{dn}/content/advanced:
    parameters:
      - $ref: "#/components/parameters/relaxed_dn"
    get:
      summary: Get Content Node Advanced Properties
      description: Get content node advanced settings
      operationId: getContentAdvancedSettings
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContentAdvancedSettings"
              examples:
                example-ldap:
                  value:
                    interceptionScriptFileName: o_compdir.java
                    javaClass: com.rli.scripts.intercept.o_compdir
                    interceptOn:
                      - ADD
                      - BIND
                    processJoinComputedAttrsNecessary: false
                    objectClassMapping: "top # person # organizationalPerson # inetOrgPerson"
                    dataSourceType: ldap
                    ldapFilter: (&(objectClass=*)(o=test))
                    maxRequestedAttributes: 30
                    ldapFilterAttributes:
                      - actualdn
                      - audio
                      - businessCategory
                      - cn
                      - departmentNumber
                      - description
                      - destinationIndicator
                      - displayName
                      - employeeNumber
                      - employeeType
                      - facsimileTelephoneNumber
                      - givenName
                      - homePhone
                      - homePostalAddress
                      - initials
                      - l
                      - mail
                      - sn
                example-db:
                  value:
                    interceptionScriptFileName: employees_o_myderby.java
                    javaClass: com.rli.scripts.intercept.employees_o_myderby
                    interceptOn: []
                    processJoinComputedAttrsNecessary: true
                    objectClassMapping: vdAPPEMPLOYEES
                    dataSourceType: database
                    requestNecessaryAttrOnly: true
                    distinct: false
                    leftOuterJoin: true
                    searchCaseSensitivity: AS_IS
                    sqlWhereClause: APP.EMPLOYEES.CITY = 'Novato'
                example-custom:
                  value:
                    interceptionScriptFileName: devices_object_devices_o_custom.java
                    javaClass: com.rli.scripts.intercept.devices_object_devices_o_custom
                    interceptOn:
                      - DELETE
                    processJoinComputedAttrsNecessary: false
                    objectClassMapping: vddevices
                    dataSourceType: custom
        "404":
          description: Node specified by DN does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_VIEW
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
    put:
      summary: Update Content Node Advanced Properties
      description: Update content node advanced settings
      operationId: updateContentAdvancedSettings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ContentAdvancedSettings"
            examples:
              example-ldap:
                value:
                  interceptionScriptFileName: o_compdir.java
                  javaClass: com.rli.scripts.intercept.o_compdir
                  interceptOn:
                    - ADD
                    - BIND
                  processJoinComputedAttrsNecessary: false
                  objectClassMapping: "top # person # organizationalPerson # inetOrgPerson"
                  dataSourceType: ldap
                  ldapFilter: (&(objectClass=*)(o=test))
                  maxRequestedAttributes: 30
              example-db:
                value:
                  interceptionScriptFileName: employees_o_myderby.java
                  javaClass: com.rli.scripts.intercept.employees_o_myderby
                  interceptOn: []
                  processJoinComputedAttrsNecessary: true
                  objectClassMapping: vdAPPEMPLOYEES
                  dataSourceType: database
                  requestNecessaryAttrOnly: true
                  distinct: false
                  leftOuterJoin: true
                  searchCaseSensitivity: AS_IS
                  sqlWhereClause: APP.EMPLOYEES.CITY = 'Novato'
              example-custom:
                value:
                  interceptionScriptFileName: devices_object_devices_o_custom.java
                  javaClass: com.rli.scripts.intercept.devices_object_devices_o_custom
                  interceptOn:
                    - DELETE
                  processJoinComputedAttrsNecessary: false
                  objectClassMapping: vddevices
                  dataSourceType: custom
      responses:
        "200":
          description: OK
        "404":
          description: Node specified by DN does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
  /directory-namespace-service/naming_contexts/{dn}/content/advanced/stored_procedures:
    parameters:
      - $ref: "#/components/parameters/relaxed_dn"
      - $ref: "#/components/parameters/storedProcedureSchema"
      - $ref: "#/components/parameters/storedProcedureCatalog"
    get:
      summary: Get Content Node Stored Procedures
      description: Get content node stored procedures.
      operationId: getContentStoredProcedures
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/StoredProcedure"
              examples:
                example-1:
                  value:
                    - name: INSTALL_JAR
                      catalog: ""
                      schema: SQLJ
                    - name: REMOVE_JAR
                      catalog: ""
                      schema: SQLJ
                    - name: SYSCS_BACKUP_DATABASE
                      catalog: ""
                      schema: SYSCS_UTIL
        "404":
          description: Node specified by DN does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_VIEW
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
  /directory-namespace-service/naming_contexts/{dn}/content/advanced/stored_procedures/parameters:
    parameters:
      - $ref: "#/components/parameters/relaxed_dn"
      - $ref: "#/components/parameters/storedProcedureParamSchema"
      - $ref: "#/components/parameters/storedProcedureCatalog"
      - $ref: "#/components/parameters/storedProcedureParamName"
    get:
      summary: Get Stored Procedure Parameters and Attributes
      description: Get parameters and attributes for a stored procedure.
      operationId: getContentStoredProcedureParams
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StoredProcedureParametersResponse"
              examples:
                example-1:
                  value:
                    params:
                      - name: URL
                        option: IN
                        type: VARCHAR
                        value: ""
                      - name: JAR
                        option: IN
                        type: VARCHAR
                        value: ""
                      - name: DEPLOY
                        option: IN
                        type: INTEGER
                        value: ""
                    attributes:
                      - CUSTOMERID (value from attribute)
                      - COMPANYNAME (value from attribute)
                      - CONTACTFIRSTNAME (value from attribute)
        "404":
          description: Node specified by DN does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_VIEW
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
  /directory-namespace-service/naming_contexts/{dn}/content/advanced/stored_procedures/parameters/call:
    parameters:
      - $ref: "#/components/parameters/relaxed_dn"
    post:
      summary: Build Stored Procedure
      description: Build stored procedure call from stored procedure parameters.
      operationId: buildStoredProcedureCall
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StoreProcedureCallParams"
            examples:
              example-1:
                value:
                  schema: SQLJ
                  name: INSTALL_JAR
                  params:
                    - name: URL
                      option: IN
                      type: VARCHAR
                      value: localhost:1111/test
                    - name: JAR
                      option: IN
                      type: VARCHAR
                      value: mylib.jar
                    - name: DEPLOY
                      option: IN
                      type: INTEGER
                      value: "12"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StoredProcedureCall"
              examples:
                example-1:
                  value: "SQLJ.INSTALL_JAR(@@[CUSTOMERID : VARCHAR : IN], @@[CUSTOMERID : VARCHAR
                    : IN], @@[CUSTOMERID : INTEGER : IN])"
        "404":
          description: Node specified by DN does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_VIEW
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
  /directory-namespace-service/naming_contexts/{dn}/content/advanced/stored_procedures/parameters/from_call:
    parameters:
      - $ref: "#/components/parameters/relaxed_dn"
      - $ref: "#/components/parameters/storedProcedureCallString"
    get:
      summary: Get Stored Procedure Parameters from Call String
      description: Get parameters and attributes for a stored procedure call string.
      operationId: getContentStoredProcedureParamsFromCallString
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StoredProcedureParametersResponse"
              examples:
                example-1:
                  value:
                    params:
                      - name: URL
                        option: IN
                        type: VARCHAR
                        value: ""
                      - name: JAR
                        option: IN
                        type: VARCHAR
                        value: ""
                      - name: DEPLOY
                        option: IN
                        type: INTEGER
                        value: ""
                    attributes:
                      - CUSTOMERID (value from attribute)
                      - COMPANYNAME (value from attribute)
                      - CONTACTFIRSTNAME (value from attribute)
        "404":
          description: Node specified by DN does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_VIEW
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
  /directory-namespace-service/naming_contexts/{dn}/content/advanced/configuration_parameters:
    parameters:
      - $ref: "#/components/parameters/relaxed_dn"
    get:
      summary: Get Configuration Parameters
      description: Get the configuration parameters for a content node.
      operationId: getConfigParameters
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericConfigurationParameters"
              examples:
                ldap:
                  value:
                    nodeType: LDAP
                    linkParameters: someLinkParameters
                    additionalClause: someAdditionalClause
                    parentDnBaseDn: o=companydirectory
                    parentDnSearchScope: SUB
                database:
                  value:
                    nodeType: DATABASE
                    linkParameters: null
                    additionalClause: someAdditionalClause
                    storedProceduresInsert: []
                    storedProceduresUpdate:
                      - "SQLJ.INSTALL_JAR(@@[EMPLOYEEID : VARCHAR : IN],
                        @@[EMPLOYEEID : VARCHAR : IN], @@[EMPLOYEEID : INTEGER :
                        IN])"
                      - "SQLJ.REMOVE_JAR(@@[EMPLOYEEID : VARCHAR : IN],
                        @@[EMPLOYEEID : INTEGER : IN])"
                    storedProceduresDelete:
                      - "SQLJ.INSTALL_JAR(@@[EMPLOYEEID : VARCHAR : IN],
                        @@[EMPLOYEEID : VARCHAR : IN], @@[EMPLOYEEID : INTEGER :
                        IN])"
                      - "SQLJ.REMOVE_JAR(@@[EMPLOYEEID : VARCHAR : IN],
                        @@[EMPLOYEEID : INTEGER : IN])"
                custom:
                  value:
                    nodeType: CUSTOM
                    linkParameters: someLinkParameters
                    additionalClause: someAdditionalClause
                    serviceParameters: someServiceParameters
        "404":
          description: Node specified by DN does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_VIEW
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
    put:
      summary: Update Configuration Parameters
      description: Update configuration parameters for a content node.
      operationId: updateConfigParameters
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GenericConfigurationParameters"
            examples:
              ldap:
                value:
                  nodeType: LDAP
                  linkParameters: someLinkParameters
                  additionalClause: someAdditionalClause
                  baseSearchParameters: "(user.cn=@@[cn : VARCHAR(255)])"
                  baseUpdateParameters: "(cn=@@[cn : VARCHAR(255)])"
                  parentDnBaseDn: o=companydirectory
                  parentDnSearchScope: SUB
              database:
                value:
                  nodeType: DATABASE
                  linkParameters: null
                  additionalClause: someAdditionalClause
                  baseSearchParameters: "(APP.EMPLOYEES.EMPLOYEEID=@@[EMPLOYEEID : INTEGER])"
                  baseUpdateParameters: "(EMPLOYEEID=@@[EMPLOYEEID : INTEGER])"
                  storedProceduresInsert: []
                  storedProceduresUpdate:
                    - "SQLJ.INSTALL_JAR(@@[EMPLOYEEID : VARCHAR : IN],
                      @@[EMPLOYEEID : VARCHAR : IN], @@[EMPLOYEEID : INTEGER :
                      IN])"
                    - "SQLJ.REMOVE_JAR(@@[EMPLOYEEID : VARCHAR : IN],
                      @@[EMPLOYEEID : INTEGER : IN])"
                  storedProceduresDelete:
                    - "SQLJ.INSTALL_JAR(@@[EMPLOYEEID : VARCHAR : IN],
                      @@[EMPLOYEEID : VARCHAR : IN], @@[EMPLOYEEID : INTEGER :
                      IN])"
                    - "SQLJ.REMOVE_JAR(@@[EMPLOYEEID : VARCHAR : IN],
                      @@[EMPLOYEEID : INTEGER : IN])"
              custom:
                value:
                  nodeType: CUSTOM
                  linkParameters: someLinkParameters
                  additionalClause: someAdditionalClause
                  baseSearchParameters: "(users.[profile-login]=@@[profile-login : VARCHAR(80)])"
                  baseUpdateParameters: "([profile-login]=@@[profile-login : VARCHAR(80)])"
                  serviceParameters: someServiceParameters
      responses:
        "200":
          description: OK
        "404":
          description: Node specified by DN does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
  /directory-namespace-service/naming_contexts/{dn}/content/interception_script/new:
    parameters:
      - $ref: "#/components/parameters/relaxed_dn"
    post:
      summary: Create New Interception Script
      description: Create a new interception script to be used by the
        content/container node.
      operationId: createNewInterceptionScript
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewScriptName"
            examples:
              example-1:
                value:
                  name: MyNewScript
      responses:
        "200":
          description: OK
        "404":
          description: Node specified by DN does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
  /directory-namespace-service/naming_contexts/{dn}/content/interception_script/use_existing:
    parameters:
      - $ref: "#/components/parameters/relaxed_dn"
    put:
      summary: Set Existing Interception Script
      description: Set interception script to be used by the content/container node.
      operationId: setExistingInterceptionScript
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExistingScriptPath"
            examples:
              example-1:
                value:
                  scriptPath: $RLI_HOME/scripts/myNewScript
      responses:
        "200":
          description: OK
        "404":
          description: Node specified by DN does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
  /directory-namespace-service/naming_contexts/{dn}/label/properties:
    parameters:
      - $ref: "#/components/parameters/relaxed_dn"
    get:
      summary: Get Label Properties
      description: Get label properties
      operationId: getLabelProperties
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LabelProperties"
              examples:
                example-1:
                  $ref: "#/components/examples/LabelProperties"
        "404":
          description: Node specified by DN does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_VIEW
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
    put:
      summary: Update Label Properties
      description: Update label properties
      operationId: updateLabelProperties
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LabelProperties"
            examples:
              example-1:
                $ref: "#/components/examples/LabelProperties"
      responses:
        "200":
          description: OK
        "404":
          description: Node specified by DN does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
  /directory-namespace-service/naming_contexts/{dn}/relationship_tree:
    parameters:
      - $ref: "#/components/parameters/relaxed_dn"
      - $ref: "#/components/parameters/isRelatedObjectsOnly"
    get:
      summary: Get Root Relationship Node
      description: Get the root relationship tree node and its children for a selected
        naming context node
      operationId: getRootRelationshipTreeNode
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RelationshipNode"
              examples:
                example-1:
                  value:
                    dn: ""
                    rdn: Root
                    type: VIEW
                    primaryObject: Root
                    secondaryObject: Root()
                    children:
                      - dn: APP.CUSTOMERLIST
                        rdn: APP.CUSTOMERLIST
                        type: VIEW
                        primaryObject: Root
                        secondaryObject: CUSTOMERLIST()
                        children: []
                      - dn: APP.CUSTOMERS
                        rdn: APP.CUSTOMERS
                        type: TABLE
                        primaryObject: Root
                        secondaryObject: CUSTOMERS()
                        children: []
                example-2:
                  value:
                    dn: ""
                    rdn: APP.CUSTOMERS
                    type: VIEW
                    primaryObject: CUSTOMERS
                    secondaryObject: CUSTOMERS()
                    children:
                      - dn: APP.ORDERS
                        rdn: APP.ORDERS
                        type: VIEW
                        primaryObject: CUSTOMERS
                        secondaryObject: ORDERS(CUSTOMERID)
                        children: []
                      - dn: APP.RECOMMENDATION
                        rdn: APP.RECOMMENDATION
                        type: VIEW
                        primaryObject: CUSTOMERS
                        secondaryObject: RECOMMENDATION(CUSTOMERID)
                        children: []
        "404":
          description: Node specified by DN does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_VIEW
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
  /directory-namespace-service/naming_contexts/{dn}/relationship_tree/{relationshipDn}:
    parameters:
      - $ref: "#/components/parameters/relaxed_dn"
      - $ref: "#/components/parameters/relationshipDn"
      - $ref: "#/components/parameters/isRelatedObjectsOnly"
    get:
      summary: Get Relationship Node
      description: Get relationship tree node specified by its DN and its children
        nodes for selected naming context node
      operationId: getRelationshipTreeNode
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RelationshipNode"
              examples:
                example-1:
                  value:
                    dn: APP.CUSTOMERS
                    rdn: APP.CUSTOMERS
                    type: TABLE
                    primaryObject: Root
                    secondaryObject: CUSTOMERS()
                    children:
                      - dn: APP.CUSTOMERS,APP.ORDERS
                        rdn: APP.ORDERS
                        type: VIEW
                        primaryObject: Root
                        secondaryObject: ORDERS(CUSTOMERID)
                        children: []
                      - dn: APP.CUSTOMERS,APP.RECOMMENDATION
                        rdn: APP.RECOMMENDATION
                        type: VIEW
                        primaryObject: Root
                        secondaryObject: RECOMMENDATION(CUSTOMERID)
                        children: []
                example-2:
                  value:
                    dn: APP.CUSTOMERS,APP.ORDERS
                    rdn: APP.ORDERS
                    type: VIEW
                    primaryObject: Root
                    secondaryObject: ORDERS(CUSTOMERID)
                    children:
                      - dn: APP.CUSTOMERS,APP.ORDERS,APP.EMPLOYEES
                        rdn: APP.EMPLOYEES
                        type: VIEW
                        primaryObject: Root
                        secondaryObject: EMPLOYEES(EMPLOYEEID)
                        children: []
                      - dn: APP.CUSTOMERS,APP.ORDERS,APP.ORDER_DETAILS
                        rdn: APP.ORDER_DETAILS
                        type: VIEW
                        primaryObject: Root
                        secondaryObject: ORDER_DETAILS(ORDERID)
                        children: []
                      - dn: APP.CUSTOMERS,APP.ORDERS,APP.PAYMENTS
                        rdn: APP.PAYMENTS
                        type: VIEW
                        primaryObject: Root
                        secondaryObject: PAYMENTS(ORDERID)
                        children: []
                      - dn: APP.CUSTOMERS,APP.ORDERS,APP.SHIPPING_METHODS
                        rdn: APP.SHIPPING_METHODS
                        type: VIEW
                        primaryObject: Root
                        secondaryObject: SHIPPING_METHODS(SHIPPINGMETHODID)
                        children: []
        "404":
          description: Node specified by DN does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_VIEW
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
  /directory-namespace-service/naming_contexts/{dn}/interception_script/code:
    parameters:
      - $ref: "#/components/parameters/relaxed_dn"
    get:
      summary: Get Interception Script Contents
      description: Get the interception script contents for a selected node.
      operationId: getInterceptionScriptContents
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InterceptionScriptContents"
              examples:
                example-1:
                  value:
                    scriptContents: |-
                      public class MyInterception {
                        public static void main(String[] args) {
                          System.out.println("Hello world");
                        }
                      }
        "404":
          description: Node specified by DN does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_VIEW
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
    put:
      summary: Update Interception Script Contents
      description: Update the interception script for a selected node.
      operationId: updateInterceptionScriptContents
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InterceptionScriptContents"
      responses:
        "200":
          description: OK
        "404":
          description: Node specified by DN does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
  /directory-namespace-service/naming_contexts/{dn}/link/properties:
    parameters:
      - $ref: "#/components/parameters/relaxed_dn"
    get:
      summary: Get Link Node Properties
      description: Get link node properties.
      operationId: getLinkProperties
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LinkProperties"
              examples:
                std-link-example:
                  $ref: "#/components/examples/LinkPropertiesStdLink"
                merge-link-example:
                  $ref: "#/components/examples/LinkPropertiesMergeLink"
        "400":
          description: Specified node is not a link node
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
        "404":
          description: Node specified by DN does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_VIEW
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
    put:
      summary: Update Link Node Properties
      description: Update a link node's properties.
      operationId: updateLinkProperties
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LinkProperties"
            examples:
              std-link-example:
                $ref: "#/components/examples/LinkPropertiesStdLink"
              merge-link-example:
                $ref: "#/components/examples/LinkPropertiesMergeLink"
      responses:
        "200":
          description: OK
        "400":
          description: Specified node is not a link node
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
        "404":
          description: Node specified by DN does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
  /directory-namespace-service/naming_contexts/{dn}/link/parameters/tree:
    parameters:
      - $ref: "#/components/parameters/relaxed_dn"
    get:
      summary: Get Link Parameters Tree Node
      description: Get a link parameters tree node specified by path
      operationId: getLinkParametersTreeNode
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LinkParametersTreeNode"
              example:
                label: dv=acsclient
                path: dv=acsclient
                linkParamNodeType: LABEL
                children:
                  - label: object=users
                    path: object=users,dv=acsclient
                    linkParamNodeType: LABEL
                    children: []
                  - label: object=groups
                    path: object=groups,dv=acsclient
                    linkParamNodeType: LABEL
                    children: []
                  - label: object=devices
                    path: object=devices,dv=acsclient
                    linkParamNodeType: LABEL
                    children: []
                  - label: object=tacacs
                    path: object=tacacs,dv=acsclient
                    linkParamNodeType: LABEL
                    children: []
        "400":
          description: Specified node is not a link node
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
        "404":
          description: Node specified by DN does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_VIEW
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
  /directory-namespace-service/naming_contexts/{dn}/link/parameters/tree/attributes:
    parameters:
      - $ref: "#/components/parameters/relaxed_dn"
    get:
      summary: Get Link Parameters Tree Node Attributes
      description: Get link parameters tree node attributes.
      operationId: getLinkParametersTreeNodeAttributes
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LinkParametersTreeNodeAttribute"
              examples:
                Link Parameters Tree Node Attributes Example:
                  value:
                    - name: inetOrgPerson.actualdn
                      attrType: VARCHAR(255)
                    - name: inetOrgPerson.audio
                      attrType: BINARY
                    - name: inetOrgPerson.businessCategory
                      attrType: VARCHAR(255)
                    - name: inetOrgPerson.homePhone
                      attrType: VARCHAR(30)
        "400":
          description: Specified node is not a link node
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
        "404":
          description: Node specified by DN or link parameters tree node does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_VIEW
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
  /directory-namespace-service/naming_contexts/{dn}/link/parameters/parameter_string:
    parameters:
      - $ref: "#/components/parameters/relaxed_dn"
      - $ref: "#/components/parameters/linkParameterAttrName"
      - $ref: "#/components/parameters/linkParameterAttrType"
    get:
      summary: Get Link Parameters String
      description: Get link parameters string.
      operationId: getLinkParametersString
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LinkParametersStringResponse"
              example:
                linkParametersString: inetOrgPerson.actualdn=@[:VARCHAR(255)]
        "400":
          description: Specified node is not a link node
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
        "404":
          description: Node specified by DN or link parameters tree node does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_VIEW
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
  /directory-namespace-service/naming_contexts/{dn}/ldap_filter_attributes:
    parameters:
      - $ref: "#/components/parameters/relaxed_dn"
    get:
      summary: Get LDAP Filter Attributes
      description: Get a list of the available attributes for a specified DN to be
        used in the LDAP filter.
      operationId: getLdapFilterAttributes
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
                - actualdn
                - audio
                - businessCategory
                - cn
                - departmentNumber
                - description
                - destinationIndicator
                - displayName
                - employeeNumber
                - employeeType
                - facsimileTelephoneNumber
                - givenName
                - homePhone
                - homePostalAddress
                - initials
                - l
                - mail
                - sn
        "404":
          description: Node specified by DN does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_VIEW
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
  /directory-namespace-service/naming_contexts/{dn}/object_builder/primary_objects:
    parameters:
      - $ref: "#/components/parameters/relaxed_dn"
    get:
      summary: List Primary Objects
      description: List the currently added primary objects for the specified node
      operationId: listPrimaryObjects
      responses:
        "200":
          description: Primary objects listed successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
                - inetorgperson
                - group
        "404":
          description: Node specified by DN does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_VIEW
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
    post:
      summary: Add Primary Objects
      description: Add primary objects for a specified node
      operationId: addPrimaryObjects
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              maxItems: 10000
              items:
                type: string
                nullable: false
                maxLength: 1000
            example:
              - inetorgperson
              - group
      responses:
        "200":
          description: Primary objects added successfully
        "404":
          description: Node specified by DN does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
        "409":
          description: Primary object already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
  /directory-namespace-service/naming_contexts/{dn}/object_builder/primary_objects/delete:
    parameters:
      - $ref: "#/components/parameters/relaxed_dn"
    post:
      summary: Delete Primary Objects
      description: Delete the specified primary objects for the specified node
      operationId: deletePrimaryObjects
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              maxItems: 10000
              items:
                type: string
                nullable: false
                maxLength: 1000
            example:
              - inetorgperson
              - group
      responses:
        "204":
          description: Primary objects deleted successfully
        "404":
          description: Node specified by DN does not exist or primary object doesn't exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
  /directory-namespace-service/naming_contexts/{dn}/object_builder/primary_objects/available:
    parameters:
      - $ref: "#/components/parameters/relaxed_dn"
    get:
      summary: List Available Primary Objects
      description: List the available primary objects for the specified node
      operationId: listAvailablePrimaryObjects
      responses:
        "200":
          description: Available primary objects listed successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
                - alias
                - application
                - inetorgperson
                - group
        "404":
          description: Node specified by DN does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_VIEW
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
  /directory-namespace-service/naming_contexts/{dn}/object_builder/primary_objects/{primaryObjectPathParam}/objects:
    parameters:
      - $ref: "#/components/parameters/relaxed_dn"
      - $ref: "#/components/parameters/primaryObjectPathParam"
    get:
      summary: Get All Objects
      description: Get all objects in the object builder for the naming context.
      operationId: getAllObjects
      responses:
        "200":
          description: Objects loaded successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ObjectMap"
              examples:
                example-1:
                  $ref: "#/components/examples/ObjectMap"
        "404":
          description: Node specified by DN does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_VIEW
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
    put:
      summary: Save All Objects
      description: Save all objects in the object builder for the naming context.
      operationId: saveAllObjects
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ObjectMap"
            examples:
              example-1:
                $ref: "#/components/examples/ObjectMap"
      responses:
        "200":
          description: Objects saved successfully
        "404":
          description: Node specified by DN does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
  /directory-namespace-service/naming_contexts/{dn}/object_builder/primary_objects/{primaryObjectPathParam}/objects/input_sources/add/data_source_schema:
    parameters:
      - $ref: "#/components/parameters/relaxed_dn"
      - $ref: "#/components/parameters/primaryObjectPathParam"
    post:
      summary: Add Object From Secondary Data Source Schema
      description: Add a source object from the schema of a secondary data source.
      operationId: addObjectFromDataSourceSchema
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddObjectDataSourceSchemaOptions"
            examples:
              example-1:
                $ref: "#/components/examples/AddObjectDataSourceSchemaOptions"
      responses:
        "201":
          description: Object added successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExternalDataSourceInputSource"
              examples:
                example-1:
                  $ref: "#/components/examples/ExternalDataSourceInputSource"
        "404":
          description: Node specified by DN does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
  /directory-namespace-service/naming_contexts/{dn}/object_builder/primary_objects/{primaryObjectPathParam}/objects/input_sources/add/namespace:
    parameters:
      - $ref: "#/components/parameters/relaxed_dn"
      - $ref: "#/components/parameters/primaryObjectPathParam"
    post:
      summary: Add Object From RadiantOne Namespace
      description: Add a source object from an existing view in the RadiantOne namespace.
      operationId: addObjectFromNamespace
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddObjectNamespaceOptions"
            examples:
              example-1:
                $ref: "#/components/examples/AddObjectNamespaceOptions"
      responses:
        "201":
          description: Object added successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NamespaceObjectInputSource"
              examples:
                example-1:
                  $ref: "#/components/examples/NamespaceObjectInputSource"
        "404":
          description: Node specified by DN does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
  /directory-namespace-service/naming_contexts/{dn}/object_builder/primary_objects/{primaryObjectPathParam}/objects/related_objects:
    parameters:
      - $ref: "#/components/parameters/relaxed_dn"
      - $ref: "#/components/parameters/primaryObjectPathParam"
    post:
      summary: Add Related Object
      description: This endpoint is deprecated and will be removed in a future
        release. Use the endpoints at
        /naming_contexts/{dn}/object_builder/primary_objects/{primaryObjectPathParam}/objects/related_objects_full
        instead. This endpoint adds a related object from the current schema.
      operationId: addRelatedObject
      deprecated: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddObjectCurrentSchemaOptions"
            examples:
              example-1:
                $ref: "#/components/examples/AddObjectCurrentSchemaOptions"
      responses:
        "201":
          description: Related object added successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RelatedObject"
              examples:
                example-1:
                  $ref: "#/components/examples/RelatedObject"
        "404":
          description: Node specified by DN does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
  /directory-namespace-service/naming_contexts/{dn}/object_builder/primary_objects/{primaryObjectPathParam}/objects/related_objects_full:
    parameters:
      - $ref: "#/components/parameters/relaxed_dn"
      - $ref: "#/components/parameters/primaryObjectPathParam"
    post:
      summary: Add Related Object Full
      description: Returns the list of the related object to add and any required
        intermediate objects.
      operationId: addRelatedObjectFull
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddObjectCurrentSchemaOptions"
            examples:
              example-1:
                $ref: "#/components/examples/AddObjectCurrentSchemaOptions"
      responses:
        "200":
          description: Related object added successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RelatedObject"
              examples:
                example-1:
                  $ref: "#/components/examples/RelatedObjectList"
        "404":
          description: Node specified by DN does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
  /directory-namespace-service/naming_contexts/{dn}/object_builder/primary_objects/{primaryObjectPathParam}/objects/join_profiles:
    parameters:
      - $ref: "#/components/parameters/relaxed_dn"
      - $ref: "#/components/parameters/primaryObjectPathParam"
    post:
      summary: Add Join Profile
      description: Add a new join profile.
      operationId: addJoinProfile
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewJoinProfileOptions"
            examples:
              example-1:
                $ref: "#/components/examples/NewJoinProfileOptions"
      responses:
        "201":
          description: Join profile added successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Join"
              examples:
                example-1:
                  $ref: "#/components/examples/Join"
        "404":
          description: Node specified by DN does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
  /directory-namespace-service/naming_contexts/{dn}/object_builder/primary_objects/{primaryObjectPathParam}/objects/join_profiles/validate_manual_join_string:
    parameters:
      - $ref: "#/components/parameters/relaxed_dn"
      - $ref: "#/components/parameters/primaryObjectPathParam"
    post:
      summary: Validate Manual Join String
      description: Check if a manual join string is valid.
      operationId: validateJoinString
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ManualJoinString"
            example:
              joinString: ldap://[vds]/o=companydirectory...
      responses:
        "200":
          description: Join string validated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidateManualJoinStringResponse"
              examples:
                example-1:
                  $ref: "#/components/examples/ValidateManualJoinStringResponse"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
  /directory-namespace-service/naming_contexts/{dn}/object_builder/primary_objects/{primaryObjectPathParam}/objects/extensions:
    parameters:
      - $ref: "#/components/parameters/relaxed_dn"
      - $ref: "#/components/parameters/primaryObjectPathParam"
    post:
      summary: Add Extensible Object
      description: Add new extensible object.
      operationId: addExtensibleObject
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExtensibleObjectOptions"
            examples:
              example-1:
                $ref: "#/components/examples/ExtensibleObjectOptions"
      responses:
        "201":
          description: Extensible object added successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExtensibleObject"
              examples:
                example-1:
                  $ref: "#/components/examples/ExtensibleObject"
        "404":
          description: Node specified by DN does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
  /directory-namespace-service/naming_contexts/{dn}/object_builder/primary_objects/{primaryObjectPathParam}/computed_attr_functions:
    parameters:
      - $ref: "#/components/parameters/relaxed_dn"
      - $ref: "#/components/parameters/primaryObjectPathParam"
    get:
      summary: Get List of Computed Attribute Functions
      description: Get the full list of computed attribute functions and their definitions
      operationId: getComputedAttrFunctions
      responses:
        "200":
          description: Computed attribute functions fetched successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ComputedAttributeFunction"
              examples:
                example-1:
                  $ref: "#/components/examples/ComputedAttributeFunctionArray"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_VIEW
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
    post:
      summary: Build Computed Attribute Function Expression String
      description: Given a function and its parameter values, return the resulting
        expression string
      operationId: buildComputedAttrFunction
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ComputedAttributeFunctionValue"
            examples:
              example-1:
                $ref: "#/components/examples/ComputedAttributeFunctionValue1"
              example-2:
                $ref: "#/components/examples/ComputedAttributeFunctionValue2"
      responses:
        "200":
          description: Computed attribute function built successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ComputedAttributeExpression"
              examples:
                example-1:
                  $ref: "#/components/examples/ComputedAttributeExpression"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_VIEW
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
  /directory-namespace-service/naming_contexts/{dn}/object_builder/primary_objects/{primaryObjectPathParam}/computed_attr_functions/validate_expression:
    parameters:
      - $ref: "#/components/parameters/relaxed_dn"
      - $ref: "#/components/parameters/primaryObjectPathParam"
    post:
      summary: Validate Computed Attribute Expression
      description: Check if a computed attribute expression is valid.
      operationId: validateComputedAttributeExpression
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ComputedAttributeExpressionAndAddedAttrs"
            example:
              expression: "'firstName' + ' ' + 'lastName'"
              attributes:
                - testAttr
                - testAttr2
      responses:
        "200":
          description: Computed attribute expression validated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IsValidResponse"
              examples:
                example-valid:
                  value:
                    isValid: true
                example-invalid:
                  value:
                    isValid: false
                    errorMsg: Unexpected + at column 26
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_VIEW
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
  /directory-namespace-service/caches:
    get:
      summary: List Caches
      description: Get list of caches.
      operationId: getCaches
      parameters:
        - name: dn
          in: query
          required: false
          description: Optional query filter for returning only those caches at or below
            the given DN.
          x-radiantlogic-validation:
            distinguishedName: relaxed
          schema:
            type: string
            example: cn=config
            description: a valid dn
            nullable: true
            maxLength: 5000
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CacheNode"
              examples:
                Caches Example:
                  value:
                    - label: o=advworks
                      isActive: true
                      isInitialized: true
                      cacheType: EVENT_DRIVEN
                    - label: o=companyprofiles
                      isActive: false
                      isInitialized: false
                      cacheType: NONE
        "404":
          description: Node specified by DN does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_VIEW
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
    post:
      summary: Create Cache
      description: Create a new cache for a specified DN
      operationId: createCache
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewCacheParams"
            example:
              dn: o=companyprofiles
      responses:
        "201":
          description: Created
        "404":
          description: DN does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
        "409":
          description: Cache already exists for DN
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
  /directory-namespace-service/naming_contexts/{dn}/special_attributes:
    parameters:
      - $ref: "#/components/parameters/strict_dn"
    get:
      summary: Get Special Attributes
      description: Get all special attribute settings associated with the specified
        naming context.
      operationId: getSpecialAttributes
      responses:
        "200":
          description: Special attributes fetched successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SpecialAttributes"
              examples:
                example-1:
                  $ref: "#/components/examples/SpecialAttributes"
        "404":
          description: Naming context specified by DN does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_VIEW
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
    put:
      summary: Update Special Attributes
      description: Update all special attribute settings associated with the specified
        naming context.
      operationId: updateSpecialAttributes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SpecialAttributes"
            examples:
              example-1:
                $ref: "#/components/examples/SpecialAttributes"
      responses:
        "200":
          description: Special attributes updated successfully
        "404":
          description: Naming context specified by DN does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
  /directory-namespace-service/naming_contexts/special_attributes_utils/dynamic_group_format:
    parameters:
      - $ref: "#/components/parameters/dynamicGroupDn"
    get:
      summary: Get Dynamic Group Format
      description: Get the dynamic group DN format for the specified DN.
      operationId: getDynamicGroupFormat
      responses:
        "200":
          description: Dynamic group format fetched successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DynamicGroupFormat"
              examples:
                ldap-url-example:
                  value:
                    dn: ldap://o=companydirectory??sub?(objectClass=groupOfURLs)
                normal-example:
                  value:
                    dn: uid=Aaron_Medler,ou=Accounting,o=companydirectory
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_VIEW
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
  /directory-namespace-service/naming_contexts/special_attributes_utils/linked_attributes_defaults:
    get:
      summary: Get Linked Attributes Defaults
      description: Get default values for linked attributes.
      operationId: getLinkedAttrsDefaults
      responses:
        "200":
          description: Linked attributes defaults fetched successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LinkedAttributeDefault"
              example:
                - backlinkAttr: isMemberOf
                  forwardLinkAttrs:
                    - member
                    - uniqueMember
                    - memberURL
                  sourceObjectClasses:
                    - group
                    - groupofuniquenames
                    - groupofnames
                    - groupofurls
                - backlinkAttr: directReports
                  forwardLinkAttrs:
                    - manager
                - backlinkAttr: altRecipientBL
                  forwardLinkAttrs:
                    - altRecipient
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_VIEW
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
  /directory-namespace-service/caches/{dn}:
    parameters:
      - $ref: "#/components/parameters/relaxed_dn"
    get:
      summary: Get Cache
      description: Get a single cache
      operationId: getCache
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CacheNode"
              examples:
                Cache Example:
                  value:
                    label: o=advworks
                    isActive: true
                    isInitialized: true
                    cacheType: EVENT_DRIVEN
        "404":
          description: Cache specified by DN does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_VIEW
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
    delete:
      summary: Delete Cache
      description: Delete cache node
      operationId: deleteCache
      responses:
        "200":
          description: OK
        "404":
          description: Node specified by DN does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
  /directory-namespace-service/caches/{dn}/properties:
    parameters:
      - $ref: "#/components/parameters/relaxed_dn"
    get:
      summary: Get Cache Properties
      description: Get cache node properties
      operationId: getCacheProperties
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CacheProperties"
              examples:
                example-1:
                  value:
                    startingSuffix: o=companyprofiles
                    internalSuffix: o=companyprofiles
                    isActive: true
                    isFullTextSearch: false
                    storageLocation: $RLI_HOME/vds_server/conf
                    isUseCacheForAuth: false
                    isLocalBindOnly: false
                    isDelegateOnFailure: false
                    isEnablePasswordPolicyEnforcement: false
                    isPasswordWriteBack: false
                    isOptimizeLinkedAttributes: false
                    caseSensitiveAttributesCompare: false
                    caseSensitiveAttributes:
                      - uid
                      - cn
                    nonIndexedAttributes:
                      - cacheCreatorsName
                      - cacheCreateTimestamp
                      - cacheModifiersName
                    sortedAttributes:
                      - cacheCreatorsName
                      - cacheCreateTimestamp
                      - cacheModifiersName
                    encryptedAttributes:
                      - cacheCreatorsName
                      - cacheCreateTimestamp
                      - cacheModifiersName
                    extensionAttributes:
                      - cacheCreatorsName
                      - cacheCreateTimestamp
                      - cacheModifiersName
                    invariantAttribute: cacheCreateTimestamp
                    isInterClusterReplication: false
                    isEnsurePushMode: false
                    pushModeDataSources:
                      - vds
                      - opendj
                    replicationExcludedAttributes:
                      - cacheCreatorsName
                      - cacheCreateTimestamp
                      - cacheModifiersName
                    isAcceptChangesFromReplicas: false
                    updatableAttributesFromReplicas:
                      - cacheCreatorsName
                      - cacheCreateTimestamp
                      - cacheModifiersName
                    isInitialized: false
        "404":
          description: Node specified by DN does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_VIEW
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
    put:
      summary: Update Cache Properties
      description: Update cache node properties
      operationId: updateCacheProperties
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CacheProperties"
            examples:
              example-1:
                value:
                  isActive: true
                  isFullTextSearch: false
                  storageLocation: $RLI_HOME/vds_server/conf
                  isUseCacheForAuth: false
                  isLocalBindOnly: false
                  isDelegateOnFailure: false
                  isEnablePasswordPolicyEnforcement: false
                  isPasswordWriteBack: false
                  isOptimizeLinkedAttributes: false
                  caseSensitiveAttributesCompare: false
                  caseSensitiveAttributes:
                    - uid
                    - cn
                  nonIndexedAttributes:
                    - cacheCreatorsName
                    - cacheCreateTimestamp
                    - cacheModifiersName
                  sortedAttributes:
                    - cacheCreatorsName
                    - cacheCreateTimestamp
                    - cacheModifiersName
                  encryptedAttributes:
                    - cacheCreatorsName
                    - cacheCreateTimestamp
                    - cacheModifiersName
                  extensionAttributes:
                    - cacheCreatorsName
                    - cacheCreateTimestamp
                    - cacheModifiersName
                  invariantAttribute: cacheCreatorsName
                  isInterClusterReplication: false
                  isEnsurePushMode: false
                  pushModeDataSources:
                    - vds
                    - opendj
                  replicationExcludedAttributes:
                    - cacheCreatorsName
                    - cacheCreateTimestamp
                    - cacheModifiersName
                  isAcceptChangesFromReplicas: false
                  updatableAttributesFromReplicas:
                    - cacheCreatorsName
                    - cacheCreateTimestamp
                    - cacheModifiersName
      responses:
        "200":
          description: OK
        "404":
          description: Node specified by DN does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
  /directory-namespace-service/caches/{dn}/convert_to_directory:
    parameters:
      - $ref: "#/components/parameters/relaxed_dn"
    put:
      summary: Convert Cache to RadiantOne Directory
      description: Convert the cached naming context to a RadiantOne Directory. This
        will disconnect it from its datasource  and connect it to a new
        RadiantOne Directory backend, which will be populated with all the data
        that was  previously cached.
      operationId: convert-cache-to-directory
      responses:
        "204":
          description: The conversion completed successfully
        "400":
          description: A pre-condition for the conversion was not met and must be
            addressed before retrying the operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
        "404":
          description: Node specified by DN does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
  /directory-namespace-service/caches/{dn}/refresh:
    parameters:
      - $ref: "#/components/parameters/relaxed_dn"
    get:
      summary: Get Cache Refresh
      description: Get the refresh type and settings for the specified cache
      operationId: getCacheRefresh
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CacheRefreshSettings"
              example:
                refreshType: PERIODIC
                PeriodicRefreshSettings:
                  refreshCronExpression: 1 * * 0
                  validationScriptPath: $RLI_HOME/scripts/myscript.sh
                  deleteValidationThreshold: 50
                  addValidationThreshold: 25
        "404":
          description: Node specified by DN does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_VIEW
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
    put:
      summary: Update Cache Refresh
      description: Update the refresh type and settings for the specified cache
      operationId: updateCacheRefresh
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CacheRefreshSettings"
            example:
              refreshType: PERIODIC
              PeriodicRefreshSettings:
                refreshCronExpression: 1 * * 0
                validationScriptPath: $RLI_HOME/scripts/myscript.sh
                deleteValidationThreshold: 50
                addValidationThreshold: 25
      responses:
        "200":
          description: OK
        "404":
          description: Node specified by DN does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
  /directory-namespace-service/caches/{dn}/initialize:
    parameters:
      - $ref: "#/components/parameters/relaxed_dn"
    post:
      summary: Initialize Cache
      description: Initializes cache
      operationId: initializeCache
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InitCacheOptions"
            examples:
              new-ldif-example:
                value:
                  useExistingLdif: false
                  useLdifz: false
              use-existing-example:
                value:
                  useExistingLdif: true
                  existingLdifFilePath: /vds_server/conf/ldif/import
      responses:
        "200":
          description: Cache initialized successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DirectoryNamespaceLaunchedTask"
              example:
                taskId: InitializeCache_o_companydirectory
        "404":
          description: Node specified by DN does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
  /directory-namespace-service/caches/{dn}/refresh/real_time_connectors:
    parameters:
      - $ref: "#/components/parameters/relaxed_dn"
    get:
      summary: List Real-Time Refresh Connectors
      description: List the connectors for a real-time cache refresh
      operationId: listRealTimeRefreshConnectors
      responses:
        "200":
          description: Connectors listed successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Connector"
              examples:
                example-1:
                  $ref: "#/components/examples/ConnectorList"
        "404":
          description: Node specified by DN does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_VIEW
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
  /directory-namespace-service/caches/{dn}/refresh/real_time_connectors/diagnostics:
    parameters:
      - $ref: "#/components/parameters/relaxed_dn"
    get:
      summary: Get Connector Diagnostics
      description: Get Real Time Connector Diagnostics
      operationId: getRealTimeConnectorDiagnostics
      responses:
        "200":
          description: Diagnostics Retrieved Successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConnectorDiagnostics"
              examples:
                example-1:
                  $ref: "#/components/examples/ConnectorDiagnostics"
        "404":
          description: Node specified by DN does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_VIEW
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
  /directory-namespace-service/caches/{dn}/refresh/real_time_connectors/{connectorId}/config:
    parameters:
      - $ref: "#/components/parameters/relaxed_dn"
      - $ref: "#/components/parameters/connectorId"
    get:
      summary: Get Real-Time Refresh Connector Config
      description: Get the currently saved connector type and properties for a connector.
      operationId: getRealTimeRefreshConnectorConfig
      responses:
        "200":
          description: Connector config fetched successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConnectorConfig"
              examples:
                example-1:
                  $ref: "#/components/examples/ConnectorConfig"
        "404":
          description: Node specified by DN or connector does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_VIEW
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
    put:
      summary: Update Real-Time Connector Config
      description: Update the connector type and properties for a connector.
      operationId: updateRealTimeRefreshConnectorConfig
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConnectorConfig"
            examples:
              example-1:
                $ref: "#/components/examples/ConnectorConfig"
      responses:
        "200":
          description: Connector config updated successfully
        "400":
          description: Required properties missing
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
        "404":
          description: Node specified by DN or connector does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
  /directory-namespace-service/caches/{dn}/refresh/real_time_connectors/{connectorId}/scripts/download:
    parameters:
      - $ref: "#/components/parameters/relaxed_dn"
      - $ref: "#/components/parameters/connectorId"
      - $ref: "#/components/parameters/action"
    get:
      summary: Download Real-Time Refresh Connector List of Scripts
      description: Download Real-Time Refresh Connector Scripts
      operationId: downloadRealTimeRefreshConnectorScripts
      responses:
        "200":
          description: Scripts downloaded successfully
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "404":
          description: Node specified by DN or connector does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_VIEW
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
  /directory-namespace-service/caches/{dn}/refresh/real_time_connectors/{connectorId}/scripts/execute:
    parameters:
      - $ref: "#/components/parameters/relaxed_dn"
      - $ref: "#/components/parameters/connectorId"
      - $ref: "#/components/parameters/action"
    post:
      summary: Execute Real-Time Refresh Connector Scripts
      description: Execute Real-Time Refresh Connector Scripts
      operationId: executeRealTimeRefreshConnectorScripts
      responses:
        "200":
          description: Scripts executed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExecuteResponse"
              examples:
                example-1:
                  $ref: "#/components/examples/ExecuteResponse"
        "404":
          description: Node specified by DN or connector does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
  /directory-namespace-service/caches/{dn}/refresh/real_time_connectors/{connectorId}/types:
    parameters:
      - $ref: "#/components/parameters/relaxed_dn"
      - $ref: "#/components/parameters/connectorId"
    get:
      summary: Get Real-Time Refresh Connector Types
      description: Get the available connector types and their properties for a connector.
      operationId: getRealTimeRefreshConnectorType
      responses:
        "200":
          description: Connector types fetched successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ConnectorType"
              examples:
                example-1:
                  $ref: "#/components/examples/ConnectorTypeList"
        "404":
          description: Node specified by DN or connector does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_VIEW
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
  /directory-namespace-service/interception_scripts/build_jar:
    post:
      summary: Build Interception Script Jar
      description: Rebuild the global interception script JAR.
      operationId: buildInterceptionJar
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InterceptionJarBuildResults"
              examples:
                example-1:
                  value:
                    exitCode: 0
                    messages: >-
                      Buildfile: /radiantone/vds/vds_server/custom/build.xml


                      compile:

                      [javac] /radiantone/vds/vds_server/custom/build.xml:24:
                      warning: 'includeantruntime' was not set, defaulting to
                      build.sysclasspath=last; set to false for repeatable
                      builds

                      [propertyfile] Updating property file:
                      /radiantone/vds/vds_server/custom/build.txt

                      buildinterceptjar:

                      BUILD SUCCESSFUL

                      Total time: 0 seconds
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
  /directory-namespace-service/interception_scripts/code/compile:
    post:
      summary: Compile Interception Script Code
      description: Attempt to compile interception script code and return the
        compilation results.
      operationId: compileInterceptionScriptCode
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InterceptionScriptContents"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScriptCompilationResults"
              examples:
                example-1:
                  $ref: "#/components/examples/ScriptCompilationResults"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_VIEW
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
  /directory-namespace-service/interception_scripts/global:
    get:
      summary: Get Global Interception Script Contents
      description: Get the global interception script contents for a selected node.
      operationId: getGlobalInterceptionScriptContents
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InterceptionScriptContents"
              examples:
                example-1:
                  value:
                    scriptContents: |-
                      public class MyInterception {
                        public static void main(String[] args) {
                          System.out.println("Hello world");
                        }
                      }
        "404":
          description: Script specified at global level does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_VIEW
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
    put:
      summary: Update Global Interception Script Contents
      description: Update the global interception script for a selected node.
      operationId: updateGlobalInterceptionScriptContents
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InterceptionScriptContents"
      responses:
        "200":
          description: OK
        "404":
          description: Script specified at global level does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
  /directory-namespace-service/views:
    get:
      summary: List Views
      description: List view files.
      operationId: listViews
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ViewFile"
              examples:
                example-1:
                  value:
                    - viewName: acsclient
                      lastModified: 2021-01-30T08:30:00Z
                    - viewName: adap
                      lastModified: 2021-02-12T08:30:00Z
                    - viewName: address book
                      lastModified: 2021-03-16T08:30:00Z
                    - viewName: dc_examples
                      lastModified: 2021-04-19T08:30:00Z
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_VIEW
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
  /directory-namespace-service/views/{name}:
    parameters:
      - $ref: "#/components/parameters/viewName"
    delete:
      summary: Delete a view
      description: Delete a view file
      operationId: deleteView
      responses:
        "204":
          description: view successfully deleted
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
  /directory-namespace-service/global_interception_settings:
    get:
      summary: Get global interception settings
      description: Get global interception settings
      operationId: getGlobalInterception
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalInterceptionSettings"
              examples:
                example-1:
                  $ref: "#/components/examples/GlobalInterceptionSettings"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_VIEW
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
    put:
      summary: Update global interception settings
      description: Update global interception settings
      operationId: updatedGlobalInterception
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GlobalInterceptionSettings"
            examples:
              example-1:
                $ref: "#/components/examples/GlobalInterceptionSettings"
      responses:
        "200":
          description: OK
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
  /directory-namespace-service/interception_scripts:
    get:
      summary: List Interception Scripts
      description: List the existing interception scripts on the server
      operationId: getInterceptionScripts
      responses:
        "200":
          description: Interception scripts listed successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_VIEW
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
    post:
      parameters:
        - $ref: "#/components/parameters/isOverwrite"
      summary: Upload an Interception Script
      description: Upload a new interception script
      operationId: uploadInterceptionScript
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              description: Upload LDIF file to initialize from
              properties:
                file:
                  type: string
                  format: binary
      responses:
        "200":
          description: Interception script uploaded successfully
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
  /directory-namespace-service/interception_scripts/{scriptName}:
    parameters:
      - $ref: "#/components/parameters/scriptName"
    delete:
      summary: Delete an Interception Script
      description: Delete an interception script specified by name
      operationId: deleteInterceptionScript
      responses:
        "204":
          description: Interception script delete successfully
        "404":
          description: Interception script with the specified name not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
  /directory-namespace-service/interception_scripts/libraries:
    get:
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_VIEW
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      summary: Get External libraries
      operationId: get-libs
      description: Get list of libraries
      responses:
        "200":
          description: Libraries retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
                - someLib.jar
                - otherlib.jar
                - athirdlib.jar
        "500":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      tags:
        - Directory Namespace API
    post:
      parameters:
        - $ref: "#/components/parameters/isOverwrite"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      summary: Upload External Library
      operationId: upload-lib
      description: Upload a library
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
              description: The local file uploaded by the user.
      responses:
        "201":
          description: Library Uploaded
        4XX:
          description: Client error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      tags:
        - Directory Namespace API
  /directory-namespace-service/interception_scripts/libraries/{name}:
    parameters:
      - $ref: "#/components/parameters/advancedSettingsLibraryName"
    delete:
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      summary: Delete External Library
      operationId: delete-lib
      description: Delete a library
      responses:
        "200":
          description: Library Deleted
        "500":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      tags:
        - Directory Namespace API
  /directory-namespace-service/naming_context_utils/validate_ldap_filter:
    parameters:
      - $ref: "#/components/parameters/ldapFilter"
    get:
      summary: Validate LDAP Filter
      description: Validates string if a valid LDAP filter and returns whether or not
        it is valid and an error message if invalid
      operationId: validateLdapFilter
      responses:
        "200":
          description: Join condition validated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IsValidResponse"
              example:
                isValid: true
                errorMsg: null
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_VIEW
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
  /directory-namespace-service/naming_context_utils/validate_computed_attr_name:
    parameters:
      - $ref: "#/components/parameters/computedAttributeName"
    get:
      summary: Validate Computed Attribute Name
      description: Check if a computed attribute name is valid.
      operationId: validateComputedAttributeName
      responses:
        "200":
          description: Computed attribute name validated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IsValidResponse"
              examples:
                example-valid:
                  value:
                    isValid: true
                example-invalid:
                  value:
                    isValid: false
                    errorMsg: Cannot contain spaces
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_VIEW
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
  /directory-namespace-service/naming_context_utils/validate_join_condition:
    parameters:
      - $ref: "#/components/parameters/joinCondition"
    get:
      summary: Validate Join Condition
      description: Validate a provided join condition string.
      operationId: validateJoinCondition
      responses:
        "200":
          description: Join condition validated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IsValid"
              example:
                isValid: true
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_VIEW
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
  /directory-namespace-service/naming_context_utils/build_join_condition:
    parameters:
      - $ref: "#/components/parameters/secondaryObject"
      - $ref: "#/components/parameters/primaryJoinAttribute"
      - $ref: "#/components/parameters/secondaryJoinAttribute"
    get:
      summary: Get Join Condition
      description: Get the constructed join condition for the given join properties.
      operationId: getJoinCondition
      responses:
        "200":
          description: Join condition fetched successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JoinConditionObject"
              examples:
                example-1:
                  $ref: "#/components/examples/JoinConditionObject"
        "404":
          description: Node specified by DN does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_VIEW
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
  /directory-namespace-service/naming_contexts/{dn}/replication:
    parameters:
      - $ref: "#/components/parameters/relaxed_dn"
    get:
      summary: Get replication setting for node
      description: Update replication setting for node - true means replication is
        started; false indicates stopped
      operationId: get-replication
      responses:
        "200":
          description: Replication setting fetched successfully
          content:
            application/json:
              schema:
                type: boolean
                nullable: false
                description: true means replication is started; false indicates stopped
        "400":
          description: node is neither hdap store nor it is cached
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
        "404":
          description: node not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_VIEW
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      tags:
        - Directory Namespace API
    put:
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_NAMESPACE_DESIGN_EDIT
      summary: Update replication setting for node
      operationId: upload-replication
      description: Update replication setting for node - true to start replication;
        false to stop
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: boolean
              nullable: false
              description: true to start replication; false to stop replication
      responses:
        "200":
          description: Replication started/stopped successfully
        "400":
          description: node is neither hdap store nor it is cached
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
        "404":
          description: node not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      tags:
        - Directory Namespace API
  /directory-schema-service/object_classes:
    get:
      summary: Get Object Classes
      description: List all object classes in the schema.
      operationId: getObjectClasses
      responses:
        "200":
          description: Object Classes retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
                - alias
                - cacheObject
                - device
                - group
                - inetorgperson
                - person
                - user
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_DIRECTORY_SCHEMA_VIEW
            - SCOPE_DIRECTORY_NAMESPACE_DIRECTORY_SCHEMA_EDIT
      tags:
        - Directory Schema API
    post:
      summary: Add Object Class
      description: Add a new object class
      operationId: addObjectClass
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ObjectClass"
      responses:
        "201":
          description: Object class added successfully.
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_DIRECTORY_SCHEMA_EDIT
      tags:
        - Directory Schema API
  /directory-schema-service/object_classes/{objectClass}:
    parameters:
      - $ref: "#/components/parameters/objectClass"
    get:
      summary: Get Object Class
      description: Get an object class specified by name
      operationId: getObjectClass
      responses:
        "200":
          description: Object class fetched successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ObjectClass"
        "404":
          description: Object class specified by name does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_DIRECTORY_SCHEMA_VIEW
            - SCOPE_DIRECTORY_NAMESPACE_DIRECTORY_SCHEMA_EDIT
      tags:
        - Directory Schema API
    put:
      summary: Update Object Class
      description: Update an object class
      operationId: updateObjectClass
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ObjectClass"
      responses:
        "200":
          description: Object class update successfully
        "404":
          description: Object class specified by name does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_DIRECTORY_SCHEMA_EDIT
      tags:
        - Directory Schema API
    delete:
      summary: Delete Object Class
      description: Delete an object class specified by name
      operationId: deleteObjectClass
      responses:
        "204":
          description: Object class deleted successfully
        "404":
          description: Object class specified by name does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_DIRECTORY_SCHEMA_EDIT
      tags:
        - Directory Schema API
  /directory-schema-service/object_classes/{objectClass}/parent_object_classes:
    parameters:
      - $ref: "#/components/parameters/objectClass"
    get:
      summary: Get Parent Object Classes
      description: Get Parent Object Classes
      operationId: getParentObjectClasses
      responses:
        "200":
          description: Object Class parents retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
                - top
                - alias
                - person
        "404":
          description: Could not find parent object classes.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_DIRECTORY_SCHEMA_VIEW
            - SCOPE_DIRECTORY_NAMESPACE_DIRECTORY_SCHEMA_EDIT
      tags:
        - Directory Schema API
  /directory-schema-service/attributes:
    get:
      summary: Get Attributes
      description: Get list of attributes
      operationId: getAttributes
      parameters:
        - $ref: "#/components/parameters/includeSuperior"
        - $ref: "#/components/parameters/includeAllProperties"
        - $ref: "#/components/parameters/attributeObjectClasses"
        - $ref: "#/components/parameters/isUserDefined"
      responses:
        "200":
          description: Attributes retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AbstractAttributesResponse"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_DIRECTORY_SCHEMA_VIEW
            - SCOPE_DIRECTORY_NAMESPACE_DIRECTORY_SCHEMA_EDIT
      tags:
        - Directory Schema API
    post:
      summary: Add Attribute
      description: Add a new attribute
      operationId: addAttribute
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DirectorySchemaAttribute"
            example:
              name: c
              alias:
                - countryName
              oid: 2.5.4.6
              description: An attribute for country
              syntax: Attribute Type Description syntax
              multiValued: false
              operational: false
      responses:
        "201":
          description: Attribute added successfully
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_DIRECTORY_SCHEMA_EDIT
      tags:
        - Directory Schema API
  /directory-schema-service/attributes/{attribute}:
    parameters:
      - $ref: "#/components/parameters/attribute"
    get:
      summary: Get Attribute
      description: Get an attribute by name
      operationId: getAttribute
      responses:
        "200":
          description: Attribute retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DirectorySchemaAttribute"
              example:
                name: c
                alias:
                  - countryName
                oid: 2.5.4.6
                description: An attribute for country
                syntax: Attribute Type Description syntax
                multiValued: false
                operational: false
        "404":
          description: Attribute specified by name does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_DIRECTORY_SCHEMA_VIEW
            - SCOPE_DIRECTORY_NAMESPACE_DIRECTORY_SCHEMA_EDIT
      tags:
        - Directory Schema API
    put:
      summary: Update Attribute
      description: Update an attribute
      operationId: updateAttribute
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DirectorySchemaAttribute"
            example:
              name: c
              alias:
                - countryName
              oid: 2.5.4.6
              description: An attribute for country
              syntax: Directory String syntax
              multiValued: false
              operational: false
      responses:
        "200":
          description: Attribute updated successfully
        "404":
          description: Attribute specified by name does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_DIRECTORY_SCHEMA_EDIT
      tags:
        - Directory Schema API
    delete:
      summary: Delete Attribute
      description: Delete an attribute specified by name
      operationId: deleteAttribute
      responses:
        "204":
          description: Attribute deleted successfully
        "404":
          description: Attribute specified by name does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_DIRECTORY_SCHEMA_EDIT
      tags:
        - Directory Schema API
  /directory-schema-service/attributes/attr_syntax:
    get:
      summary: Get Attribute Syntaxes
      description: Get a list of possible attribute syntaxes
      operationId: getAttributeSyntaxes
      responses:
        "200":
          description: Attribute syntaxes fetched successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
                - Bit String
                - Boolean -TRUE/FALSE
                - Certificate
                - Certificate List
                - Certificate Pair
                - Country String
                - Fax
                - JPEG
                - Octet String
                - Telex Number
                - URI
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_DIRECTORY_SCHEMA_VIEW
            - SCOPE_DIRECTORY_NAMESPACE_DIRECTORY_SCHEMA_EDIT
      tags:
        - Directory Schema API
  /directory-schema-service/files:
    get:
      summary: Get Directory Schema Files
      description: Get list of file names for directory schema
      operationId: getDirectorySchemaFiles
      responses:
        "200":
          description: Directory schema files fetched successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
                - ldapschema_11.ldif
                - ldapschema_12.ldif
                - ldapschema_13.ldif
                - ldapschema_14.ldif
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_DIRECTORY_SCHEMA_VIEW
            - SCOPE_DIRECTORY_NAMESPACE_DIRECTORY_SCHEMA_EDIT
      tags:
        - Directory Schema API
  /directory-schema-service/files/{fileName}/download:
    parameters:
      - $ref: "#/components/parameters/DirectorySchemaFileName"
    post:
      summary: Download Schema LDIF
      description: Export Schema LDIF file and download it locally
      operationId: downloadSchemaLdif
      responses:
        "200":
          description: LDIF downloaded successfully
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
                nullable: false
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_DIRECTORY_SCHEMA_VIEW
            - SCOPE_DIRECTORY_NAMESPACE_DIRECTORY_SCHEMA_EDIT
      tags:
        - Directory Schema API
  /directory-schema-service/files/{fileName}:
    parameters:
      - $ref: "#/components/parameters/DirectorySchemaFileName"
    delete:
      summary: Delete Directory Schema File
      description: Delete a directory schema file specified by name
      operationId: deleteDirectorySchemaFile
      responses:
        "204":
          description: File deleted successfully
        "404":
          description: File specified by name does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_DIRECTORY_SCHEMA_EDIT
      tags:
        - Directory Schema API
  /directory-schema-service/files/import:
    post:
      summary: Import Directory Schema File
      description: Import Directory Schema File.
      operationId: importDirectorySchemaFile
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  nullable: false
                isOverride:
                  type: boolean
                  nullable: true
                  default: false
          application/json:
            schema:
              $ref: "#/components/schemas/ImportServerFileOptions"
            example:
              file: ldapschema_14.ldif
              addBehavior: ADD
      responses:
        "200":
          description: Directory Schema import successfully.
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_DIRECTORY_SCHEMA_EDIT
      tags:
        - Directory Schema API
  /directory-schema-service/object_class_required_attributes:
    get:
      summary: Get Attributes Required for Object Classes
      description: Get list of attributes for an object class or list of object
        classes and return which object classes they are required in
      operationId: getObjectClassRequiredAttributes
      parameters:
        - $ref: "#/components/parameters/includeSuperior"
        - $ref: "#/components/parameters/attributeObjectClasses"
      responses:
        "200":
          description: Attributes required object class info fetched successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AttributeRequiredObjectClassInfo"
              example:
                - name: mail
                  requiredForObjectClasses:
                    - inetorgperson
                    - person
                - name: cn
                  requiredForObjectClasses:
                    - inetorgperson
                - name: sn
                  requiredForObjectClasses:
                    - user
                - name: givenName
                  requiredForObjectClasses:
                    - user
      security:
        - bearer_auth:
            - SCOPE_DIRECTORY_NAMESPACE_DIRECTORY_SCHEMA_VIEW
            - SCOPE_DIRECTORY_NAMESPACE_DIRECTORY_SCHEMA_EDIT
      tags:
        - Directory Schema API
  /data-catalog-service/schema_diff/generate:
    post:
      operationId: generate-schema-diff-list
      description: Generate a list of differences between the current schema and the
        newly extracted schema.
      summary: Generate List of Schema Differences
      security:
        - bearer_auth:
            - SCOPE_DATA_CATALOG_DATA_SOURCE_VIEW
            - SCOPE_DATA_CATALOG_DATA_SOURCE_EDIT
      requestBody:
        description: The request for generating the schema diff.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GenerateSchemaDiffRequest"
      responses:
        "200":
          description: Schema differences fetched successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SchemaDiffTree"
              examples:
                example-1:
                  value:
                    schemaName: epic.orx
                    dataSourceName: ascclient
                    numberOfDifferences: 3
                    rootNode:
                      changeType: NONE
                      path: []
                      current:
                        componentType: LABEL
                        label: epic.orx
                      new:
                        componentType: LABEL
                        label: epic.orx
                      children:
                        - changeType: NONE
                          path:
                            - tables
                          current:
                            componentType: LABEL
                            label: Tables
                          new:
                            componentType: LABEL
                            label: Tables
                          children:
                            - changeType: NONE
                              path:
                                - tables
                                - APP.EMPLOYEES
                              current:
                                componentType: TABLE
                                label: APP.EMPLOYEES
                              new:
                                componentType: TABLE
                                label: APP.EMPLOYEES
                              children:
                                - changeType: NONE
                                  path:
                                    - tables
                                    - APP.EMPLOYEES
                                    - fields
                                  current:
                                    componentType: LABEL
                                    label: Fields
                                  new:
                                    componentType: LABEL
                                    label: Fields
                                  children:
                                    - changeType: NONE
                                      path:
                                        - tables
                                        - APP.EMPLOYEES
                                        - fields
                                        - ADDRESS
                                      current:
                                        componentType: FIELD
                                        label: ADDRESS
                                      new:
                                        componentType: FIELD
                                        label: ADDRESS
                                      children: []
                                    - changeType: ADD
                                      path:
                                        - tables
                                        - APP.EMPLOYEES
                                        - fields
                                        - NEWFIELD
                                      current:
                                        componentType: EMPTY
                                        label: ""
                                      new:
                                        componentType: FIELD
                                        label: NEWFIELD
                                      children: []
                                    - changeType: REMOVE
                                      path:
                                        - tables
                                        - APP.EMPLOYEES
                                        - fields
                                        - COUNTRY
                                      current:
                                        componentType: FIELD
                                        label: COUNTRY
                                      new:
                                        componentType: EMPTY
                                        label: ""
                                      children: []
                                    - changeType: NONE
                                      path:
                                        - tables
                                        - APP.EMPLOYEES
                                        - fields
                                        - EMPLOYEEID
                                      current:
                                        componentType: FIELD_PK
                                        label: EMPLOYEEID
                                      new:
                                        componentType: FIELD_PK
                                        label: EMPLOYEEID
                                      children: []
                                    - changeType: CHANGED
                                      path:
                                        - tables
                                        - APP.EMPLOYEES
                                        - fields
                                        - FIRSTNAME
                                      current:
                                        componentType: FIELD
                                        label: FIRSTNAME
                                      new:
                                        componentType: FIELD
                                        label: FIRST
                                      children: []
      tags:
        - Schema Diff Manager
  /data-catalog-service/schema_diff:
    post:
      operationId: apply-schema-changes
      description: Apply schema changes
      summary: Apply schema changes
      security:
        - bearer_auth:
            - SCOPE_DATA_CATALOG_DATA_SOURCE_EDIT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SchemaDiffPostBody"
            examples:
              example-1:
                value:
                  applyType: SAVE_AS_NEW
                  newSchemaName: myNewSchema.orx
                  oldSchemaName: epic.orx
                  isLdap: false
                  datasource: ascclient
                  objects:
                    - APP.CUSTOMERS
                    - APP.EMPLOYEES
                  changes:
                    - changeType: ADD
                      path:
                        - tables
                        - APP.EMPLOYEES
                        - fields
                        - NEWFIELD
                    - changeType: REMOVE
                      path:
                        - tables
                        - APP.EMPLOYEES
                        - fields
                        - COUNTRY
              example-2:
                value:
                  applyType: UPDATE
                  oldSchemaName: epic.orx
                  isLdap: false
                  datasource: ascclient
                  objects:
                    - APP.CUSTOMERS
                    - APP.EMPLOYEES
                  changes:
                    - changeType: ADD
                      path:
                        - tables
                        - APP.EMPLOYEES
                        - fields
                        - NEWFIELD
                    - changeType: REMOVE
                      path:
                        - tables
                        - APP.EMPLOYEES
                        - fields
                        - COUNTRY
      responses:
        "200":
          description: Schema differences applied successfully
      tags:
        - Schema Diff Manager
  /data-catalog-service/schemas:
    get:
      operationId: get-schema-list
      description: Retrieve the list of schemas
      security:
        - bearer_auth:
            - SCOPE_DATA_CATALOG_DATA_SOURCE_VIEW
            - SCOPE_DATA_CATALOG_DATA_SOURCE_EDIT
      summary: Get List of Schemas
      responses:
        "200":
          description: Schemas Found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/GetSchemaNameTypeResponse"
              example:
                - name: advworks
                  type: CUSTOM
                - name: fakeLdap
                  type: LDAP
                - name: fakeDb
                  type: DATABASE
      tags:
        - Schema Manager
    post:
      summary: Create a schema
      description: Create a schema
      operationId: create-schema
      security:
        - bearer_auth:
            - SCOPE_DATA_CATALOG_DATA_SOURCE_EDIT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SchemaProperties"
            examples:
              ldap:
                value:
                  type: LDAP
                  name: myLdapSchema
                  dataSourceName: myad
                  baseDn: ou=testdn
                  objects:
                    - inetorgperson
                    - person
                    - user
                  publishToServer: false
              database:
                value:
                  type: DATABASE
                  name: myDbSchema
                  dataSourceName: advworks
                  objects:
                    - CUSTOMERS
                    - EMPLOYEES
              custom:
                value:
                  type: CUSTOM
                  name: myCustomSchema
                  dataSourceName: aws
      responses:
        "201":
          description: Created
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
        "404":
          description: Data source not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
        "409":
          description: Schema with the same name already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      tags:
        - Schema Manager
  /data-catalog-service/schemas/{schemaName}:
    parameters:
      - $ref: "#/components/parameters/SchemaManagerSchemaName"
    get:
      summary: Get schema
      operationId: get-schema
      description: Get schema information
      security:
        - bearer_auth:
            - SCOPE_DATA_CATALOG_DATA_SOURCE_VIEW
            - SCOPE_DATA_CATALOG_DATA_SOURCE_EDIT
      responses:
        "200":
          description: Schema Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SchemaProperties"
              examples:
                myschema:
                  value:
                    name: myschema
                    lastModified: 2021-01-30T09:30:00Z
                    type: DATABASE
                    dataSourceName: advworks
                    publishToServer: true
        "404":
          description: Schema not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      tags:
        - Schema Manager
    put:
      summary: Save schema
      operationId: save-schema
      description: Update an existing schema
      security:
        - bearer_auth:
            - SCOPE_DATA_CATALOG_DATA_SOURCE_EDIT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SchemaProperties"
            examples:
              myschema:
                value:
                  name: myschema
                  dataSourceName: advworks
                  type: DATABASE
                  publishToServer: true
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
        "404":
          description: Schema or data source not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      tags:
        - Schema Manager
    delete:
      summary: Delete schema
      description: Delete schema
      operationId: delete-schema
      security:
        - bearer_auth:
            - SCOPE_DATA_CATALOG_DATA_SOURCE_EDIT
      responses:
        "200":
          description: OK
      tags:
        - Schema Manager
  /data-catalog-service/schemas/{schemaName}/full_obj:
    parameters:
      - $ref: "#/components/parameters/SchemaManagerSchemaName"
    get:
      summary: Get schema full
      operationId: get-schema-full
      description: Get complete schema object. Intended for UI use.
      security:
        - bearer_auth:
            - SCOPE_DATA_CATALOG_DATA_SOURCE_VIEW
            - SCOPE_DATA_CATALOG_DATA_SOURCE_EDIT
      responses:
        "200":
          description: Schema Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SchemaComplete"
              examples:
                example-1:
                  $ref: "#/components/examples/Schema"
        "404":
          description: Schema not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      tags:
        - Schema Manager
    put:
      summary: Save schema
      operationId: save-schema-full
      description: Update an existing schema
      security:
        - bearer_auth:
            - SCOPE_DATA_CATALOG_DATA_SOURCE_EDIT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SchemaComplete"
            examples:
              example-1:
                $ref: "#/components/examples/Schema"
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
        "404":
          description: Schema or data source not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      tags:
        - Schema Manager
  /data-catalog-service/schemas/generate_schema:
    put:
      summary: Generate schema
      operationId: generate-schema
      description: Publish and unpublish existing schemas and generate new VDS schema
      security:
        - bearer_auth:
            - SCOPE_DATA_CATALOG_DATA_SOURCE_EDIT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              maxItems: 1000
              items:
                type: string
                nullable: false
                maxLength: 500
                minLength: 1
                pattern: .*
                description: The name of the schema
      responses:
        "200":
          description: OK
      tags:
        - Schema Manager
  /data-catalog-service/schemas/{schemaName}/relationships:
    parameters:
      - $ref: "#/components/parameters/SchemaManagerSchemaName"
    get:
      summary: Get list of relationships
      operationId: get-list-relationships
      description: Get list of Relationships for a Schema
      security:
        - bearer_auth:
            - SCOPE_DATA_CATALOG_DATA_SOURCE_VIEW
            - SCOPE_DATA_CATALOG_DATA_SOURCE_EDIT
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Relationship"
              example:
                - id: rel1
                  dest: APP.ORDERS
                  destAttrs:
                    - CUSTOMERID
                    - ORDERID
                  source: APP.CUSTOMERS
                  sourceAttrs:
                    - CUSTOMERID
                    - EMAILADDRESS
                  parent:
                    name: mySchema
                    url: https://fakeServer.url.com/schemas/mySchema
                - id: rel2
                  dest: APP.ORDER_DETAILS
                  destAttrs:
                    - ORDERID
                    - DATE
                  source: APP.ORDERS
                  sourceAttrs:
                    - ORDERID
                  parent:
                    name: mySchema
                    url: https://fakeServer.url.com/schemas/mySchema
        "404":
          description: Schema not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      tags:
        - Schema Manager
    post:
      summary: Create relationship
      description: Create Relationship for a Schema
      operationId: create-relationship
      security:
        - bearer_auth:
            - SCOPE_DATA_CATALOG_DATA_SOURCE_EDIT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Relationship"
            example:
              id: ""
              dest: APP.ORDERS
              destAttrs:
                - CUSTOMERID
                - ORDERID
              source: APP.CUSTOMERS
              sourceAttrs:
                - CUSTOMERID
                - EMAILADDRESS
      responses:
        "201":
          description: CREATED
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
        "404":
          description: Data source not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
        "409":
          description: Schema already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      tags:
        - Schema Manager
  /data-catalog-service/schemas/{schemaName}/relationships/recursive:
    parameters:
      - $ref: "#/components/parameters/SchemaManagerSchemaName"
    post:
      summary: Create recursive relationship
      description: Create Relationship for a Schema
      operationId: create-recursive-relationship
      security:
        - bearer_auth:
            - SCOPE_DATA_CATALOG_DATA_SOURCE_EDIT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RecursiveRelationship"
            example:
              foreignKeys:
                - CUSTOMERID
                - ORDERID
              depth: 1
              source: APP.CUSTOMERS
      responses:
        "201":
          description: CREATED
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
        "404":
          description: Data source not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
        "409":
          description: Schema already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      tags:
        - Schema Manager
  /data-catalog-service/schemas/{schemaName}/relationships/{relationshipId}:
    parameters:
      - $ref: "#/components/parameters/SchemaManagerSchemaName"
      - $ref: "#/components/parameters/relationshipId"
    get:
      summary: Get relationship
      operationId: get-relationship
      description: Get a Relationship for a Schema
      security:
        - bearer_auth:
            - SCOPE_DATA_CATALOG_DATA_SOURCE_VIEW
            - SCOPE_DATA_CATALOG_DATA_SOURCE_EDIT
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Relationship"
              example:
                id: rel2
                dest: APP.ORDERS
                destAttrs:
                  - CUSTOMERID
                  - ORDERID
                source: APP.CUSTOMERS
                sourceAttrs:
                  - CUSTOMERID
                  - EMAILADDRESS
                parent:
                  name: mySchema
                  url: https://fakeServer.url.com/schemas/mySchema
        "404":
          description: Schema or relationship not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      tags:
        - Schema Manager
    put:
      summary: Update relationship
      operationId: update-relationship
      description: Update a Relationship for a Schema
      security:
        - bearer_auth:
            - SCOPE_DATA_CATALOG_DATA_SOURCE_EDIT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Relationship"
            example:
              id: rel2
              dest: APP.ORDERS
              destAttrs:
                - CUSTOMERID
                - ORDERID
              source: APP.CUSTOMERS
              sourceAttrs:
                - CUSTOMERID
                - EMAILADDRESS
              parent:
                name: mySchema
                url: https://fakeServer.url.com/schemas/mySchema
      responses:
        "200":
          description: OK
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
        "404":
          description: Schema or relationship not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
        "409":
          description: Relationship already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      tags:
        - Schema Manager
    delete:
      summary: Delete relationship
      description: Delete Relationship for a Schema
      operationId: delete-relationship
      security:
        - bearer_auth:
            - SCOPE_DATA_CATALOG_DATA_SOURCE_EDIT
      responses:
        "200":
          description: OK
        "404":
          description: Schema not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      tags:
        - Schema Manager
  /data-catalog-service/schemas/{schemaName}/tables:
    parameters:
      - $ref: "#/components/parameters/SchemaManagerSchemaName"
    get:
      summary: Get list of schema tables/views
      operationId: get-list-schema-table-views
      description: Get list of Tables/Views for Schema
      security:
        - bearer_auth:
            - SCOPE_DATA_CATALOG_DATA_SOURCE_VIEW
            - SCOPE_DATA_CATALOG_DATA_SOURCE_EDIT
      responses:
        "200":
          description: Schema tables/views fetched successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Table"
              example:
                - baseTable: CUSTOMERS
                  candidateKeyName: PHONENUMBER
                  candidateKeys:
                    - FAXNUMBER
                    - PHONENUMBER
                  name: APP.CUSTOMERS
                  objectClass: vdAPPCUSTOMERS
                  owner: APP
                  primaryKeys:
                    - CUSTOMERID
                    - EMAILADDRESS
                  isTable: true
                  parent:
                    name: mySchema
                    url: https://fakeServer.url.com/schemas/mySchema
                - baseTable: CUSTOMERSTATUS
                  candidateKeyName: CLOSELEVEL
                  candidateKeys:
                    - CLOSELEVEL
                  name: APP.CUSTOMERSTATUS
                  objectClass: vdAPPCUSTOMERSTATUS
                  owner: APP
                  primaryKeys:
                    - STATUSLEVEL
                  isTable: false
                  parent:
                    name: mySchema
                    url: https://fakeServer.url.com/schemas/mySchema
        "404":
          description: Schema not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      tags:
        - Schema Manager
    post:
      summary: Create table view
      description: Create a Table/View for a Schema
      operationId: create-table-view
      security:
        - bearer_auth:
            - SCOPE_DATA_CATALOG_DATA_SOURCE_EDIT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Table"
            example:
              baseTable: CUSTOMERS
              candidateKeyName: PHONENUMBER
              candidateKeys:
                - FAXNUMBER
                - PHONENUMBER
              name: APP.CUSTOMERS
              objectClass: vdAPPCUSTOMERS
              owner: APP
              primaryKeys:
                - CUSTOMERID
                - EMAILADDRESS
              isTable: false
      responses:
        "201":
          description: CREATED
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
        "404":
          description: Schema not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
        "409":
          description: Table already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      tags:
        - Schema Manager
  /data-catalog-service/schemas/{schemaName}/tables/batch_append:
    parameters:
      - $ref: "#/components/parameters/SchemaManagerSchemaName"
    post:
      description: Append tables to an existing schema
      operationId: append-tables
      security:
        - bearer_auth:
            - SCOPE_DATA_CATALOG_DATA_SOURCE_EDIT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              maxItems: 1000
              items:
                type: string
                description: Name of the table
                nullable: false
                minLength: 1
                maxLength: 500
                pattern: .*
            example:
              - table1
              - table2
              - table3
      responses:
        "201":
          description: CREATED
        "400":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      summary: Append Tables
      tags:
        - Schema Manager
  /data-catalog-service/schemas/{schemaName}/tables/{tableName}:
    parameters:
      - $ref: "#/components/parameters/SchemaManagerSchemaName"
      - $ref: "#/components/parameters/tableName"
    get:
      summary: Get table view
      description: Get a Table/View for a Schema
      operationId: get-table-view
      security:
        - bearer_auth:
            - SCOPE_DATA_CATALOG_DATA_SOURCE_VIEW
            - SCOPE_DATA_CATALOG_DATA_SOURCE_EDIT
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Table"
              example:
                baseTable: CUSTOMERS
                candidateKeyName: PHONENUMBER
                candidateKeys:
                  - FAXNUMBER
                  - PHONENUMBER
                name: APP.CUSTOMERS
                objectClass: vdAPPCUSTOMERS
                owner: APP
                primaryKeys:
                  - CUSTOMERID
                  - EMAILADDRESS
                isTable: false
                parent:
                  name: mySchema
                  url: https://fakeServer.url.com/schemas/mySchema
        "404":
          description: Schema or table does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      tags:
        - Schema Manager
    put:
      summary: Update table view
      description: Update a Table/View for a Schema
      operationId: update-table-view
      security:
        - bearer_auth:
            - SCOPE_DATA_CATALOG_DATA_SOURCE_EDIT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Table"
            example:
              baseTable: CUSTOMERS
              candidateKeyName: PHONENUMBER
              candidateKeys:
                - FAXNUMBER
                - PHONENUMBER
              name: APP.CUSTOMERS
              objectClass: vdAPPCUSTOMERS
              owner: APP
              primaryKeys:
                - CUSTOMERID
                - EMAILADDRESS
              isTable: true
      responses:
        "200":
          description: OK
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
        "404":
          description: Schema or table not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      tags:
        - Schema Manager
    delete:
      summary: Delete table view
      description: Delete table/view
      operationId: delete-table-view
      security:
        - bearer_auth:
            - SCOPE_DATA_CATALOG_DATA_SOURCE_EDIT
      responses:
        "200":
          description: OK
        "404":
          description: Schema not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      tags:
        - Schema Manager
  /data-catalog-service/schemas/{schemaName}/tables/{tableName}/fields:
    parameters:
      - $ref: "#/components/parameters/SchemaManagerSchemaName"
      - $ref: "#/components/parameters/tableName"
    get:
      summary: Get table view fields
      description: Get list of Fields for a Table/View
      operationId: get-table-view-fields
      security:
        - bearer_auth:
            - SCOPE_DATA_CATALOG_DATA_SOURCE_VIEW
            - SCOPE_DATA_CATALOG_DATA_SOURCE_EDIT
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Field"
              examples:
                example-1:
                  value:
                    - name: CUSTOMERID
                      mappedAttrName: id
                      nullable: false
                      type: INTEGER
                      tags:
                        - CUSTOMER
                        - APP
                        - ID
                      parent:
                        name: myTable
                        url: https://fakeServer.url.com/schemas/mySchema/tables/myTable
                    - name: CITY
                      mappedAttrName: city
                      nullable: true
                      type: VARCHAR(255)
                      tags:
                        - CUSTOMER
                        - APP
                        - CITY
                      parent:
                        name: myTable
                        url: https://fakeServer.url.com/schemas/mySchema/tables/myTable
        "404":
          description: Schema or table not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      tags:
        - Schema Manager
    put:
      summary: Update fields
      description: Update list of Fields for a Table/View
      operationId: update-fields
      security:
        - bearer_auth:
            - SCOPE_DATA_CATALOG_DATA_SOURCE_EDIT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Field"
            example:
              - name: CUSTOMERID
                mappedAttrName: id
                nullable: false
                type: INTEGER
                tags:
                  - CUSTOMER
                  - APP
                  - ID
              - name: CITY
                mappedAttrName: city
                nullable: true
                type: VARCHAR(255)
                tags:
                  - CUSTOMER
                  - APP
                  - CITY
      responses:
        "200":
          description: OK
        "404":
          description: Schema or table not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      tags:
        - Schema Manager
  /data-catalog-service/schemas/{schemaName}/merge_objects:
    parameters:
      - $ref: "#/components/parameters/SchemaManagerSchemaName"
    post:
      summary: Merge objects
      description: Merge tables/views into a single view
      operationId: merge-objects
      security:
        - bearer_auth:
            - SCOPE_DATA_CATALOG_DATA_SOURCE_EDIT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MergeObjectsReqBody"
      responses:
        "201":
          description: CREATED
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Table"
              example:
                baseTable: CUSTOMERS
                candidateKeyName: PHONENUMBER
                candidateKeys:
                  - FAXNUMBER
                  - PHONENUMBER
                name: APP.CUSTOMERS
                objectClass: vdAPPCUSTOMERS
                owner: APP
                primaryKeys:
                  - CUSTOMERID
                  - EMAILADDRESS
                isTable: false
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
        "404":
          description: Table or objects not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
        "409":
          description: Table already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      tags:
        - Schema Manager
  /data-catalog-service/schemas/{schemaName}/derive_view:
    parameters:
      - $ref: "#/components/parameters/SchemaManagerSchemaName"
    post:
      summary: Derive view
      description: Create a derived view from an existing table/view
      operationId: derive-view
      security:
        - bearer_auth:
            - SCOPE_DATA_CATALOG_DATA_SOURCE_EDIT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeriveViewReqBody"
      responses:
        "201":
          description: CREATED
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DerivedObjects"
              example:
                relationship:
                  id: rel2
                  dest: APP.ORDERS
                  destAttrs:
                    - CUSTOMERID
                    - ORDERID
                  source: APP.CUSTOMERS
                  sourceAttrs:
                    - CUSTOMERID
                    - EMAILADDRESS
                view:
                  baseTable: CUSTOMERS
                  candidateKeyName: PHONENUMBER
                  candidateKeys:
                    - FAXNUMBER
                    - PHONENUMBER
                  name: APP.CUSTOMERS
                  objectClass: vdAPPCUSTOMERS
                  owner: APP
                  primaryKeys:
                    - CUSTOMERID
                    - EMAILADDRESS
                  isTable: false
        "404":
          description: View not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
        "409":
          description: View already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      tags:
        - Schema Manager
  /data-catalog-service/schemas/{schemaName}/associated_views:
    parameters:
      - $ref: "#/components/parameters/SchemaManagerSchemaName"
    get:
      summary: Get Associated Views
      description: List the all views associated with the specified schema.
      operationId: getAssociatedViews
      responses:
        "200":
          description: Associated views fetched successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
                - advworks
                - northwind2
      security:
        - bearer_auth:
            - SCOPE_DATA_CATALOG_DATA_SOURCE_VIEW
            - SCOPE_DATA_CATALOG_DATA_SOURCE_EDIT
      tags:
        - Schema Manager
  /data-catalog-service/schemas/{schemaName}/relationship_tree:
    parameters:
      - $ref: "#/components/parameters/SchemaManagerSchemaName"
    get:
      summary: Get Schema Relationship Tree Root
      description: Get the root node of the relationship tree for a schema
      operationId: getSchemaRelationshipTreeRoot
      responses:
        "200":
          description: Relationship tree root fetched successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SchemaManagerRelationshipNode"
              examples:
                example-1:
                  $ref: "#/components/examples/SchemaManagerRelationshipNode"
        "404":
          description: Schema not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DATA_CATALOG_DATA_SOURCE_VIEW
            - SCOPE_DATA_CATALOG_DATA_SOURCE_EDIT
      tags:
        - Schema Manager
  /data-catalog-service/schemas/{schemaName}/relationship_tree/{relationshipDn}:
    parameters:
      - $ref: "#/components/parameters/SchemaManagerSchemaName"
      - $ref: "#/components/parameters/SchemaManagerRelationshipDn"
    get:
      summary: Get Schema Relationship Tree Node
      description: Get specified node in the relationship tree for a schema
      operationId: getSchemaRelationshipTreeNode
      responses:
        "200":
          description: Relationship tree node fetched successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SchemaManagerRelationshipNode"
              examples:
                example-1:
                  $ref: "#/components/examples/SchemaManagerRelationshipNode"
        "404":
          description: Schema or relationship node not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_DATA_CATALOG_DATA_SOURCE_VIEW
            - SCOPE_DATA_CATALOG_DATA_SOURCE_EDIT
      tags:
        - Schema Manager
  /data-catalog-service/schemas/published:
    get:
      operationId: get-published-schemas
      description: Retrieve the list of published schema names
      security:
        - bearer_auth:
            - SCOPE_DATA_CATALOG_DATA_SOURCE_VIEW
            - SCOPE_DATA_CATALOG_DATA_SOURCE_EDIT
      summary: Get List of Published Schema Names
      responses:
        "200":
          description: Published Schemas Update
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
                - advworks
                - default
                - otherschema
                - ascclient-def
                - test_schema
      tags:
        - Schema Manager
    put:
      operationId: update-published-schemas
      description: Update the published schemas
      security:
        - bearer_auth:
            - SCOPE_DATA_CATALOG_DATA_SOURCE_EDIT
      summary: Update List of Published Schemas
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              maxItems: 1000
              items:
                type: string
                nullable: false
                maxLength: 500
                minLength: 1
                pattern: .*
                description: The name of the schema
            example:
              - advworks
              - default
      responses:
        "200":
          description: Published Schemas updated
      tags:
        - Schema Manager
  /settings-service/access_control:
    get:
      description: Get the main access control settings.
      summary: Get an access control
      operationId: getAccessControl
      responses:
        "200":
          description: Access control settings retrieved.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessControl"
              examples:
                AccessControlObj:
                  $ref: "#/components/examples/AccessControlObj"
      security:
        - bearer_auth:
            - SCOPE_SECURITY_ACCESS_CONTROL_VIEW
            - SCOPE_SECURITY_ACCESS_CONTROL_EDIT
      tags:
        - "Security Settings: Access Control"
    put:
      description: Update the main access control settings.
      summary: Update an access control
      operationId: putAccessControl
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccessControl"
            examples:
              AccessControlObj:
                $ref: "#/components/examples/AccessControlObj"
      responses:
        "200":
          description: Access control settings updated.
        "400":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_SECURITY_ACCESS_CONTROL_EDIT
      tags:
        - "Security Settings: Access Control"
  /settings-service/access_control/acis:
    get:
      description: Gets the list of all acis for a base dn.
      summary: Get a list of acis
      operationId: getAciList
      parameters:
        - $ref: "#/components/parameters/baseDnOptional"
      responses:
        "200":
          description: List of acis retrieved.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Aci"
      security:
        - bearer_auth:
            - SCOPE_SECURITY_ACCESS_CONTROL_VIEW
            - SCOPE_SECURITY_ACCESS_CONTROL_EDIT
      tags:
        - "Security Settings: Access Control"
    post:
      description: Create a new aci. String request body is for manual aci; object
        request body will take an Aci.
      summary: Create an aci
      operationId: createAci
      parameters:
        - $ref: "#/components/parameters/baseDnRequired"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Aci"
      responses:
        "201":
          description: Aci created.
        "400":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_SECURITY_ACCESS_CONTROL_EDIT
      tags:
        - "Security Settings: Access Control"
  /settings-service/access_control/acis/validate_parsable:
    get:
      description: Validate if aci string is parsable
      summary: Validate if aci string is parsable
      operationId: parsableAciString
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: string
              nullable: false
              minLength: 1
              maxLength: 10000
      responses:
        "200":
          description: Boolean of aci parsability.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Aci"
        "400":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_SECURITY_ACCESS_CONTROL_VIEW
            - SCOPE_SECURITY_ACCESS_CONTROL_EDIT
      tags:
        - "Security Settings: Access Control"
  /settings-service/access_control/acis/{aciId}:
    parameters:
      - in: path
        name: aciId
        schema:
          type: integer
          example: 775153429
        required: true
        description: Id of the aci to get/update/delete.
    get:
      description: Get an aci.
      parameters:
        - $ref: "#/components/parameters/baseDnRequired"
      summary: Get an aci
      operationId: getAci
      responses:
        "200":
          description: Aci retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Aci"
              examples:
                AciObj:
                  $ref: "#/components/examples/AciObj"
        "404":
          description: aci not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_SECURITY_ACCESS_CONTROL_VIEW
            - SCOPE_SECURITY_ACCESS_CONTROL_EDIT
      tags:
        - "Security Settings: Access Control"
    put:
      description: Update an aci. String request body is for manual aci; object
        request body will take an Aci.
      parameters:
        - $ref: "#/components/parameters/baseDnRequired"
      summary: Update an aci
      operationId: updateAci
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Aci"
      responses:
        "200":
          description: Aci updated.
        "400":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
        "404":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_SECURITY_ACCESS_CONTROL_EDIT
      tags:
        - "Security Settings: Access Control"
    delete:
      description: Delete an aci.
      parameters:
        - $ref: "#/components/parameters/baseDnRequired"
      summary: Delete an aci
      operationId: deleteAci
      responses:
        "200":
          description: Aci deleted.
      security:
        - bearer_auth:
            - SCOPE_SECURITY_ACCESS_CONTROL_EDIT
      tags:
        - "Security Settings: Access Control"
  /settings-service/access_control/acis/locations:
    get:
      description: Returns the DNs that have an ACI
      summary: Get list DNs with an ACI
      operationId: getAciLocations
      responses:
        "200":
          description: Aci Locations as a list of DNs
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
      security:
        - bearer_auth:
            - SCOPE_SECURITY_ACCESS_CONTROL_VIEW
            - SCOPE_SECURITY_ACCESS_CONTROL_EDIT
      tags:
        - "Security Settings: Access Control"
  /settings-service/attribute_encryption:
    get:
      description: Get attribute encryption settings.
      summary: Get attribute encryption
      operationId: getAttributeEncrypt
      responses:
        "200":
          description: Attribute encryption settings retrieved.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttributeEncryption"
              examples:
                AttributeEncryptionObj:
                  $ref: "#/components/examples/AttributeEncryptionObj"
      security:
        - bearer_auth:
            - SCOPE_SECURITY_ATTRIBUTE_ENCRYPTION_VIEW
            - SCOPE_SECURITY_ATTRIBUTE_ENCRYPTION_EDIT
      tags:
        - "Security Settings: Attribute Encryption"
    put:
      description: Update attribute encryption settings.
      summary: Update attribute encryption
      operationId: postAttributeEncrypt
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                secureLdifExport:
                  type: boolean
                  nullable: false
              required:
                - secureLdifExport
              example:
                secureLdifExport: false
      responses:
        "200":
          description: Attribute encryption settings updated.
        "400":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_SECURITY_ATTRIBUTE_ENCRYPTION_EDIT
      tags:
        - "Security Settings: Attribute Encryption"
  /settings-service/attribute_encryption/update_key:
    put:
      description: Update encryption key and cipher.
      summary: Update encryption key
      operationId: updateEncryptKey
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                cipher:
                  type: string
                  nullable: false
                  maxLength: 500
                  minLength: 1
                secretKey:
                  type: string
                  format: password
                  maxLength: 500
                  minLength: 1
                  nullable: false
                ldifzKey:
                  type: boolean
                  description: Key is either for LDIFZ or HDAP encryption.
                  nullable: true
                  default: true
              required:
                - cipher
                - secretKey
              example:
                cipher: DES3
                secretKey: password
                ldifzKey: false
      responses:
        "200":
          description: Key updated successfully.
        "400":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_SECURITY_ATTRIBUTE_ENCRYPTION_EDIT
      tags:
        - "Security Settings: Attribute Encryption"
  /settings-service/attribute_encryption/aws_kms:
    get:
      description: Get attribute encryption aws kms settings.
      summary: Get aws kms settings
      operationId: getAwsKms
      responses:
        "200":
          description: aws kms settings retrieved.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AwsKmsSettingsGet"
              examples:
                AwsKmsSettingsGet:
                  $ref: "#/components/examples/AwsKmsSettingsGet"
      security:
        - bearer_auth:
            - SCOPE_SECURITY_ATTRIBUTE_ENCRYPTION_VIEW
            - SCOPE_SECURITY_ATTRIBUTE_ENCRYPTION_EDIT
      tags:
        - "Security Settings: Attribute Encryption"
    put:
      description: Update attribute encryption aws kms settings.
      summary: Update aws kms settings
      operationId: postAwsKms
      parameters:
        - $ref: "#/components/parameters/AttributeEncryptionUseExistingCredentials"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AwsKmsSettingsPut"
            examples:
              AwsKmsSettingsGet:
                $ref: "#/components/examples/AwsKmsSettingsPut"
      responses:
        "200":
          description: Attribute encryption settings updated.
        "400":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_SECURITY_ATTRIBUTE_ENCRYPTION_EDIT
      tags:
        - "Security Settings: Attribute Encryption"
  /settings-service/client_access/ldap:
    get:
      description: Read Settings for LDAP Access to FID
      summary: Get LDAP config
      security:
        - bearer_auth:
            - SCOPE_SETTINGS_VIEW
            - SCOPE_SETTINGS_EDIT
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LdapConfig"
      operationId: get-ldap
      tags:
        - Client Access Configuration
    put:
      description: Update Settings for LDAP Access to FID
      summary: Update LDAP config
      security:
        - bearer_auth:
            - SCOPE_SETTINGS_EDIT
      operationId: put-ldap
      responses:
        "200":
          description: OK
        "400":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LdapConfig"
      tags:
        - Client Access Configuration
  /settings-service/client_access/rest:
    get:
      tags:
        - Client Access Configuration
      description: Read Settings for REST/HTTP Access to FID
      summary: Get REST/HTTP config
      security:
        - bearer_auth:
            - SCOPE_SETTINGS_VIEW
            - SCOPE_SETTINGS_EDIT
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestConfig"
      operationId: get-rest
    put:
      description: Write Settings for REST/HTTP Access to FID
      summary: Update REST/HTTP config
      security:
        - bearer_auth:
            - SCOPE_SETTINGS_EDIT
      operationId: put-rest
      responses:
        "200":
          description: OK
        "400":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestConfig"
      tags:
        - Client Access Configuration
  /settings-service/client_access/ldap/mappings:
    get:
      operationId: get-user-to-dn-mappings
      summary: Get User to DN mappings
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserToDnMapping"
      security:
        - bearer_auth:
            - SCOPE_SETTINGS_VIEW
            - SCOPE_SETTINGS_EDIT
      tags:
        - Client Access Configuration
    put:
      summary: Update User to DN mappings
      operationId: update-user-to-dn-mappings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              maxItems: 10000
              items:
                $ref: "#/components/schemas/UserToDnMapping"
      responses:
        "200":
          description: OK
        "400":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_SETTINGS_EDIT
      tags:
        - Client Access Configuration
  /settings-service/client_certificate_truststore/{alias}:
    parameters:
      - in: path
        name: alias
        schema:
          type: string
          description: The unique alias given to the certificate
          nullable: false
          maxLength: 1000
          minLength: 1
        required: true
        description: Alias of the client certificate.
    get:
      description: Get the details of a certificate
      summary: Get a certificate
      operationId: getCertificate
      responses:
        "200":
          description: Client certificate details retrieved.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CertificateDetails"
              examples:
                cert-ok:
                  $ref: "#/components/examples/CertDetails"
                cert-expired:
                  value:
                    alias: testCert
                    generalInfo: |-
                      Performs Windows System Component Verification
                       Performs Windows Hardware Driver Verification
                       Allows data on disk to be encrypted
                      ...
                    issuedTo: cn=admin
                    issuedBy: cn=admin
                    validFrom: 2022-02-07
                    validTo: 2023-02-19
                    status: EXPIRED
                    certificateProperties:
                      - name: Version
                        value: V2
                        type: TYPE_V1_FIELDS_ONLY
                      - name: Signature Algorithm
                        value: SHA256withRSA
                        type: TYPE_EXTENSIONS_ONLY
                    certificationPath:
                      - dn: cn=admin
                        children:
                          - dn: ou=eng,cn=admin
                            children:
                              - dn: o=John Smith,ou=eng,cn=admin
                                children: []
                              - dn: o=Jane Doe,ou=eng,cn=admin
                                children:
                                  - dn: ou=fake,o=Jane Doe,ou=eng,cn=admin
                                    children: []
                          - dn: ou=org2,cn=admin
                            children: []
                cert-not-valid:
                  value:
                    alias: cert3
                    generalInfo: |-
                      Performs Windows System Component Verification
                       Performs Windows Hardware Driver Verification
                       Allows data on disk to be encrypted
                      ...
                    issuedTo: cn=admin
                    issuedBy: cn=admin
                    validFrom: 2024-02-07
                    validTo: 2032-02-19
                    status: NOT_YET_VALID
                    certificateProperties:
                      - name: Version
                        value: V2
                        type: TYPE_CRIT_EXT_ONLY
                      - name: Signature Algorithm
                        value: SHA256withRSA
                        type: TYPE_EXTENSIONS_ONLY
                    certificationPath:
                      - dn: cn=admin
                        children: []
        "404":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_SETTINGS_VIEW
            - SCOPE_SETTINGS_EDIT
      tags:
        - "Security Settings: Client Certificate Truststore"
    delete:
      description: Delete a client certificate
      summary: Delete a certificate
      operationId: deleteCertificate
      responses:
        "200":
          description: Client certificate deleted
      security:
        - bearer_auth:
            - SCOPE_SETTINGS_EDIT
      tags:
        - "Security Settings: Client Certificate Truststore"
  /settings-service/client_certificate_truststore:
    get:
      description: A list of certificate aliases
      summary: Get a list of client certificate truststore
      operationId: getCertificateTs
      responses:
        "200":
          description: Client certificate truststore details retrieved.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
                - cert1
                - testCert
                - cert3
      security:
        - bearer_auth:
            - SCOPE_SETTINGS_VIEW
            - SCOPE_SETTINGS_EDIT
      tags:
        - "Security Settings: Client Certificate Truststore"
    post:
      description: Import client certificate from a file.
      summary: Import a certificate
      operationId: importCertificate
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: The file uploaded by the user.
                  nullable: false
                alias:
                  $ref: "#/components/schemas/RequiredCertificateAlias"
              required:
                - file
                - alias
      responses:
        "201":
          description: Client certificate truststore imported.
        "400":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_SETTINGS_EDIT
      tags:
        - "Security Settings: Client Certificate Truststore"
  /settings-service/client_certificate_truststore/{alias}/export:
    get:
      description: Export client certificate to a file.
      summary: Export a certificate
      operationId: exportCertificate
      parameters:
        - in: path
          name: alias
          schema:
            type: string
            description: The unique alias given to the certificate
            nullable: false
            maxLength: 1000
            minLength: 1
          required: true
          description: Alias of the client certificate to export.
      responses:
        "200":
          description: Certificate exported into file
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "404":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_SETTINGS_VIEW
            - SCOPE_SETTINGS_EDIT
      tags:
        - "Security Settings: Client Certificate Truststore"
  /settings-service/oidc_provider:
    get:
      description: This endpoint is deprecated and will be removed in a future
        release. Use the endpoints at /oidc_providers instead. This endpoint
        will return the first OIDC configuration found.
      summary: Get oidc provider configuration
      operationId: getOidcProvider
      deprecated: true
      responses:
        "200":
          description: Oidc provider retrieved.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OidcProvider"
              examples:
                oidcProvider:
                  $ref: "#/components/examples/OidcProviderObj"
      security:
        - bearer_auth:
            - SCOPE_ADMINISTRATION_CONTROL_PANEL_CONFIGURATION_VIEW
            - SCOPE_ADMINISTRATION_CONTROL_PANEL_CONFIGURATION_EDIT
      tags:
        - "Security Settings: OIDC Provider"
    put:
      description: This endpoint is deprecated and will be removed in a future
        release. Use the endpoints at /oidc_providers instead. This endpoint
        will replace all existing OIDC configurations with the one provided in
        the request body.
      summary: Update oidc provider configuration
      operationId: updateOidcProvider
      deprecated: true
      parameters:
        - $ref: "#/components/parameters/OidcProviderUseExistingCredentials"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OidcProvider"
            examples:
              oidcProvider:
                $ref: "#/components/examples/OidcProviderObj"
      responses:
        "200":
          description: Oidc provider updated.
        "400":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_ADMINISTRATION_CONTROL_PANEL_CONFIGURATION_EDIT
      tags:
        - "Security Settings: OIDC Provider"
  /settings-service/oidc_provider/login_info:
    get:
      description: This endpoint is deprecated and will be removed in a future
        release. Use the endpoints at /oidc_providers instead. This endpoint
        will return logon information for the first OIDC configuration found.
      summary: Get oidc provider configuration for login
      operationId: getOidcProviderLogin
      deprecated: true
      responses:
        "200":
          description: Oidc provider login info retrieved.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OidcProviderLoginInfo"
              examples:
                oidcProviderEnabled:
                  $ref: "#/components/examples/EnabledOidcProviderLoginInfoExample"
                oidcProviderDisabled:
                  $ref: "#/components/examples/DisabledOidcProviderLoginInfoExample"
      security: []
      tags:
        - "Security Settings: OIDC Provider"
  /settings-service/oidc_provider/discovery_info:
    parameters:
      - $ref: "#/components/parameters/discoveryUrl"
    get:
      description: This endpoint is deprecated and will be removed in a future
        release. There is an equivalent endpoint at /oidc_providers.
      summary: Get info for a discovery endpoint
      operationId: getDiscoveryEndpointInfo
      deprecated: true
      responses:
        "200":
          description: Endpoints retrieved.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetDiscoveryEndpointInfoResponse"
              examples:
                urls:
                  value:
                    tokenEndpointUri: https://oauth2.googleapis.com/token
                    authorizationEndpointUri: https://accounts.google.com/o/oauth2/v2/auth
        "404":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_ADMINISTRATION_CONTROL_PANEL_CONFIGURATION_VIEW
            - SCOPE_ADMINISTRATION_CONTROL_PANEL_CONFIGURATION_EDIT
      tags:
        - "Security Settings: OIDC Provider"
  /settings-service/oidc_provider/discovery_endpoints:
    get:
      description: This endpoint is deprecated and will be removed in a future
        release. There is an equivalent endpoint at /oidc_providers.
      summary: Get discovery endpoints
      operationId: getDiscoveryEndpoints
      deprecated: true
      responses:
        "200":
          description: Endpoints retrieved.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetCommonDiscoveryProvidersResponse"
      security:
        - bearer_auth:
            - SCOPE_ADMINISTRATION_CONTROL_PANEL_CONFIGURATION_VIEW
            - SCOPE_ADMINISTRATION_CONTROL_PANEL_CONFIGURATION_EDIT
      tags:
        - "Security Settings: OIDC Provider"
  /settings-service/oidc_provider/scopes_claims:
    parameters:
      - $ref: "#/components/parameters/discoveryUrl"
    get:
      description: This endpoint is deprecated and will be removed in a future
        release. There is an equivalent endpoint at /oidc_providers.
      summary: Get scopes and claims
      operationId: getScopesClaims
      deprecated: true
      responses:
        "200":
          description: Endpoints retrieved.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetScopesAndClaimsResponse"
              examples:
                scopesClaims:
                  $ref: "#/components/examples/GetScopesAndClaimsResponse"
        "404":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_ADMINISTRATION_CONTROL_PANEL_CONFIGURATION_VIEW
            - SCOPE_ADMINISTRATION_CONTROL_PANEL_CONFIGURATION_EDIT
      tags:
        - "Security Settings: OIDC Provider"
  /settings-service/oidc_providers:
    get:
      description: Get a list of configured OIDC providers for SSO.
      summary: Get configured OIDC providers
      operationId: getOidcProviders
      responses:
        "200":
          description: Configured OIDC providers retrieved.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OidcProviderListItem"
              examples:
                oidcProviders:
                  $ref: "#/components/examples/OidcProviderList"
      security:
        - bearer_auth:
            - SCOPE_ADMINISTRATION_CONTROL_PANEL_CONFIGURATION_VIEW
            - SCOPE_ADMINISTRATION_CONTROL_PANEL_CONFIGURATION_EDIT
      tags:
        - "Security Settings: OIDC Provider"
    post:
      description: Add a new OIDC provider configuration for SSO. The new
        configuration will be inserted at the bottom of the list.
      summary: Add OIDC provider configuration
      operationId: addOidcProvider
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OidcProviderListItem"
            examples:
              oidcProvider:
                $ref: "#/components/examples/OidcProviderListObj"
      responses:
        "201":
          description: Oidc provider added.
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
        "409":
          description: configurationName already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_ADMINISTRATION_CONTROL_PANEL_CONFIGURATION_EDIT
      tags:
        - "Security Settings: OIDC Provider"
    put:
      description: Update the list of configured OIDC providers for SSO.
      summary: Update configured OIDC providers
      operationId: updateOidcProviders
      parameters:
        - $ref: "#/components/parameters/OidcProviderUseExistingCredentials"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              nullable: false
              maxItems: 50
              items:
                $ref: "#/components/schemas/OidcProviderListItem"
            examples:
              oidcProviders:
                $ref: "#/components/examples/OidcProviderList"
      responses:
        "204":
          description: Oidc providers updated.
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
        "409":
          description: Duplicate configurationName.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_ADMINISTRATION_CONTROL_PANEL_CONFIGURATION_EDIT
      tags:
        - "Security Settings: OIDC Provider"
  /settings-service/oidc_providers/{configurationName}:
    parameters:
      - $ref: "#/components/parameters/configurationName"
    get:
      description: Get an OIDC provider configuration for SSO.
      summary: Get an OIDC provider configuration
      operationId: getOidcProviderByConfigurationName
      responses:
        "200":
          description: OIDC provider configuration retrieved.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OidcProviderListItem"
              examples:
                oidcProvider:
                  $ref: "#/components/examples/OidcProviderListObj"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_ADMINISTRATION_CONTROL_PANEL_CONFIGURATION_VIEW
            - SCOPE_ADMINISTRATION_CONTROL_PANEL_CONFIGURATION_EDIT
      tags:
        - "Security Settings: OIDC Provider"
    put:
      description: Update an OIDC provider configuration for SSO.
      summary: Update an OIDC provider configuration
      operationId: updateOidcProviderByConfigurationName
      parameters:
        - $ref: "#/components/parameters/OidcProviderUseExistingCredentials"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OidcProviderListItem"
            examples:
              oidcProvider:
                $ref: "#/components/examples/OidcProviderListObj"
      responses:
        "204":
          description: Oidc provider updated.
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_ADMINISTRATION_CONTROL_PANEL_CONFIGURATION_EDIT
      tags:
        - "Security Settings: OIDC Provider"
    delete:
      description: Delete an OIDC Provider configuration.
      summary: Delete an OIDC provider configuration
      operationId: deleteOidcProviderByConfigurationName
      responses:
        "204":
          description: Oidc provider deleted.
      security:
        - bearer_auth:
            - SCOPE_ADMINISTRATION_CONTROL_PANEL_CONFIGURATION_EDIT
      tags:
        - "Security Settings: OIDC Provider"
  /settings-service/oidc_providers/login_info:
    get:
      description: Get login info for all enabled OIDC provider configurations.
      summary: Get oidc provider configurations for login
      operationId: getOidcProviderLoginList
      responses:
        "200":
          description: Oidc provider login info retrieved.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OidcProviderLoginInfoListItem"
              examples:
                oidcProvider:
                  $ref: "#/components/examples/OidcProviderLoginInfo"
      security: []
      tags:
        - "Security Settings: OIDC Provider"
  /settings-service/oidc_providers/discovery_info:
    parameters:
      - $ref: "#/components/parameters/discoveryUrl"
    get:
      description: Get OIDC token endpoint URI and authorization endpoint URI based on
        discovery URL.
      summary: Get info for a discovery endpoint
      operationId: getOIDCEndpointInfoByDiscoveryURL
      responses:
        "200":
          description: Endpoints retrieved.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetDiscoveryEndpointInfoResponse"
              examples:
                urls:
                  value:
                    tokenEndpointUri: https://oauth2.googleapis.com/token
                    authorizationEndpointUri: https://accounts.google.com/o/oauth2/v2/auth
        "404":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_ADMINISTRATION_CONTROL_PANEL_CONFIGURATION_VIEW
            - SCOPE_ADMINISTRATION_CONTROL_PANEL_CONFIGURATION_EDIT
      tags:
        - "Security Settings: OIDC Provider"
  /settings-service/oidc_providers/discovery_endpoints:
    get:
      description: Get a Map<String,String> of providers to their discovery urls
      summary: Get discovery endpoints
      operationId: getListDiscoveryEndpoints
      responses:
        "200":
          description: Endpoints retrieved.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetCommonDiscoveryProvidersResponse"
      security:
        - bearer_auth:
            - SCOPE_ADMINISTRATION_CONTROL_PANEL_CONFIGURATION_VIEW
            - SCOPE_ADMINISTRATION_CONTROL_PANEL_CONFIGURATION_EDIT
      tags:
        - "Security Settings: OIDC Provider"
  /settings-service/oidc_providers/scopes_claims:
    parameters:
      - $ref: "#/components/parameters/discoveryUrl"
    get:
      description: Get valid scopes and claims for a discovery url/provider.
      summary: Get scopes and claims
      operationId: getScopesClaimsForProvider
      responses:
        "200":
          description: Endpoints retrieved.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetScopesAndClaimsResponse"
              examples:
                scopesClaims:
                  $ref: "#/components/examples/GetScopesAndClaimsResponse"
        "404":
          description: Client error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security:
        - bearer_auth:
            - SCOPE_ADMINISTRATION_CONTROL_PANEL_CONFIGURATION_VIEW
            - SCOPE_ADMINISTRATION_CONTROL_PANEL_CONFIGURATION_EDIT
      tags:
        - "Security Settings: OIDC Provider"
  /settings-service/statistics:
    get:
      operationId: get-entry-statistics
      summary: Get the current list entry statistics
      description: Returns a list of entry statistics stored on the server. Currently,
        the list will contain zero or one entry as only the most recent
        statistics are stored. (Previous statistics are not kept.) Additionally,
        the statistics are updated during a refresh operation, so they may be in
        an intermediate state where some values are current (having just been
        updated) and others outdated (having no yet been updated). This can also
        happen when a refresh is started but stopped before finishing. The
        client is responsible for checking if the statistics are current,
        outdated, or incomplete.
      responses:
        "200":
          $ref: "#/components/responses/EntryStatisticsList"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
      security:
        - bearer_auth:
            - SCOPE_ADMINISTRATION_ENTRY_STATISTICS_VIEW
            - SCOPE_ADMINISTRATION_ENTRY_STATISTICS_EDIT
      tags:
        - Entry Statistics API
  /settings-service/operations:
    get:
      operationId: get-refresh-operations
      summary: Get list of active entry statistics refresh operations
      description: Returns list of refresh operations stored on the server. The list
        will contain zero or one entry as  the service currently does not
        support simultaneous refreshes. Deleted operations are not included in
        the  results.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RefreshOperation"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
      security:
        - bearer_auth:
            - SCOPE_ADMINISTRATION_ENTRY_STATISTICS_VIEW
            - SCOPE_ADMINISTRATION_ENTRY_STATISTICS_EDIT
      tags:
        - Entry Statistics API
    post:
      operationId: start-new-refresh-operation
      summary: Start a new refresh operation
      description: Attempts to start a new refresh operation. The server executes only
        one refresh operation at a time, and there is no request queueing.
        Attempting to start a new refresh while one is running will result in
        the new request being rejected with an error. Attempting to start a new
        refresh while one is in a non-running state will immediately delete the
        previous refresh and start the new one.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RefreshOperation"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "409":
          $ref: "#/components/responses/EntryStatisticsConflict"
      security:
        - bearer_auth:
            - SCOPE_ADMINISTRATION_ENTRY_STATISTICS_EDIT
      tags:
        - Entry Statistics API
  /settings-service/operations/{name}:
    get:
      operationId: get-refresh-operation-by-name
      summary: Get the refresh operation by name
      description: Gets the named refresh operation if it exists. When the refresh
        completes successfully, the object  contains the entry statistics that
        would have been returned directly, if the refresh was not long running.
      parameters:
        - name: name
          in: path
          description: Unique name of refresh operation assigned by the server.
          required: true
          schema:
            $ref: "#/components/schemas/RefreshOperationName"
      responses:
        "200":
          $ref: "#/components/responses/RefreshOperation"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/EntryStatisticsNotFound"
      security:
        - bearer_auth:
            - SCOPE_ADMINISTRATION_ENTRY_STATISTICS_VIEW
            - SCOPE_ADMINISTRATION_ENTRY_STATISTICS_EDIT
      tags:
        - Entry Statistics API
  /settings-service/operations/{name}/stop:
    post:
      operationId: stop-refresh-operation
      summary: Stop execution of a currently running refresh operation
      description: Asynchronously attempts to stop the currently running refresh
        operation. Success is not guaranteed, so the client is responsible for
        monitoring the operation to check for success. Prematurely stopping a
        refresh operation may cause incomplete entry statistics to be stored on
        the server. A stopped operation is not immediately deleted. It can be
        resumed until the server begins processing a new refresh request. A
        refresh must be in a  running state to be stopped.
      parameters:
        - name: name
          in: path
          description: Name of the operation to stop.
          required: true
          schema:
            $ref: "#/components/schemas/RefreshOperationName"
      responses:
        "202":
          $ref: "#/components/responses/Accepted"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/EntryStatisticsNotFound"
        "409":
          description: Returned when attempting to stop a refresh that is not currently
            running.
      security:
        - bearer_auth:
            - SCOPE_ADMINISTRATION_ENTRY_STATISTICS_EDIT
      tags:
        - Entry Statistics API
  /settings-service/operations/{name}/resume:
    post:
      summary: Continue a currently stopped refresh operation
      operationId: resume-refresh-operation
      description: Attempts to resume a previously stopped refresh operation. Only the
        most recently stopped refresh  can be continued. When a new refresh
        begins, the previously stopped refresh is deleted and attempting to
        resume  it will return an error. A refresh must be in stopped state to
        be resumed.
      parameters:
        - name: name
          in: path
          description: Name of the operation to resume.
          required: true
          schema:
            $ref: "#/components/schemas/RefreshOperationName"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RefreshOperation"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/EntryStatisticsNotFound"
        "409":
          description: Returned when attempting to resume refresh that is not in a STOPPED
            state.
      security:
        - bearer_auth:
            - SCOPE_ADMINISTRATION_ENTRY_STATISTICS_EDIT
      tags:
        - Entry Statistics API
  /settings-service:
    get:
      summary: Get login page information
      description: Get information to display on the login page.
      operationId: get-login-information
      responses:
        "200":
          description: Information fetched successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InfoModel"
              examples:
                example-1:
                  value:
                    iddmTenant: radiant-one-v8-api-eks-cluster
        default:
          description: An unexpected client error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientError"
      security: []
      tags:
        - Login Page Information API
  /settings-service/saas:
    get:
      description: Checks whether RadiantOne is using a saas deployment
      summary: Is RadiantOne saas
      security:
        - bearer_auth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: boolean
              example: true
      operationId: is-saas
      tags:
        - Saas Configuration
  /system-administration-service/task_scheduler:
    get:
      operationId: get-task-scheduler-info
      summary: Get information about the task scheduler
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskSchedulerResponse"
        "401":
          description: You are not authenticated/authorized to access this resource.
        "403":
          description: You do not have permission to access this resource.
      security:
        - bearer_auth: []
      tags:
        - Task Management API
    put:
      operationId: update-task-scheduler-settings
      summary: Update task scheduler settings
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskSchedulerResponse"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskSchedulerRequest"
      security:
        - bearer_auth: []
      tags:
        - Task Management API
  /system-administration-service/task_scheduler/start:
    post:
      operationId: start-task-scheduler
      summary: Start the task scheduler
      responses:
        "200":
          description: OK
        "400":
          description: The task scheduler is already running or cannot be started.
        "401":
          description: You are not authenticated/authorized to access this resource.
        "403":
          description: You do not have permission to access this resource.
      security:
        - bearer_auth: []
      tags:
        - Task Management API
  /system-administration-service/task_scheduler/stop:
    post:
      operationId: stop-task-scheduler
      summary: Stop the task scheduler
      responses:
        "200":
          description: OK
        "400":
          description: The task scheduler is already stopped or cannot be stopped.
        "401":
          description: You are not authenticated/authorized to access this resource.
        "403":
          description: You do not have permission to access this resource.
      security:
        - bearer_auth: []
      tags:
        - Task Management API
  /system-administration-service/task_scheduler/restart:
    post:
      operationId: restart-task-scheduler
      summary: Restart the task scheduler
      responses:
        "200":
          description: OK
        "400":
          description: The task scheduler cannot be restarted.
        "401":
          description: You are not authenticated/authorized to access this resource.
        "403":
          description: You do not have permission to access this resource.
      security:
        - bearer_auth: []
      tags:
        - Task Management API
  /system-administration-service/tasks:
    get:
      operationId: get-list-of-tasks
      summary: Get the list of tasks.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TaskResponse"
        "401":
          description: You are not authenticated/authorized to access this resource.
        "403":
          description: You do not have permission to access this resource.
      security:
        - bearer_auth: []
      tags:
        - Task Management API
  /system-administration-service/tasks/{id}:
    get:
      operationId: get-task-details-by-id
      summary: Get task details by task id.
      parameters:
        - $ref: "#/components/parameters/TaskId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskResponse"
        "401":
          description: You are not authenticated/authorized to access this resource.
        "403":
          description: You do not have permission to access this resource.
        "404":
          description: There is no such task.
      security:
        - bearer_auth: []
      tags:
        - Task Management API
    put:
      operationId: update-task
      summary: Update a task
      parameters:
        - $ref: "#/components/parameters/TaskId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskRequest"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskResponse"
        "400":
          description: The task cannot be updated.
        "401":
          description: You are not authenticated/authorized to access this resource.
        "403":
          description: You do not have permission to access this resource.
        "404":
          description: There is no such task.
      security:
        - bearer_auth: []
      tags:
        - Task Management API
    delete:
      operationId: remove-task
      summary: Remove a task
      parameters:
        - $ref: "#/components/parameters/TaskId"
      responses:
        "200":
          description: OK
        "400":
          description: The task cannot be removed.
        "401":
          description: You are not authenticated/authorized to access this resource.
        "403":
          description: You do not have permission to access this resource.
        "404":
          description: There is no such task.
      security:
        - bearer_auth: []
      tags:
        - Task Management API
  /system-administration-service/tasks/{id}/logs/tail:
    get:
      operationId: tail-task-logs
      summary: Tail a task's logs.
      parameters:
        - $ref: "#/components/parameters/TaskId"
        - name: numberOfLines
          in: query
          description: The number of lines of logs to get from the tail of the log file
          required: false
          schema:
            type: number
            minimum: 1
            maximum: 2000
            example: 15
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskLogsResponse"
        "400":
          description: Invalid number of log lines requested.
        "401":
          description: You are not authenticated/authorized to access this resource.
        "403":
          description: You do not have permission to access this resource.
        "404":
          description: There is no such task.
      security:
        - bearer_auth: []
      tags:
        - Task Management API
  /system-administration-service/tasks/{id}/logs:
    get:
      operationId: download-logs-for-task
      summary: Download the logs for a task.
      parameters:
        - $ref: "#/components/parameters/TaskId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskLogsResponse"
        "400":
          description: Invalid number of log lines requested.
        "401":
          description: You are not authenticated/authorized to access this resource.
        "403":
          description: You do not have permission to access this resource.
        "404":
          description: There is no such task.
      security:
        - bearer_auth: []
      tags:
        - Task Management API
  /system-administration-service/tasks/{id}/start:
    post:
      operationId: start-task
      summary: Start a task
      parameters:
        - $ref: "#/components/parameters/TaskId"
      responses:
        "200":
          description: OK
        "400":
          description: The task is already running or cannot be started.
        "401":
          description: You are not authenticated/authorized to access this resource.
        "403":
          description: You do not have permission to access this resource.
        "404":
          description: There is no such task.
      security:
        - bearer_auth: []
      tags:
        - Task Management API
  /system-administration-service/tasks/{id}/terminate:
    post:
      operationId: terminate-task
      summary: Terminate a task
      parameters:
        - $ref: "#/components/parameters/TaskId"
      responses:
        "200":
          description: OK
        "400":
          description: The task is not running or cannot be stopped.
        "401":
          description: You are not authenticated/authorized to access this resource.
        "403":
          description: You do not have permission to access this resource.
        "404":
          description: There is no such task.
      security:
        - bearer_auth: []
      tags:
        - Task Management API
  /settings-service/controlpanel/messages/banner:
    get:
      operationId: get-banner-message
      summary: Get Internal Banner Configuration
      description: Get the configuration necessary to display the internal banner in
        the control panel UI.
      responses:
        "200":
          description: Successfully retrieved internal banner configuration.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ControlPanelBannerMessage"
              examples:
                success:
                  $ref: "#/components/examples/ControlPanelBannerMessage"
      security: []
      tags:
        - Control Panel Messages
  /settings-service/controlpanel/messages/motd:
    get:
      operationId: get-message-of-the-day
      summary: Get The Message Of The Day
      description: Get the configuration necessary to display the message of the day
        in the control panel UI.
      responses:
        "200":
          description: Successfully retrieved message of the day configuration.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ControlPanelMessageOfTheDay"
              examples:
                success:
                  $ref: "#/components/examples/ControlPanelMessageOfTheDay"
      security: []
      tags:
        - Control Panel Messages
components:
  callbacks: {}
  examples:
    ConfigurationAutoExportSuccessReport:
      value:
        revision: a1b2c3d4
        status: SUCCESS
        timestamp: 2021-01-30T08:30:00Z
        processedResources:
          - name: advworks
            type: DATASOURCE
          - name: o_export-root
            type: NAMING
    ConfigurationAutoExportFailureReport:
      value:
        revision: a1b2c3d4
        status: FAILURE
        timestamp: 2021-01-30T08:30:00Z
        failedResources:
          - name: advworks
            type: DATASOURCE
        errors:
          - message: Something went horribly wrong.
            source: SETTINGS_SERVICE
            stacktrace:
              - java.io.IOException something went horribly wrong
    ConfigurationAutoImportRequest:
      value:
        apply: true
    ConfigurationAutoImportFailureReport:
      value:
        applied: true
        status: SUCCESS
        revision: d1c2b3a4
        exportRevisions:
          - a1b2c3d4
          - b3c4d5a6
        timestamp: 2021-01-30T08:30:00Z
        failedResources:
          - name: advworks
            type: DATASOURCE
        errors:
          - message: Something went horribly wrong.
            source: SETTINGS_SERVICE
            stacktrace:
              - java.io.IOException something went horribly wrong
    ConfigurationAutoImportSuccessReport:
      value:
        applied: true
        status: SUCCESS
        revision: d1c2b3a4
        exportRevisions:
          - a1b2c3d4
          - b3c4d5a6
        timestamp: 2021-01-30T08:30:00Z
        processedResources:
          - name: advworks
            type: DATASOURCE
          - name: o_export-root
            type: NAMING
        impactedCaches:
          - ldifcache_o_export_root
    ConfigurationPromotionSettingsResponse:
      value:
        auto:
          enabled: true
          state: INACTIVE
          promotionDataLocation: https://github.com/radiant-iddm-configs/iddm-config.git
          importFromEnvironment: dev
          exportToEnvironment: qa
    AutoPromotionReportList:
      value:
        - timestamp: 2021-01-30T08:30:00Z
          revision: a1b2c3d4
          status: SUCCESS
        - timestamp: 2021-01-30T08:30:00Z
          revision: N/A
          status: FAILURE
    PromotionOperationResponse:
      value:
        timestamp: 2021-01-30T08:30:00Z
    ConfigurationAutoPromotionStateResponse:
      value:
        state: INACTIVE
    ConnectorConfig:
      value:
        type: DB_TIMESTAMP
        properties:
          - name: timestampColumn
            value: StartDate
          - name: pollingInterval
            value: "100"
    ConnectorTypeList:
      value:
        - name: DB_TIMESTAMP
          label: DB Timestamp
          configured: false
          properties:
            - name: timestampColumn
              label: Timestamp Column
              required: true
              type: STRING
              value: StartDate
              section: DB Settings
              editable: true
            - name: pollingInterval
              label: Polling Interval
              required: false
              type: NUMBER
              value: "100"
              section: Polling
              editable: true
    AccessTokenExample:
      value:
        name: Prod Service Account
        apiType: CONFIG
        roles:
          - config
        createdOn: 2022-09-27T08:30:00Z
        expiresOn: 2023-09-27T00:00:00Z
    GetAccessTokenListExample:
      value:
        - name: Prod Service Account
          apiType: CONFIG
          roles:
            - config
          createdOn: 2022-09-27T08:30:00Z
          expiresOn: 2023-09-27T00:00:00Z
        - name: QA Service Account
          apiType: CONFIG
          roles:
            - engineer
          createdOn: 2022-09-27T11:45:00Z
          expiresOn: 2023-01-27T00:00:00Z
        - name: Dev Service Account
          apiType: REST
          createdOn: 2022-10-16T10:42:00Z
          expiresOn: 2025-10-16T00:00:00Z
    DirectoryManagerSettings:
      value:
        userName: cn=Directory Manager
        password: testPass
        oldPassword: fakePass
        allowedIps:
          - 124.32.133
          - 13.444.1111
    SpecialGroups:
      value:
        specialUsersGroupDn: ou=fake,cn=test
        administratorsGroupDn: ou=fakeAdmin,cn=testAdmin
    GetRolesResponseExample:
      value:
        - name: dev
          defaultRole: false
        - name: engineer
          defaultRole: true
        - name: custom engineer
          defaultRole: false
    RoleDetailsExample:
      value:
        name: dev
        entryDn: cn=someRole,ou=globalgroups,cn=fonfig
        defaultRole: false
        directoryBrowserPermission: VIEW
        identityManagerPermission: VIEW
        tasksPermission: EDIT
        settingsPermission: NONE
        globalSyncPermission: VIEW
        observabilityPermission: NONE
        dashboardPermission: VIEW
        revokeTokenPermission: false
        dataCatalogPermissions:
          dataSourcesPermission: EDIT
          dataSourceOverrides:
            - dataSourceName: admin_core
              permission: NONE
            - dataSourceName: prod_config
              permission: VIEW
          templateManagementPermission: EDIT
          globalRelationshipsPermission: EDIT
          dataAssessmentPermission: NONE
        administrationPermissions:
          userManagementPermission: NONE
          entryStatisticsPermission: NONE
          rolesPermission: NONE
          directoryManagerPermission: NONE
          controlPanelConfigPermission: VIEW
          accessTokensPermission: VIEW
        securityPermissions:
          attributeEncryptionPermission: EDIT
          accessControlPermission: EDIT
        directoryNamespacePermissions:
          namespaceDesignPermission: EDIT
          directorySchemaPermission: EDIT
        classicControlPanelPermission:
          enabled: true
          assumeRole: uid=aciadmin,ou=globalusers,cn=config
        exportImportPermissions:
          exportEnabled: true
          importEnabled: true
    UserDetailsExample:
      value:
        username: john_smith
        password: newPass
        firstName: John
        lastName: Smith
        email: jsmith@org.com
        active: true
        roles:
          - dev
          - tempAdmin
    UserDetailsListExample:
      value:
        users:
          - username: john_smith
            password: newPass
            firstName: John
            lastName: Smith
            email: jsmith@org.com
            active: true
            roles:
              - dev
              - tempAdmin
          - username: jane_doe
            password: password
            firstName: null
            lastName: null
            email: jdoe@org.com
            active: false
            roles:
              - eng
              - tempAdmin
        cursor: A5B6C7
        next: https://myurl.com/users?cursor=A5B6C7&pageSize=5
    DashboardGetExample:
      value:
        - type: WHATS_NEW
          widgetUrl: http://fake_host.com/service-name/dashboard/what_new
          layout:
            x: 0
            y: 0
            w: 4
            h: 6
            draggable: true
        - type: LINKS
          widgetUrl: http://fake_host.com/service-name/dashboard/links
          layout:
            x: 4
            y: 0
            w: 8
            h: 10
            draggable: true
        - type: PRODUCT_VERSION
          widgetUrl: http://fake_host.com/service-name/dashboard/product_version
          layout:
            x: 0
            y: 0
            w: 1
            h: 1
            draggable: false
        - type: SERVICE_SUMMARY
          widgetUrl: http://fake_host.com/service-name/dashboard/another
          layout: null
    DashboardPutExample:
      value:
        - type: WHATS_NEW
          layout:
            x: 0
            y: 0
            w: 4
            h: 6
        - type: LINKS
          layout:
            x: 4
            y: 0
            w: 8
            h: 10
        - type: PRODUCT_VERSION
          layout:
            x: -1
            y: -1
            w: -1
            h: -1
        - type: SERVICE_SUMMARY
          layout:
            x: 2
            y: 6
            w: 4
            h: 4
    GetServiceSummaryWidgetResponseExample:
      value:
        dataSources:
          ldap: 10
          database: 2
          other: 5
        namingContexts:
          active: 12
          inactive: 6
        caches:
          inactive: 18
          none: 5
          periodic: 14
          realTime: 7
    GetWhatNewWidgetResponseExample:
      value:
        - title: Infographic
          description: What's the Role of Identity in Your Enterprise
          linkText: Take a Look
          linkUrl: http://fakeurl.com/infographic
          imageUrl: http://fakeurl.com/infographic#info.jpeg
        - title: Press Release
          description: The Toll of Identity Sprawl in a Complex Enterprise
          linkText: Learn More
          linkUrl: http://fakeurl.com/press_release
          imageUrl: http://fakeurl.com/press_release#image.png
    GetProductVersionWidgetResponseExample:
      value:
        installDate: 2022-09-14T22:44:07.482Z
        expireDate: 2023-09-14T22:44:07.482Z
        version: v8.0.0-r5467-2323-3331
    LinksWidgetExample:
      value:
        - id: 1
          headerImageType: DEFAULT
          description: Transform identity into a business driver with our unprecedented
            Identity Data Fabric.
          textOverlay: Ensemble
          title: Namespace
          linkPath: http://fakeurl.com/namespace
        - id: 2
          headerImageType: ALTERNATE
          description: Fake description for display purposes.
          textOverlay: Radiant Logic
          title: Security
          linkPath: http://fakeurl.com/security
    searchObjectList:
      value:
        - name: company directory
          type: active_directory
          description: The data source for an entire company directory
          active: false
          objects:
            - example_object1
            - example_object2
            - example_object3
          category: ldap
          createdOn: 2022-09-12T10:12:00Z
        - name: custom database
          type: postgres
          description: A custom database
          active: true
          objects:
            - example2_object1
            - example2_object2
            - example2_object3
          category: database
          createdOn: 2022-09-12T10:12:00Z
    getDataSourcesReturnObjExample:
      value:
        totalItems: 8
        totalPages: 2
        currentPage: 2
        result:
          - name: company_directory
            category: ldap
            type: active_directory
            description: The data source for an entire company directory
            host: fakehost.fakeorg
            port: 2899
            ssl: false
            bindDn: fakeBind
            password: null
            active: true
            createdOn: 2022-05-25T08:30:00Z
            readOnly: false
            defaultSchema: generatedSchemaForCompanyDirectory
            addedSchemas:
              - userCreatedSchema1
              - userCreatedSchema2
          - name: Derby
            category: database
            type: example_directory
            description: A Derby data source
            driverClassName: org.apache.derby.jdbc.ClientDriver
            url: jdbc:derby://hostname:1527/AdvWorks
            username: admin
            password: null
            active: true
            createdOn: 2022-07-12T10:12:00Z
            readOnly: false
            defaultSchema: generatedSchemaForDerby
            addedSchemas:
              - userCreatedSchema3
              - userCreatedSchema4
          - type: oracle_db
            name: custom_users
            category: custom
            description: Custom user data
            active: false
            createdOn: 2022-09-12T10:12:00Z
            readOnly: false
            defaultSchema: generatedSchemaForActiveDirectory
            customProps:
              my-custom: hello
          - type: scim_db
            name: scim_users
            category: custom
            description: SCIM user data
            active: true
            createdOn: 2022-09-10T10:12:00Z
            readOnly: true
            defaultSchema: generatedSchemaForSCIM
            customProps:
              my-custom: hello
    DirectoryBrowserSearchInfoExample1:
      value:
        tabs:
          - id: filter_1234567891011
            name: Search 1
            dn: o=companyprofiles
            scope: ONE
            filter:
              operator: AND
              fields: []
              groups: []
            manualFilter: ""
            manual: false
            returnAttributes: []
            maxEntries: 25
            timeOut: 200
        history:
          - id: filter_1234567891011
            name: Search 1
            dn: o=companyprofiles
            scope: ONE
            filter:
              operator: AND
              fields: []
              groups: []
            manualFilter: ""
            manual: false
            returnAttributes: []
            maxEntries: 25
            timeOut: 200
          - id: filter_1234567891012
            name: Search 2
            dn: o=cn=registry
            scope: ONE
            filter:
              operator: AND
              fields: []
              groups: []
            manualFilter: (objectClass=*)
            manual: true
            returnAttributes:
              - cn
              - BIRTHDATE
            maxEntries: 25
            timeOut: 200
    DirectoryBrowserSearchInfoExample2:
      value:
        tabs:
          - id: filter_1234567891011
            name: Search 1
            dn: o=companyprofiles
            scope: ONE
            filter:
              operator: AND
              fields: []
              groups: []
            manualFilter: ""
            manual: false
            returnAttributes: []
            maxEntries: 25
            timeOut: 200
        history:
          - id: filter_1234567891012
            name: Search 2
            dn: o=cn-registry
            scope: ONE
            filter:
              operator: AND
              fields: []
              groups: []
            manualFilter: (objectClass=*)
            manual: true
            returnAttributes: []
            maxEntries: 25
            timeOut: 200
    LdapProxyAdvancedProperties:
      value:
        javaClass: com.rli.scripts.intercept.o_companyprofiles
        sourceLocation: $RLI_HOME/vds_server/custom/src/com/rli/scripts/intercept/o_companyprofiles.java
        interceptOn:
          - BIND
          - ADD
          - COMPARE
        objectClassMapping:
          - actualObjectClass: LDAPServer
            mappedObjectClass: LDAPServer
          - actualObjectClass: applicationprocess
            mappedObjectClass: alias
        preProcessingFilter: null
        postProcessingFilter: null
        suffixBranchExclusion:
          - ou=Human Resources,o=companydirectory
        suffixBranchInclusion: null
        globalAttributesHandling:
          - actualName: EXTENSION
            virtualName: EXTENSION
            dnRemapping: false
            alwaysRequested: true
            hidden: false
          - actualName: secretary
            virtualName: account
            dnRemapping: true
            alwaysRequested: true
            hidden: false
          - actualName: member
            virtualName: member
            dnRemapping: false
            alwaysRequested: true
            hidden: true
          - actualName: seealso
            virtualName: also
            dnRemapping: false
            alwaysRequested: false
            hidden: false
    ScriptCompilationResults:
      value:
        isSuccessful: true
        output: >-
          Buildfile: /radiantone/vds/vds_server/custom/build.xml


          compileSubset:
            [echo] Preparing to compile: com/rli/scripts/fidsync/o_companydirectory_sync_o_vds/Transfo_o_companydirectory.java
            [delete] Deleting directory /radiantone/vds/vds_server/custom/tmp/classes
            [mkdir] Created dir: /radiantone/vds/vds_server/custom/tmp/classes
            [javac] /radiantone/vds/vds_server/custom/build.xml:146: warning: 'includeantruntime' was not set, defaulting to build.sysclasspath=last; set to false for repeatable builds
            [javac] Compiling 1 source file to /radiantone/vds/vds_server/custom/tmp/classes
            [delete] Deleting directory /radiantone/vds/vds_server/custom/tmp/classes

            BUILD SUCCESSFUL
          Total time: 1 second
    SpecialAttributes:
      value:
        linkedAttributes:
          - targetDn: ou=ad_sample,ou=AllProfiles
            backlinkAttribute: isMemberOf
            sourceDns:
              - ou=Virtual Groups,ou=AllProfiles
              - ou=localvds,ou=AllProfiles
            forwardLinkAttributes:
              - member
              - uniqueMember
              - memberURL
            sourceObjectClasses:
              - group
              - groupofnames
              - groupofuniquenames
              - groupofurls
            nestedRelationshipsEnabled: true
          - targetDn: ou=Product Development,o=companydirectory
            backlinkAttribute: directReports
            sourceDns:
              - ou=Management,o=companydirectory
            forwardLinkAttributes:
              - manager
            sourceObjectClasses:
              - inetorgperson
            nestedRelationshipsEnabled: false
        dynamicGroupSettings:
          memberAttribute: MEMBER
          dynamicGroups:
            - dn: ldap://o=companydirectory??sub?(objectClass=groupOfURLs)
              cache: true
            - dn: uid=Aaron_Medler,ou=Accounting,o=companydirectory
              cache: false
        unnestGroups:
          - ou=Accounting,o=companydirectory
          - ou=Eng,o=companydirectory
        referentialIntegrityRules:
          - enabled: true
            groupsLocations:
              - ou=globalgroups,cn=config
              - ou=Virtual Groups,ou=AllProfiles
            usersLocation: ou=globalgroups,cn=config
            attributes:
              - member
              - uniquemember
              - manager
            validateUsersInDit: false
          - enabled: false
            groupsLocations:
              - ou=globalgroups,cn=config
            usersLocation: ou=globalgroups,cn=config
            attributes:
              - member
            validateUsersInDit: false
        attributeUniquenessRules:
          - dnList:
              - ou=Accounting,o=companydirectory
              - ou=Eng,o=companydirectory
              - ou=HR,o=companydirectory
            attributeList:
              - attr1
              - attr2
          - dnList:
              - ou=Accounting,o=companydirectory
              - ou=Legal,o=companydirectory
            attributeList:
              - attr3
          - dnList:
              - o=companydirectory
            attributeList:
              - attr4
    NamespaceObjectInputSource:
      value:
        id: my-ns-object
        name: my-ns-object
        dataSource: vds
        sourceType: NAMESPACE_OBJECT
        attributes:
          - name: cn
            virtualName: cn
            tags:
              - primaryKey
          - name: actualdn
            virtualName: actualdn
          - name: employeeNumber
            virtualName: employeeNumber
          - name: givenName
            virtualName: givenName
          - name: mail
            virtualName: mail
          - name: sAMAccountName
            virtualName: sAMAccountName
          - name: sn
            virtualName: sn
        targetBaseDn: o=companydirectory
        objectClass: user
        scope: SUB
        sizeLimit: 100
    ExternalDataSourceInputSource:
      value:
        id: my-ext-data-source
        name: my-ext-data-source
        sourceType: EXTERNAL_DATA_SOURCE
        attributes:
          - name: EMPLOYEEID
            virtualName: EMPLOYEEID
            tags:
              - primaryKey
          - name: ADDRESS
            virtualName: ADDRESS
          - name: FIRSTNAME
            virtualName: FIRSTNAME
          - name: LASTNAME
            virtualName: LASTNAME
          - name: TITLE
            virtualName: TITLE
        dataSource: myderby
        dataSourceCategory: DATABASE
        schema: northwind
        objectClass: vdAPPEMPLOYEES
        object: APP.EMPLOYEES
    RelatedObject:
      value:
        id: Employees
        name: Employees
        tableName: APP.EMPLOYEES
        relationshipDn: ORDERS,ORDERS_DETAILS,CUSTOMERS
        attributes:
          - name: EMPLOYEEID
            virtualName: EMPLOYEEID
            tags:
              - primaryKey
          - name: ADDRESS
            virtualName: ADDRESS
    RelatedObjectList:
      value:
        - id: Orders
          name: Orders
          tableName: APP.ORDERS
          relationshipDn: ORDERS
          attributes:
            - name: ORDERID
              virtualName: ORDERID
              tags:
                - primaryKey
            - name: ORDERDATE
              virtualName: ORDERDATE
        - id: Customers
          name: Customers
          tableName: APP.CUSTOMERS
          relationshipDn: ORDERS,CUSTOMERS
          attributes:
            - name: CUSTOMERID
              virtualName: CUSTOMERID
              tags:
                - primaryKey
            - name: ADDRESS
              virtualName: ADDRESS
    ExtensibleObject:
      value:
        id: my-extensible-object
        name: my-extensible-object
        sourceType: EXTENSIBLE_OBJECT
        dataSource: vds
        attributes:
          - name: attribute1
            virtualName: attribute1
          - name: attribute2
            virtualName: attribute2
        objectClass: extensibleObject
    AddObjectDataSourceSchemaOptions:
      value:
        dataSource: vds
        schema: schema1
        object: inetOrgPerson
    AddObjectNamespaceOptions:
      value:
        targetBaseDn: ou=Human Resources,o=directorynamespace
        objectClass: inetOrgPerson
        scope: SUB
        sizeLimit: 100
    AddObjectCurrentSchemaOptions:
      value:
        objectDn: APP.EMPLOYEES,APP.ORDERS,APP.CUSTOMERS
    ExtensibleObjectOptions:
      value:
        objectClass: extensibleObject
        attributes:
          - name: attribute1
            virtualName: attribute1
          - name: attribute2
            virtualName: attribute2
    ObjectMap:
      value:
        inputSources:
          - sourceType: PRIMARY
            attributes:
              - name: uid
                virtualName: uid
                tags:
                  - primaryKey
              - name: actualdn
                virtualName: actualdn
              - name: cn
                virtualName: cn
              - name: departmentNumber
                virtualName: departmentNumber
              - name: employeeNumber
                virtualName: employeeNumber
              - name: givenName
                virtualName: givenName
              - name: l
                virtualName: l
              - name: mail
                virtualName: mail
              - name: sn
                virtualName: sn
              - name: title
                virtualName: title
            name: inetOrgPerson
            dataSource: vds
            dataSourceCategory: LDAP
            schema: o_companydirectory
            id: inetorgperson_vds_o_companydirectory_primary
            objectClass: inetOrgPerson
          - sourceType: EXTERNAL_DATA_SOURCE
            attributes:
              - name: EMPLOYEEID
                virtualName: EMPLOYEEID
                tags:
                  - primaryKey
              - name: ADDRESS
                virtualName: ADDRESS
              - name: FIRSTNAME
                virtualName: FIRSTNAME
              - name: LASTNAME
                virtualName: LASTNAME
              - name: TITLE
                virtualName: TITLE
            dataSource: myderby
            dataSourceCategory: DATABASE
            schema: northwind
            objectClass: vdAPPEMPLOYEES
            object: APP.EMPLOYEES
            name: vdAPPEMPLOYEES
            id: vdappemployees_myderby_northwind_external
          - sourceType: NAMESPACE_OBJECT
            dataSource: vds
            attributes:
              - name: cn
                virtualName: cn
                tags:
                  - primaryKey
              - name: actualdn
                virtualName: actualdn
              - name: employeeNumber
                virtualName: employeeNumber
              - name: givenName
                virtualName: givenName
              - name: mail
                virtualName: mail
              - name: sAMAccountName
                virtualName: sAMAccountName
              - name: sn
                virtualName: sn
            targetBaseDn: o=companydirectory
            objectClass: user
            scope: SUB
            sizeLimit: 100
            name: user
            id: user_o_companydirectory_namespace
          - sourceType: EXTENSIBLE_OBJECT
            attributes:
              - name: attribute1
                virtualName: attribute1
              - name: attribute2
                virtualName: attribute2
            objectClass: extensibleObject
            name: extensibleObject
            dataSource: vds
            id: extensibleobject_extensible
        attributeMappings:
          - name: uid
            virtualName: uid
            tags:
              - primaryKey
            source: inetOrgPerson
          - name: actualdn
            virtualName: actualdn
            source: inetOrgPerson
          - name: cn
            virtualName: firstName
            source: inetOrgPerson
          - name: departmentNumber
            virtualName: departmentNumber
            source: inetOrgPerson
          - name: employeeNumber
            virtualName: employeeNumber
            source: inetOrgPerson
          - name: givenName
            virtualName: givenName
            source: inetOrgPerson
          - name: l
            virtualName: l
            source: inetOrgPerson
          - name: mail
            virtualName: email
            source: inetOrgPerson
          - name: sn
            virtualName: lastName
            source: inetOrgPerson
          - name: title
            virtualName: title
            source: inetOrgPerson
        joins:
          - joinId: joinmyderby
            active: true
            order: 1
            source: vdappemployees_myderby_northwind_external
            attributes:
              - name: EMPLOYEEID
                virtualName: EMPLOYEEID
                source: vdappemployees_myderby_northwind_external
              - name: ADDRESS
                virtualName: ADDRESS
                source: vdappemployees_myderby_northwind_external
              - name: FIRSTNAME
                virtualName: FIRSTNAME
                source: vdappemployees_myderby_northwind_external
              - name: LASTNAME
                virtualName: LASTNAME
                source: vdappemployees_myderby_northwind_external
              - name: TITLE
                virtualName: TITLE
                source: vdappemployees_myderby_northwind_external
            secondaryObject:
              dataSource: myderby
              objectClass: Employee
              targetBaseDn: dv=myderby
              scope: SUB
              joinCondition: (EMPLOYEEID=@[employeeNumber:varchar])
            filter: (&(objectclass=Employee)(l=San Francisco))
            sizeLimit: 100
            joinType: LEFT
            returnAllAttributes: false
          - joinId: joinmyad
            active: true
            order: 1
            source: user_o_companydirectory_namespace
            attributes:
              - name: cn
                virtualName: cn
                source: user_o_companydirectory_namespace
              - name: actualdn
                virtualName: actualdn
                source: user_o_companydirectory_namespace
              - name: employeeNumber
                virtualName: employeeNumber
                source: user_o_companydirectory_namespace
              - name: givenName
                virtualName: givenName
                source: user_o_companydirectory_namespace
              - name: mail
                virtualName: mail
                source: user_o_companydirectory_namespace
              - name: sAMAccountName
                virtualName: sAMAccountName
                source: user_o_companydirectory_namespace
              - name: sn
                virtualName: sn
                source: user
            secondaryObject:
              dataSource: myderby
              objectClass: user
              targetBaseDn: OU=test,DC=joey,DC=test,DC=com
              scope: SUB
              joinCondition: (&(employeeNumber=@[employeeNumber:varchar])(objectclass=user))
            filter: ""
            sizeLimit: 100
            joinType: INNER
            returnAllAttributes: false
        joinComputedAttributes:
          - name: fullName
            active: true
            expression: cn + sn
        finalOutput:
          attributes:
            - virtualName: uid
              origin:
                - inetorgperson_vds_o_companydirectory_primary
              isHidden: false
              canModifyHidden: true
              tags:
                - primaryKey
              precedentAttributes:
                - name: uid
                  origin: inetorgperson_vds_o_companydirectory_primary
                  priority: NORMAL
                  tags:
                    - primaryKey
                  isUpdatable: true
                  isSearchable: true
                  canModifySearchable: true
                  canModifyUpdatable: true
            - virtualName: actualdn
              origin:
                - inetorgperson_vds_o_companydirectory_primary
                - user_o_companydirectory_namespace
              isHidden: false
              canModifyHidden: true
              precedentAttributes:
                - name: actualdn
                  origin: inetorgperson_vds_o_companydirectory_primary
                  priority: NORMAL
                  isUpdatable: true
                  isSearchable: true
                  canModifySearchable: true
                  canModifyUpdatable: true
                - name: actualdn
                  origin: user_o_companydirectory_namespace
                  priority: NORMAL
                  isUpdatable: false
                  isSearchable: false
                  canModifySearchable: true
                  canModifyUpdatable: true
            - virtualName: ADDRESS
              origin:
                - vdappemployees_myderby_northwind_external
              isHidden: false
              canModifyHidden: true
              precedentAttributes:
                - name: ADDRESS
                  origin: vdappemployees_myderby_northwind_external
                  priority: NORMAL
                  isUpdatable: false
                  isSearchable: false
                  canModifySearchable: true
                  canModifyUpdatable: true
            - virtualName: attribute1
              origin:
                - extensibleobject_extensible
              isHidden: false
              canModifyHidden: true
              precedentAttributes:
                - name: attribute1
                  origin: extensibleobject_extensible
                  priority: NORMAL
                  isUpdatable: false
                  isSearchable: false
                  canModifySearchable: true
                  canModifyUpdatable: true
            - virtualName: attribute2
              origin:
                - extensibleobject_extensible
              isHidden: false
              canModifyHidden: true
              precedentAttributes:
                - name: attribute2
                  origin: extensibleobject_extensible
                  priority: NORMAL
                  isUpdatable: false
                  isSearchable: false
                  canModifySearchable: true
                  canModifyUpdatable: true
            - virtualName: firstName
              origin:
                - inetorgperson_vds_o_companydirectory_primary
                - user_o_companydirectory_namespace
              isHidden: false
              canModifyHidden: true
              tags:
                - primaryKey
              precedentAttributes:
                - name: cn
                  origin: inetorgperson_vds_o_companydirectory_primary
                  priority: NORMAL
                  isUpdatable: true
                  isSearchable: true
                  canModifySearchable: true
                  canModifyUpdatable: true
                - name: cn
                  origin: user_o_companydirectory_namespace
                  priority: NORMAL
                  tags:
                    - primaryKey
                  isUpdatable: false
                  isSearchable: false
                  canModifySearchable: true
                  canModifyUpdatable: true
            - virtualName: departmentNumber
              origin:
                - inetorgperson_vds_o_companydirectory_primary
              isHidden: false
              canModifyHidden: true
              precedentAttributes:
                - name: departmentNumber
                  origin: inetorgperson_vds_o_companydirectory_primary
                  priority: NORMAL
                  isUpdatable: true
                  isSearchable: true
                  canModifySearchable: true
                  canModifyUpdatable: true
            - virtualName: EMPLOYEEID
              origin:
                - vdappemployees_myderby_northwind_external
              isHidden: false
              canModifyHidden: true
              tags:
                - primaryKey
              precedentAttributes:
                - name: EMPLOYEEID
                  origin: vdappemployees_myderby_northwind_external
                  priority: NORMAL
                  tags:
                    - primaryKey
                  isUpdatable: false
                  isSearchable: false
                  canModifySearchable: true
                  canModifyUpdatable: true
            - virtualName: employeeNumber
              origin:
                - inetorgperson_vds_o_companydirectory_primary
                - user_o_companydirectory_namespace
              isHidden: false
              canModifyHidden: true
              precedentAttributes:
                - name: employeeNumber
                  origin: inetorgperson_vds_o_companydirectory_primary
                  priority: NORMAL
                  isUpdatable: true
                  isSearchable: true
                  canModifySearchable: true
                  canModifyUpdatable: true
                - name: employeeNumber
                  origin: user_o_companydirectory_namespace
                  priority: NORMAL
                  isUpdatable: false
                  isSearchable: false
                  canModifySearchable: true
                  canModifyUpdatable: true
            - virtualName: FIRSTNAME
              origin:
                - vdappemployees_myderby_northwind_external
              isHidden: false
              canModifyHidden: true
              precedentAttributes:
                - name: FIRSTNAME
                  origin: vdappemployees_myderby_northwind_external
                  priority: NORMAL
                  isUpdatable: false
                  isSearchable: false
                  canModifySearchable: true
                  canModifyUpdatable: true
            - virtualName: givenName
              origin:
                - inetorgperson_vds_o_companydirectory_primary
                - user_o_companydirectory_namespace
              isHidden: false
              canModifyHidden: true
              precedentAttributes:
                - name: givenName
                  origin: inetorgperson_vds_o_companydirectory_primary
                  priority: NORMAL
                  isUpdatable: true
                  isSearchable: true
                  canModifySearchable: true
                  canModifyUpdatable: true
                - name: givenName
                  origin: user_o_companydirectory_namespace
                  priority: NORMAL
                  isUpdatable: false
                  isSearchable: false
                  canModifySearchable: true
                  canModifyUpdatable: true
            - virtualName: l
              origin:
                - inetorgperson_vds_o_companydirectory_primary
              isHidden: false
              canModifyHidden: true
              precedentAttributes:
                - name: givenName
                  origin: inetorgperson_vds_o_companydirectory_primary
                  priority: NORMAL
                  isUpdatable: true
                  isSearchable: true
                  canModifySearchable: true
                  canModifyUpdatable: true
            - virtualName: LASTNAME
              origin:
                - vdappemployees_myderby_northwind_external
              isHidden: false
              canModifyHidden: true
              precedentAttributes:
                - name: LASTNAME
                  origin: vdappemployees_myderby_northwind_external
                  priority: NORMAL
                  isUpdatable: false
                  isSearchable: false
                  canModifySearchable: true
                  canModifyUpdatable: true
            - virtualName: email
              origin:
                - inetorgperson_vds_o_companydirectory_primary
                - user_o_companydirectory_namespace
              isHidden: false
              canModifyHidden: true
              precedentAttributes:
                - name: mail
                  origin: inetorgperson_vds_o_companydirectory_primary
                  priority: NORMAL
                  isUpdatable: true
                  isSearchable: true
                  canModifySearchable: true
                  canModifyUpdatable: true
                - name: mail
                  origin: user_o_companydirectory_namespace
                  priority: NORMAL
                  isUpdatable: false
                  isSearchable: false
                  canModifySearchable: true
                  canModifyUpdatable: true
            - virtualName: sAMAccountName
              origin:
                - user_o_companydirectory_namespace
              isHidden: false
              canModifyHidden: true
              precedentAttributes:
                - name: sAMAccountName
                  origin: user_o_companydirectory_namespace
                  priority: NORMAL
                  isUpdatable: false
                  isSearchable: false
                  canModifySearchable: true
                  canModifyUpdatable: true
            - virtualName: lastName
              origin:
                - inetorgperson_vds_o_companydirectory_primary
                - user_o_companydirectory_namespace
              isHidden: false
              canModifyHidden: true
              precedentAttributes:
                - name: sn
                  origin: inetorgperson_vds_o_companydirectory_primary
                  priority: NORMAL
                  isUpdatable: true
                  isSearchable: true
                  canModifySearchable: true
                  canModifyUpdatable: true
                - name: sn
                  origin: user_o_companydirectory_namespace
                  priority: NORMAL
                  isUpdatable: false
                  isSearchable: false
                  canModifySearchable: true
                  canModifyUpdatable: true
            - virtualName: title
              origin:
                - inetorgperson_vds_o_companydirectory_primary
                - vdappemployees_myderby_northwind_external
              isHidden: false
              canModifyHidden: true
              precedentAttributes:
                - name: title
                  origin: inetorgperson_vds_o_companydirectory_primary
                  priority: NORMAL
                  isUpdatable: true
                  isSearchable: true
                  canModifySearchable: true
                  canModifyUpdatable: true
                - name: TITLE
                  origin: vdappemployees_myderby_northwind_external
                  priority: NORMAL
                  isUpdatable: false
                  isSearchable: false
                  canModifySearchable: true
                  canModifyUpdatable: true
          bindOrder:
            isDelegateAuth: true
            isCachePassword: true
            sources:
              - name: MAIN
                isEnabled: true
              - name: joinmyderby
                isEnabled: true
              - name: joinmyad
                isEnabled: false
          computedAttributes:
            - name: fullName
              active: true
              expression: FIRSTNAME + LASTNAME
          packagesAndClasses:
            - com.test.fake.MyFakeClass
            - com.test.fakepackage
    LinkPropertiesStdLink:
      value:
        viewName: address book
        linkType: STANDARD_LINK
        objectClass: "vdlabel # vdlink"
        datasource: rx500
        schema: advworks.orx
        virtualAttributes:
          - name: FIRSTNAME
            mappedName: givenName
          - name: LASTNAME
            mappedName: sn
    LinkPropertiesMergeLink:
      value:
        viewName: acsclient
        linkType: MERGE_LINK
        objectClass: "vdlabel # vdlink # vdmerge"
        datasource: acsclient
        baseDn: o=companydirectory
        linkParameters: users.created=@[:VARCHAR(80)]
        schema: acsclient.orx
        virtualAttributes:
          - name: FIRSTNAME
            mappedName: givenName
          - name: LASTNAME
            mappedName: sn
    ComputedAttributeFunctionArray:
      value:
        - name: addMultiValues
          description: add the values parsed, using the separator into the computed
            attribute
          example: 'addMultiValues("val1 ## val2 ## val3"," # #)'
          parameters:
            - name: values
              description: Values to add
              type: STRING
              required: true
            - name: separator
              description: Separator character
              type: STRING
              required: true
          isIncompatibleWithOtherFunctions: false
          hasBooleanReturn: false
          signature: addMultiValues(values,separator)
        - name: addValue
          description: add a value or the values of an attribute to the computed attribute
          example: addValue(val1);addValue(val2);addValue(attr1)
          parameters:
            - name: value
              description: Value to add
              type: STRING
              required: true
          isIncompatibleWithOtherFunctions: false
          hasBooleanReturn: false
          signature: addValue(value)
        - name: DNremapLookup
          description: Remap original DN attribute using a lookup.
          example: DNremapLookup(this.member,"cn=users,dc=mydomain","cn=groups,dc=mydomain","distinguishedName")
          parameters:
            - name: attr
              description: attribute containing the dn values to remap (i.e member or memberOf
                attribute
              type: ATTRIBUTE
              required: true
            - name: baseDN1
              description: location of users or groups.-can be null
              type: DN
              required: true
            - name: BaseDN2
              description: location of the groups or users.-can be null
              type: DN
              required: true
            - name: dnattr
              description: name of the attribute that contains the original DN to lookup
                for.For instance distinguidhedName or entryDN
              type: DN_ATTR
              required: true
          isIncompatibleWithOtherFunctions: false
          hasBooleanReturn: false
          signature: DNremapLookup(attr,baseDN1,baseDN2,dnAttr)
        - name: lookup
          description: Execute an LDAP lookup and returns the value(s) found.
          example: lookup("VDS","o=companydirectory",2,"(uid=me)","mail",1)
          parameters:
            - name: dataSourceID
              description: LDAP Data Source ID
              type: DATASOURCE_ID
              required: true
            - name: baseDn
              description: DN String constant or LDAP attribute from virtual entry
              type: DN
              required: false
            - name: scope
              description: Scope for query
              type: SCOPE
              required: true
            - name: filter
              description: LDAP Filter String
              type: LDAP_FILTER
              required: false
            - name: attrName
              description: String value
              type: STRING
              required: false
            - name: sizeLimit
              description: Positive Integer value
              type: POSITIVE_INT
              required: true
          isIncompatibleWithOtherFunctions: true
          hasBooleanReturn: false
          signature: lookup(dataSourceID, baseDn, scope,filter, attrName, sizeLimit)
        - name: has
          description: returns true if the attribute has a value
          example: has("123456789")
          parameters:
            - name: attributeValue
              description: LDAP attribute from virtual entry
              type: ATTRIBUTE
              required: true
          isIncompatibleWithOtherFunctions: false
          hasBooleanReturn: true
          signature: has(attributeValue)
    ComputedAttributeFunctionValue1:
      value:
        signature: addMultiValues(values,separator)
        values:
          - name: values
            value: "val1 ## val2 ## val3"
          - name: separator
            value: "#"
    ComputedAttributeFunctionValue2:
      value:
        signature: lookup(dataSourceID, baseDn, scope,filter, attrName, sizeLimit)
        values:
          - name: dataSourceID
            value: VDS
          - name: baseDn
            value: o=companydirectory
          - name: scope
            value: "2"
          - name: filter
            value: (uid=me)
          - name: attrName
            value: mail
          - name: sizeLimit
            value: "100"
    ComputedAttributeExpression:
      value:
        expression: 'addMultiValues("val1 ## val2 ## val3","##")'
    NewJoinProfileOptions:
      value:
        name: joinmyradiantonesource
        joinInputSource:
          id: my-ns-input-source
          name: my-ns-input-source
          sourceType: NAMESPACE_OBJECT
          dataSource: vds
          attributes:
            - name: cn
              virtualName: cn
              tags:
                - primaryKey
            - name: sn
              virtualName: sn
          targetBaseDn: o=companydirectory
          objectClass: user
          scope: SUB
          sizeLimit: 100
        joinCondition: (&(cn=@[audio:varchar])(objectclass=person))
        returnAttributes:
          - name: givenName
            virtualName: givenName
            tags:
              - primaryKey
          - name: sn
            virtualName: sn
        returnAllAttributes: false
    Join:
      value:
        joinId: joinemployeeid
        active: true
        order: 1
        source: inetOrgPerson
        attributes:
          - name: cn
            virtualName: cn
            source: Employees
          - name: employeeNumber
            virtualName: employeeNumber
            source: inetOrgPerson
        secondaryObject:
          dataSource: vds
          objectClass: inetOrgPerson
          targetBaseDn: o=companydirectory
          scope: SUB
          joinCondition: (&(employeeID=@[EMPLOYEEID:varchar])(objectclass=user))
        filter: ""
        sizeLimit: 100
        joinType: INNER
    JoinConditionObject:
      value:
        joinCondition: (&(employeeID=@[EMPLOYEEID:varchar])(objectclass=user))
    ValidateManualJoinStringResponse:
      value:
        isValid: true
        join:
          joinId: joinemployeeid
          order: 1
          source: inetOrgPerson
          attributes:
            - name: cn
              virtualName: cn
              source: Employees
            - name: employeeNumber
              virtualName: employeeNumber
              source: inetOrgPerson
          secondaryObject:
            dataSource: vds
            objectClass: inetOrgPerson
            targetBaseDn: o=companydirectory
            scope: SUB
            joinCondition: (&(employeeID=@[EMPLOYEEID:varchar])(objectclass=user))
          filter: ""
          sizeLimit: 100
          joinType: INNER
          returnAllAttributes: false
    GlobalInterceptionSettings:
      value:
        javaClassName: com.rli.scripts.intercept.globalIntercept
        preOperationInterceptOn:
          - SEARCH
          - SPECIAL_OPERATION
          - BIND
          - DELETE
        postOperationInterceptAfter:
          - PROCESS_SEARCH_RESULT_CODE
          - ADD
          - BIND
          - DELETE
          - COMPARE
    ExecuteResponse:
      value:
        isSuccessful: true
        message: Successfully executed script
    ConnectorDiagnostics:
      value:
        isConfigurable: true
        message: "Event-driven PCache refresh diagnostic for
          o\\u003ddb:\\no_db_pcache_xjoin__dv_o_opendj: a store/pcache is
          expected for dn\\u003d@,dv\\u003do_opendj: the joined view should be
          cached first."
    ConnectorList:
      value:
        - isConfigured: false
          dataSourceName: advworks
          name: employees
          type: DB_TIMESTAMP
          typeLabel: DB Timestamp
          connectorId: x6asuihs8h
    LabelProperties:
      value:
        rdnPrefix: Category
        rdnSuffix: Past Orders
        objectClasses:
          - vdlabel
        description: Some label description.
        virtualAttributes:
          - name: id
            mappedName:
              - userId
              - employeeId
          - name: givenName
            mappedName:
              - firstName
    VirtualTreeProperties_LDAP:
      value:
        directoryView: dv=rootdv
        isActive: true
        virtualAttributes:
          - name: id
            mappedName: userId
          - name: givenName
            mappedName: firstName
        baseDn: o=companyprofiles
    VirtualTreeProperties_DATABASE:
      value:
        directoryView: dv=derby
        isActive: true
        dataSourceName: derby
        virtualAttributes:
          - name: id
            mappedName: userId
          - name: givenName
            mappedName: firstName
    VirtualTreeProperties_CUSTOM:
      value:
        directoryView: dv=aws
        isActive: true
        dataSourceName: aws
        virtualAttributes:
          - name: id
            mappedName: userId
          - name: givenName
            mappedName: firstName
    Schema:
      value:
        name: myschema
        lastModified: 2021-01-30T09:30:00Z
        type: DATABASE
        dataSourceName: advworks
        publishToServer: true
        tables:
          - baseTable: CUSTOMERS
            candidateKeyName: PHONENUMBER
            candidateKeys:
              - FAXNUMBER
              - PHONENUMBER
            name: APP.CUSTOMERS
            objectClass: vdAPPCUSTOMERS
            owner: APP
            primaryKeys:
              - CUSTOMERID
              - EMAILADDRESS
            isTable: true
            parent: null
            fields:
              - name: CITY
                mappedAttrName: city
                nullable: true
                type: VARCHAR(255)
                tags:
                  - CUSTOMER
                  - APP
                  - CITY
                parent: null
          - baseTable: CUSTOMERSTATUS
            candidateKeyName: CLOSELEVEL
            candidateKeys:
              - CLOSELEVEL
            name: APP.CUSTOMERSTATUS
            objectClass: vdAPPCUSTOMERSTATUS
            owner: APP
            primaryKeys:
              - STATUSLEVEL
            isTable: false
            parent: null
            fields:
              - name: CUSTOMERID
                mappedAttrName: id
                nullable: false
                type: INTEGER
                tags:
                  - CUSTOMER
                  - APP
                  - ID
                parent: null
              - name: CITY
                mappedAttrName: city
                nullable: true
                type: VARCHAR(255)
                tags:
                  - CUSTOMER
                  - APP
                  - CITY
                parent: null
        relationships:
          - id: rel1
            dest: APP.ORDERS
            destAttrs:
              - CUSTOMERID
              - ORDERID
            source: APP.CUSTOMERS
            sourceAttrs:
              - CUSTOMERID
              - EMAILADDRESS
            parent: null
          - id: rel2
            dest: APP.ORDER_DETAILS
            destAttrs:
              - ORDERID
              - DATE
            source: APP.ORDERS
            sourceAttrs:
              - ORDERID
            parent: null
    SchemaManagerRelationshipNode:
      value:
        dn: APP.CUSTOMERS,APP.ORDERS
        rdn: APP.ORDERS
        type: VIEW
        primaryObject: Root
        secondaryObject: ORDERS(CUSTOMERID)
        children:
          - dn: APP.CUSTOMERS,APP.ORDERS,APP.EMPLOYEES
            rdn: APP.EMPLOYEES
            type: VIEW
            primaryObject: Root
            secondaryObject: EMPLOYEES(EMPLOYEEID)
            children: []
          - dn: APP.CUSTOMERS,APP.ORDERS,APP.ORDER_DETAILS
            rdn: APP.ORDER_DETAILS
            type: VIEW
            primaryObject: Root
            secondaryObject: ORDER_DETAILS(ORDERID)
            children: []
    AccessControlObj:
      value:
        enableAci: true
        allowAnonAccess: true
        allowRootUserImpersonateOthers: true
        bindReqPassword: true
        enableNestedGroups: true
        enableRootDseAci: true
    AciObj:
      value:
        aciId: 123456789
        name: sampleAci
        targetDn: o=examples
        targetScope: ONE
        targetFilter: ""
        includeTargetAttributes: true
        targetAttributes: null
        permsType: ALLOW
        loaOperator: =
        loaLevel: 1
        daysOfWeek:
          - MONDAY
          - FRIDAY
        timeRanges:
          - 1030-1230
          - 1945-0430
        applyUserDns:
          - self
          - parent
          - uid=Smith_John,ou=Accounting,o=companydirectory
        applyGroupDns:
          - cn=Workshops,ou=Groups,o=companydirectory
        applyIps:
          - 127.0.0.1
    AttributeEncryptionObj:
      value:
        encryptKeyInUse: true
        currentHdapCipher: AES128
        hdapAttrKeyExists: false
        currentLdifzCipher: AES256
        ldifzKeyExists: true
        secureLdifExport: true
        availableCiphers:
          - AES256
          - AES128
          - DES3
    AwsKmsSettingsGet:
      value:
        accessKeyIdExists: true
        accessKeySecretExists: false
        cmkRegion: us-east-2
        cmkAlias: alias/My_Master_Key
    AwsKmsSettingsPut:
      value:
        accessKeyId: tdfgr2rr444dd
        accessKeySecret: mySecret123
        cmkRegion: us-east-2
        cmkAlias: alias/My_Master_Key
    OidcProviderObj:
      value:
        enabled: true
        providerName: Google
        discoveryUrl: https://accounts.google.com/.custom/my_url
        authorizationEndpointUri: https://accounts.google.com/o/oauth2/v2/auth
        tokenEndpointUri: https://oauth2.googleapis.com/token
        clientId: cn=Directory Manager
        clientSecret: secret
        clientAuthenticationMethod: CLIENT_SECRET_POST
        oidcToFidUserMappings:
          - ${exp}
          - fakeDn??sub?(fakeAttr=${iss})
        requestedScopes:
          - openid
    OidcProviderListObj:
      value:
        enabled: true
        configurationName: My Google Oidc
        providerName: Google
        discoveryUrl: https://accounts.google.com/.custom/my_url
        authorizationEndpointUri: https://accounts.google.com/o/oauth2/v2/auth
        tokenEndpointUri: https://oauth2.googleapis.com/token
        clientId: cn=Directory Manager
        clientSecret: secret
        clientAuthenticationMethod: CLIENT_SECRET_POST
        oidcToFidUserMappings:
          - ${exp}
          - fakeDn??sub?(fakeAttr=${iss})
        requestedScopes:
          - openid
    OidcProviderList:
      value:
        - enabled: true
          configurationName: My Google Oidc
          providerName: Google
          discoveryUrl: https://accounts.google.com/.custom/my_url
          authorizationEndpointUri: https://accounts.google.com/o/oauth2/v2/auth
          tokenEndpointUri: https://oauth2.googleapis.com/token
          clientId: cn=Directory Manager
          clientSecret: secret
          clientAuthenticationMethod: CLIENT_SECRET_POST
          oidcToFidUserMappings:
            - ${exp}
            - fakeDn??sub?(fakeAttr=${iss})
          requestedScopes:
            - openid
        - enabled: false
          configurationName: custom_config_1
          providerName: Custom
          discoveryUrl: https://fakehost.com/.custom/my_url
          authorizationEndpointUri: https://accounts.google.com/o/oauth2/v2/auth
          tokenEndpointUri: https://oauth2.googleapis.com/token
          clientId: cn=Directory Manager
          clientSecret: null
          clientAuthenticationMethod: CLIENT_SECRET_POST
          oidcToFidUserMappings:
            - ${exp}
            - fakeDn??sub?(fakeAttr=${iss})
          requestedScopes:
            - openid
    OidcProviderLoginInfo:
      value:
        - configurationName: my Google config
          authority: https://accounts.google.com/o/oauth2
          clientId: clientName
          clientSecret: secret
          requestedScopes:
            - openid
        - configurationName: custom_conf_1
          authority: https://custom.com/o/oauth2
          clientId: clientName
          clientSecret: null
          requestedScopes:
            - openid
    EnabledOidcProviderLoginInfoExample:
      value:
        enabled: true
        authority: https://accounts.google.com/o/oauth2
        clientId: clientName
        clientSecret: secret
        requestedScopes:
          - openid
    DisabledOidcProviderLoginInfoExample:
      value:
        enabled: false
        authority: null
        clientId: null
        clientSecret: null
        requestedScopes: null
    GetScopesAndClaimsResponse:
      value:
        possibleRequestedScopes:
          - openid
          - all
        supportedClaims:
          - iss
          - aud
          - sub
          - email
    CertDetails:
      value:
        alias: cert1
        generalInfo: |-
          Performs Windows System Component Verification
           Performs Windows Hardware Driver Verification
           Allows data on disk to be encrypted
          ...
        issuedTo: cn=admin
        issuedBy: cn=admin
        validFrom: 2022-02-07
        validTo: 2032-02-19
        status: OK
        certificateProperties:
          - name: Version
            value: V3
            type: TYPE_V1_FIELDS_ONLY
          - name: Signature Algorithm
            value: SHA256withRSA
            type: TYPE_V1_FIELDS_ONLY
        certificationPath:
          - dn: cn=admin
            children:
              - dn: ou=eng,cn=admin
                children:
                  - dn: o=John Smith,ou=eng,cn=admin
                    children: []
                  - dn: o=Jane Doe,ou=eng,cn=admin
                    children: []
              - dn: ou=fake,cn=admin
                children: []
    ControlPanelBannerMessage:
      value:
        bannerText: Hello World
        bannerBackgroundColor: blue
        bannerTextColor: red
    ControlPanelMessageOfTheDay:
      value:
        messageTitle: Super important message
        messageContent: Be very very careful
        warning: true
        popup: false
  headers: {}
  links: {}
  parameters:
    AuthorizationHeader:
      name: Authorization
      in: header
      required: true
      schema:
        type: string
        description: Authorization header containing access token
    pipelineId:
      description: Required path parameter pipeline id.
      name: pipelineId
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/RequiredPipelineId"
    AccessTokenName:
      name: name
      in: path
      required: true
      description: Name of the access token
      example: Prod Service Account
      schema:
        type: string
        nullable: false
        minLength: 1
        maxLength: 1000
        description: The name of the access token
        example: Prod Service Account
        pattern: .*
    name:
      name: name
      in: path
      required: true
      description: name of the role
      example: engineering
      schema:
        type: string
        nullable: false
        minLength: 1
        maxLength: 1000
        description: the name of the role
        example: dev
        pattern: .*
    roleToClone:
      name: roleToClone
      in: query
      required: false
      description: The name of the role to clone. If this is non-null, all properties
        except name will be replaced in the request body.
      example: engineering
      schema:
        type: string
        maxLength: 1000
        description: the name of the role
        example: dev
        pattern: .*
        nullable: true
    username:
      name: username
      in: path
      required: true
      description: username of the user
      example: john_smith
      schema:
        type: string
        minLength: 1
        pattern: ^[a-zA-Z0-9_-]+$
        nullable: false
        maxLength: 1000
        description: A valid username
        example: myuser
    searchFilter:
      name: searchFilter
      in: query
      required: false
      description: case-insensitive search for users whose username or email contains
        the searchFilter
      schema:
        type: string
        maxLength: 1000
    roleName:
      name: roleName
      in: query
      required: false
      description: a role to filter users
      schema:
        type: string
        maxLength: 1000
        description: the name of the role
        example: dev
        pattern: .*
        nullable: true
    cursor:
      name: cursor
      in: query
      required: false
      description: Cursor for for fetching next page of items
      schema:
        type: string
        maxLength: 10000
    pageSize:
      name: pageSize
      in: query
      required: false
      description: Size limit for number of returned entries
      schema:
        type: integer
        format: int64
        minimum: 0
        maximum: 10000
        default: 50
    baseDn:
      name: baseDn
      in: path
      required: true
      description: DN of node
      x-radiantlogic-validation:
        distinguishedName: strict
      schema:
        type: string
        example: cn=config
        description: a valid dn
        nullable: false
        minLength: 1
        maxLength: 5000
    filter:
      name: filter
      in: query
      required: false
      description: LDAP search filter. If blank, no filter is applied to the search.
      schema:
        type: string
        maxLength: 500
    DataSourceName:
      name: name
      in: path
      required: true
      description: data source name as a string
      schema:
        type: string
        description: The given name of the data source
        nullable: false
        minLength: 1
        maxLength: 1000
        pattern: ^[a-zA-Z0-9_.$]+$
    activeOnly:
      name: activeOnly
      in: query
      required: false
      description: If true, only show active views; else, show all
      schema:
        type: boolean
        default: false
    dataSources:
      name: dataSources
      in: query
      required: true
      description: List of data sources to export
      schema:
        type: array
        items:
          type: string
          description: The given name of the data source
          nullable: false
          minLength: 1
          maxLength: 1000
          pattern: ^[a-zA-Z0-9_.$]+$
        minItems: 1
        maxItems: 100
        uniqueItems: true
    sortBy:
      name: sortBy
      in: query
      required: false
      description: Field to sort results by. Defaults to NAME.
      schema:
        type: string
        enum:
          - NAME
          - TYPE
          - ACTIVE
        default: NAME
    existingDataSource:
      name: existingDataSource
      in: path
      required: true
      description: Name of the data source to clone
      schema:
        type: string
        description: The given name of the data source
        nullable: false
        minLength: 1
        maxLength: 1000
        pattern: ^[a-zA-Z0-9_.$]+$
    newDataSourceName:
      name: newDataSourceName
      in: query
      required: true
      description: Name given to the cloned data source
      schema:
        type: string
        description: The given name of the data source
        nullable: false
        minLength: 1
        maxLength: 1000
        pattern: ^[a-zA-Z0-9_.$]+$
    type:
      name: type
      in: query
      required: false
      description: String used as a case-insensitive filter against the data source
        template type.
      schema:
        type: string
        maxLength: 500
        pattern: .*
    overrideExisting:
      name: overrideExisting
      in: query
      required: false
      description: If true, it will override (replace) the data source if it already exists.
      schema:
        type: boolean
        default: false
    useExistingCredentials:
      name: useExistingCredentials
      in: query
      required: false
      description: "If true, will use the existing data source password instead of
        what is in the request body. NOTE: Can only be used with ldap and db
        data sources"
      schema:
        type: boolean
        default: false
    schemaName:
      name: schemaName
      in: query
      required: true
      description: The name of the schema
      schema:
        type: string
        nullable: false
        maxLength: 500
        minLength: 1
        pattern: .*
    performOpOnSchemas:
      name: performOpOnSchemas
      in: query
      required: false
      description: true imports/exports data sources and associated schemas; false
        imports/exports only data sources
      schema:
        type: boolean
        default: true
    crossEnvironment:
      name: crossEnvironment
      in: query
      required: false
      description: If true, datasources will be exported/imported in cross-environment
        mode. If false, datasources will not be usable outside their original
        environment.
      schema:
        type: boolean
        default: true
    JdbcDriverName:
      name: name
      in: path
      required: true
      schema:
        type: string
        example: org.apache.derby.jdbc.ClientDriver
        maxLength: 1000
        pattern: .*
    importId:
      description: ID of a pending import operation
      name: importId
      in: path
      required: true
      schema:
        type: string
        maxLength: 500
        pattern: .*
    DataSourceTypeName:
      description: Name of data source type to retrieve meta for.
      name: name
      in: path
      required: true
      schema:
        type: string
        maxLength: 500
        pattern: .*
    pluginName:
      description: Name of plugin to use/get class names for.
      name: pluginName
      in: path
      required: true
      schema:
        type: string
        maxLength: 500
        pattern: .*
    MetaName:
      name: meta
      in: path
      required: true
      schema:
        type: string
        example: kafka
        maxLength: 1000
    PropertyName:
      name: property
      in: path
      required: true
      schema:
        type: string
        example: ssl_truststore_file
        maxLength: 1000
    PrivateFileName:
      name: filename
      in: path
      required: true
      schema:
        type: string
        example: file.txt
        maxLength: 1000
        pattern: ^.*\.[^\\]+$
    fileName:
      name: fileName
      in: path
      required: true
      description: LDIF file name.
      schema:
        type: string
        nullable: false
        pattern: ^[\w,\s-]+\.(?i)(ldif|ldifz)$
        maxLength: 500
        minLength: 1
    dn:
      name: dn
      in: path
      required: true
      description: DN of node.
      x-radiantlogic-validation:
        distinguishedName: strict
      schema:
        type: string
        example: cn=config
        description: a valid dn
        nullable: false
        minLength: 1
        maxLength: 5000
    LdapSearchFilter:
      name: filter
      in: query
      required: false
      description: LDAP search filter. If blank, no filter is applied to the search.
      schema:
        type: string
        maxLength: 5000
    scope:
      name: scope
      in: query
      required: false
      description: The scope of the search. BASE will return only the entry; ONE
        return entry and it's children; SUB returns the entire subtree. BASE
        search is the default.
      schema:
        $ref: "#/components/schemas/Scope"
    attributes:
      name: attributes
      in: query
      required: false
      description: The attributes to return for each entry. By default, all attributes
        will be returned.
      schema:
        type: array
        maxItems: 10000
        items:
          type: string
          nullable: false
          maxLength: 500
          minLength: 1
          pattern: .*
          description: a valid ldap attribute name
    hierarchical:
      name: hierarchical
      in: query
      required: false
      description: If true, return entries in a hierarchical (tree) format. Paging is
        not supported. Defaults to false.
      schema:
        type: boolean
        default: false
    DirectoryBrowserCursor:
      name: cursor
      in: query
      required: false
      description: Cursor from previous request; used for fetching the next page
        entries. For a given request, a cursor will not be returned if
        `hierarchical` is true, `pageSize` is not provided, or if there are no
        more results (ie, we have run out of pages).
      schema:
        type: string
        maxLength: 5000
    DirectoryBrowserPageSize:
      name: pageSize
      in: query
      required: false
      description: Page size for number of returned entries. If a value is not
        provided, all entries will be returned.
      schema:
        type: integer
        format: int64
        minimum: 0
        maximum: 100000
        default: 500
    deleteSubNodes:
      name: deleteSubNodes
      in: query
      required: false
      description: "If true, node and it's subtree will be deleted. Default value (if
        not provided in request) is false. NOTE: If value is false, node-only
        deletion will be attempted. If the node has any sub-nodes/children, an
        error will be thrown."
      schema:
        type: boolean
        default: false
    pagedSearchCookie:
      name: cookie
      in: query
      description: Cookie uniquely identifying the paging session to close.
      required: true
      schema:
        type: string
        nullable: false
        minLength: 1
        writeOnly: true
        maxLength: 2048
        pattern: ^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])=[^=].{1,24}$
        example: primary_server-east.localdomain=MTUyOTU3NDM4Mw==
    relaxed_dn:
      name: dn
      in: path
      required: true
      description: DN of node selected
      x-radiantlogic-validation:
        distinguishedName: relaxed
      schema:
        type: string
        example: cn=config
        description: a valid dn
        nullable: false
        minLength: 1
        maxLength: 5000
    strict_dn:
      name: dn
      in: path
      required: true
      description: DN of node selected
      x-radiantlogic-validation:
        distinguishedName: strict
      schema:
        type: string
        example: cn=config
        description: a valid dn
        nullable: false
        minLength: 1
        maxLength: 5000
    relationshipDn:
      name: relationshipDn
      in: path
      required: true
      description: DN of relationship node selected
      schema:
        type: string
        example: APP.EMPLOYEES,APP.ORDERS
        description: object/table name hierarchy path
        nullable: false
        minLength: 1
        maxLength: 5000
    DirectoryNamespaceSearchFilter:
      name: searchFilter
      in: query
      required: false
      description: String to filter results based on name and data sources
      schema:
        type: string
        maxLength: 1000
    DirectoryNamespaceActiveOnly:
      name: activeOnly
      in: query
      required: false
      description: If true/present, only show active views; else, show all
      schema:
        type: boolean
        default: false
    action:
      name: action
      in: query
      required: true
      description: Choose between configured or deconfigured connector scripts
      schema:
        type: string
        enum:
          - CONFIGURE
          - DECONFIGURE
        nullable: false
    datasources:
      name: datasources
      in: query
      required: false
      description: List of data sources to filter results
      schema:
        type: array
        items:
          type: string
          description: The given name of the data source
          nullable: false
          minLength: 1
          maxLength: 100
          pattern: ^[a-zA-Z0-9_.$]+$
    DirectoryNamespaceSortBy:
      name: sortBy
      in: query
      required: false
      description: Field to sort results by
      schema:
        type: string
        enum:
          - NAME
          - LAST_MODIFIED
        default: NAME
    sortOrder:
      name: sortOrder
      in: query
      required: false
      description: Sort in ascending or descending order
      schema:
        type: string
        enum:
          - ASC
          - DES
        default: ASC
    storedProcedureSchema:
      name: schema
      in: query
      required: false
      description: Schema name to filter stored procedures by.
      schema:
        type: string
        maxLength: 1000
    storedProcedureCatalog:
      name: catalog
      in: query
      required: false
      description: Catalog name to filter stored procedures by.
      schema:
        type: string
        maxLength: 1000
    storedProcedureParamSchema:
      name: schema
      in: query
      required: true
      description: Schema name of stored procedure to get parameters for.
      schema:
        type: string
        maxLength: 1000
        nullable: false
    storedProcedureParamName:
      name: name
      in: query
      required: true
      description: Name of stored procedure to get parameters for.
      schema:
        type: string
        maxLength: 1000
        nullable: false
    linkParameterAttrName:
      name: linkParameterAttrName
      in: query
      required: true
      description: Name of the link parameter attribute to get the link parameter
        string for.
      schema:
        type: string
        nullable: false
        maxLength: 500
        minLength: 1
        pattern: .*
        description: a valid ldap attribute name
    linkParameterAttrType:
      name: linkParameterAttrType
      in: query
      required: true
      description: Type of the link parameter attribute to get the link parameter
        string for.
      schema:
        type: string
        maxLength: 1000
        nullable: false
    typeFilter:
      name: typeFilter
      in: query
      required: false
      description: Type of node to filter node list by.
      schema:
        type: string
        nullable: true
        enum:
          - ACTIVE
          - OFFLINE
          - CACHE_NO_REFRESH
          - CACHE_PERIODIC
          - CACHE_REAL_TIME
          - NON_CACHED
          - STORES
    isRelatedObjectsOnly:
      name: isRelatedObjectsOnly
      in: query
      required: false
      description: Display only related objects
      schema:
        type: boolean
        default: true
    dynamicGroupDn:
      name: dynamicGroupDn
      in: query
      required: true
      description: Dynamic group DN to get format for
      x-radiantlogic-validation:
        distinguishedName: strict
      schema:
        type: string
        example: cn=config
        description: a valid dn
        nullable: false
        minLength: 1
        maxLength: 5000
    ldapFilter:
      name: ldapFilter
      in: query
      required: true
      description: LDAP filter string to validate
      schema:
        type: string
        nullable: false
        maxLength: 1000
    scriptName:
      name: scriptName
      in: path
      required: true
      description: Name of interception script
      schema:
        type: string
        nullable: false
        maxLength: 1000
        minLength: 1
    scriptDirectory:
      name: scriptDirectory
      in: query
      required: true
      description: Name of interception script directory
      schema:
        type: string
        nullable: false
        maxLength: 1000
        minLength: 1
    storedProcedureCallString:
      name: storedProcedureCall
      in: query
      required: true
      description: String stored procedure call to get parameters for
      schema:
        type: string
        nullable: false
        maxLength: 1000
    primaryObjectPathParam:
      name: primaryObjectPathParam
      in: path
      required: true
      description: Selected primary object
      schema:
        type: string
        nullable: false
        maxLength: 1000
        minLength: 1
        pattern: .*
        description: a valid object class
    secondaryObject:
      name: secondaryObject
      in: query
      required: true
      description: Join secondary object
      schema:
        type: string
        nullable: false
        maxLength: 1000
        minLength: 1
        pattern: .*
        description: a valid object class
    primaryJoinAttribute:
      name: primaryJoinAttribute
      in: query
      required: true
      description: Join primary attribute
      schema:
        type: string
        nullable: false
        maxLength: 500
        minLength: 1
        pattern: .*
        description: a valid ldap attribute name
    secondaryJoinAttribute:
      name: secondaryJoinAttribute
      in: query
      required: true
      description: Join secondary attribute
      schema:
        type: string
        nullable: false
        maxLength: 500
        minLength: 1
        pattern: .*
        description: a valid ldap attribute name
    joinCondition:
      name: joinCondition
      in: query
      required: true
      description: Join condition string to validate
      schema:
        type: string
        nullable: false
        maxLength: 1000
    packageClassName:
      name: packageClassName
      in: query
      required: true
      description: Package or class name to validate
      schema:
        type: string
        nullable: false
        maxLength: 1000
        minLength: 1
    computedAttributeName:
      name: computedAttributeName
      in: query
      required: true
      description: Computed attribute name to validate
      schema:
        type: string
        nullable: false
        maxLength: 500
        minLength: 1
        pattern: .*
        description: a valid ldap attribute name
    packageClassNamePathParam:
      name: packageClassNamePathParam
      in: path
      required: true
      description: Package or class name
      schema:
        type: string
        nullable: false
        maxLength: 1000
        minLength: 1
    advancedSettingsLibraryName:
      name: name
      in: path
      required: true
      description: Name of library jar
      schema:
        type: string
        nullable: false
        maxLength: 1000
        minLength: 1
      example: athirdlib.jar
    isOverwrite:
      name: isOverwrite
      in: query
      required: false
      description: Boolean to overwrite file
      schema:
        type: boolean
        default: false
      example: false
    connectorId:
      name: connectorId
      in: path
      required: true
      description: ID of a connector formed by concatenating the data source name and
        name with an underscore
      schema:
        type: string
        nullable: false
        maxLength: 1000
        minLength: 1
      example: advworks_employees
    viewName:
      name: name
      in: path
      required: true
      description: The name of the view to delete
      schema:
        type: string
        maxLength: 1000
        minLength: 1
        nullable: false
        pattern: .*
        description: a valid view file name (without extension)
      example: advworks-viewfile
    SizeLimit:
      name: sizeLimit
      description: The maximum number of results to return (non-paged).
      in: query
      required: false
      example: 100
      schema:
        type: integer
        format: int64
        minimum: 1
        default: 500
    PageSize:
      name: pageSize
      description: The maximum number of items to return per page. If unspecified, all
        items will be returned.
      in: query
      required: false
      example: 1000
      schema:
        type: integer
        format: int64
        maximum: 1000
        minimum: 1
    Filter:
      name: filter
      in: query
      required: false
      description: String used as a case-insensitive filter agaisnt the pk of the
        object. For an example, for data sources, the filter will be applied
        against the data source name.
      schema:
        type: string
    SortOrder:
      name: sortOrder
      in: query
      required: false
      description: Sort in ascending or descending order. Defaults to ASCENDING.
      schema:
        type: string
        enum:
          - ASCENDING
          - DESCENDING
    Limit:
      name: limit
      description: The maximum number of items to return per page.
      in: query
      required: false
      example: 1000
      schema:
        type: integer
        format: int64
        maximum: 10000
        minimum: 1
        default: 50
    Offset:
      name: offset
      description: The offset of the item at which to begin the response.
      in: query
      required: false
      example: 1000
      schema:
        type: integer
        format: int64
        default: 0
        minimum: 0
    objectClass:
      name: objectClass
      in: path
      required: true
      description: Object class name
      schema:
        type: string
        nullable: false
        maxLength: 500
        minLength: 1
        pattern: .*
        description: a valid object class
    includeSuperior:
      name: includeSuperior
      in: query
      required: false
      description: Indicates whether this endpoint should resolve superior
        objectclasses and include their attributes in the result
      schema:
        type: boolean
        default: false
    includeAllProperties:
      name: includeAllProperties
      in: query
      required: false
      description: Indicates whether the result should include all properties for each
        attribute or just their names
      schema:
        type: boolean
        default: false
    isUserDefined:
      name: isUserDefined
      in: query
      required: false
      description: Indicates whether this endpoint should sort attributes by user defined
      schema:
        type: boolean
        default: false
    attribute:
      name: attribute
      in: path
      required: true
      description: Attribute name
      schema:
        type: string
        nullable: false
        maxLength: 500
        minLength: 1
        pattern: .*
        description: a valid ldap attribute name
    DirectorySchemaFileName:
      name: fileName
      in: path
      required: true
      description: Directory schema file name
      schema:
        type: string
        nullable: false
        pattern: ^[\w,\s-]+\.(?i)(ldif|ldifz)$
        minLength: 1
        maxLength: 1000
    attributeObjectClasses:
      name: attributeObjectClasses
      in: query
      required: false
      description: List of object classes to get attributes for
      schema:
        type: array
        maxItems: 1000
        items:
          type: string
          nullable: false
          maxLength: 1000
          minLength: 1
          pattern: .*
          description: a valid object class
    SchemaManagerSchemaName:
      name: schemaName
      in: path
      required: true
      description: The name of a schema
      schema:
        type: string
        description: The name of the schema
        nullable: false
        maxLength: 500
        pattern: .*
    recursive:
      name: recursive
      in: query
      required: false
      description: Is relationship recursive
      schema:
        type: boolean
        default: false
    depth:
      name: depth
      in: query
      required: false
      description: Depth of recursion
      schema:
        type: number
        default: 1
        minimum: 0
        maximum: 50
    relationshipId:
      name: relationshipId
      in: path
      required: true
      description: The id of the relationships
      schema:
        type: string
        maxLength: 1000
        minLength: 1
        nullable: false
    tableName:
      name: tableName
      in: path
      required: true
      description: The name of a table/view
      schema:
        type: string
        description: Name of the table
        nullable: false
        minLength: 1
        maxLength: 500
        pattern: .*
    sourceTableName:
      name: sourceTableName
      in: path
      required: true
      description: The name of the source table/view to merge
      schema:
        type: string
        description: Name of the table
        nullable: false
        minLength: 1
        maxLength: 500
        pattern: .*
    SchemaManagerRelationshipDn:
      name: relationshipDn
      in: path
      required: true
      description: DN of relationship node selected
      schema:
        type: string
        example: APP.CUSTOMERS,APP.ORDERS
        description: a list of one or more table/object names making up a hierarchy path
        nullable: false
        minLength: 1
        maxLength: 5000
    baseDnRequired:
      name: baseDn
      description: A baseDn required for ACI location
      in: query
      required: true
      schema:
        type: string
        example: cn=config
        description: a valid dn
        nullable: false
        minLength: 1
        maxLength: 5000
        x-radiantlogic-validation:
          distinguishedName: strict
    baseDnOptional:
      name: baseDn
      description: A baseDn optional for ACI location
      in: query
      required: false
      schema:
        type: string
        example: cn=config
        description: a valid dn
        nullable: true
        maxLength: 5000
        x-radiantlogic-validation:
          distinguishedName: strict
    AttributeEncryptionUseExistingCredentials:
      name: useExistingCredentials
      in: query
      required: false
      description: If true, will use the existing aws secret. The secret in the
        request body will be ignored if this is true.
      schema:
        type: boolean
        default: false
    discoveryUrl:
      in: query
      name: discoveryUrl
      schema:
        type: string
        example: https://accounts.google.com/.well-known/openid-configuration
        maxLength: 1000
        minLength: 1
        format: uri
      required: true
      description: The discovery url of the chosen provider.
    configurationName:
      in: path
      name: configurationName
      schema:
        type: string
        nullable: false
        minLength: 1
        maxLength: 100
        pattern: ^[a-zA-Z0-9\s_-]+$
        example: myAppleConfig
      required: true
      description: The configurationName of an OIDC Provider configuration. This field
        is immutable after creation.
    OidcProviderUseExistingCredentials:
      name: useExistingCredentials
      in: query
      required: false
      description: If true, will use the existing clientSecret for each OIDC
        configuration. If the configuration exists, the clientSecret in the
        request body will be ignored. If the configuration is not found, then
        the secret in the request body will be used.
      schema:
        type: boolean
        default: false
    TaskId:
      name: id
      in: path
      description: The id of the task
      required: true
      schema:
        type: string
        example: e4ef6b3ec8828b74098acf63a94c458a869da8d63a70546d5f8c1a38fc48ed95
    PageNumber:
      name: pageNumber
      description: The page number to retrieve
      in: query
      required: false
      example: 10
      schema:
        type: integer
        format: int64
        minimum: 1
  requestBodies: {}
  responses:
    Unauthorized:
      description: The client is not authenticated or authorized to access this resource.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ClientError"
          example:
            status: 401
            code: unauthorized
            message: You are not authenticated/authorized to access this resource.
    Forbidden:
      description: The client does not have access rights to the resource.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ClientError"
          example:
            status: 403
            code: forbidden
            message: You do not have permission to access this resource.
    NotFound:
      description: The server cannot find the requested resource.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ClientError"
          example:
            status: 404
            code: not_found
            message: There is no such resource.
    Conflict:
      description: THe client request conflicts with the current state of the target
        resource.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ClientError"
          example:
            status: 409
            code: conflict
            message: The resource that a client tried to create already exists or there was
              a concurrency conflict.
    EntryStatisticsList:
      description: ""
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/EntryStatistics"
    RefreshOperation:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/RefreshOperation"
    Accepted:
      description: The request has been accepted for processing, but the processing
        has not been completed or started.
    EntryStatisticsNotFound:
      description: The server cannot find the requested refresh operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ClientError"
          example:
            status: 409
            code: not_found
            message: Refresh operation not found. It either did not exist or was deleted.
    EntryStatisticsConflict:
      description: The client request caused a concurrency conflict.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ClientError"
          example:
            status: 409
            code: conflict
            message: A new refresh operation cannot start while one is already running.
  schemas:
    PromotionOperationResponse:
      type: object
      description: The response provided when an auto-promotion operation is triggered.
      required:
        - timestamp
      properties:
        timestamp:
          $ref: "#/components/schemas/ReadOnlyDateTime"
    ConfigurationAutoPromotionState:
      type: string
      nullable: false
      description: The state of any auto-promotion operation on this IDDM instance.
      enum:
        - ACTIVE_EXPORT
        - ACTIVE_IMPORT
        - INACTIVE
    ConfigurationAutoPromotionStateResponse:
      type: object
      description: The state of any auto-promotion operation.
      required:
        - state
      properties:
        state:
          $ref: "#/components/schemas/ConfigurationAutoPromotionState"
    PromotionRevision:
      type: string
      nullable: true
      description: The identifier for a specific revision of the configuration being
        promoted. For successful promotions, there should always be a revision
        identifier.  For failed promotions, a revision identifier may or may not
        be present depending on the nature of the failure.
      pattern: "[a-zA-Z0-9]+"
    ConfigurationResourceType:
      type: string
      nullable: false
      description: The type of resource involved in a promotion.
      enum:
        - NAMING
        - NAMING_CACHE
        - DVX
        - ORX
        - DATASOURCE
        - CUSTOM
        - FILE
        - LDIF
        - SETTINGS
        - UNKNOWN
    ConfigurationAutoPromotionStatus:
      type: string
      nullable: false
      description: The status of an auto-promotion operation.
      enum:
        - SUCCESS
        - FAILURE
    ConfigurationAutoPromotionResource:
      type: object
      description: A resource that is a part of the auto-promotion workflow.
      required:
        - type
        - name
      properties:
        type:
          $ref: "#/components/schemas/ConfigurationResourceType"
        name:
          type: string
          nullable: false
        status:
          $ref: "#/components/schemas/ConfigurationAutoPromotionResourceStatus"
    ConfigurationAutoPromotionResourceStatus:
      description: The modification status of a resource.
      type: string
      nullable: true
      enum:
        - ADDED
        - MODIFIED
        - DELETED
    ConfigurationAutoPromotionErrorSource:
      description: The source of the specific error, ie which application it came from.
      type: string
      nullable: false
      enum:
        - FID
        - SETTINGS_SERVICE
    ConfigurationAutoPromotionError:
      type: object
      description: An error that occurred during an auto-promotion operation.
      nullable: true
      required:
        - message
        - source
      properties:
        message:
          type: string
          nullable: false
        source:
          $ref: "#/components/schemas/ConfigurationAutoPromotionErrorSource"
        type:
          type: string
          nullable: true
          pattern: "[a-zA-Z0-9\\.]+"
        stacktrace:
          type: array
          nullable: true
          maxItems: 10000
          items:
            type: string
            nullable: false
        cause:
          $ref: "#/components/schemas/ConfigurationAutoPromotionError"
    ConfigurationAutoExportReport:
      type: object
      description: A report that details what occurred during an auto-export operation.
      required:
        - timestamp
        - status
      properties:
        revision:
          $ref: "#/components/schemas/PromotionRevision"
        status:
          $ref: "#/components/schemas/ConfigurationAutoPromotionStatus"
        timestamp:
          $ref: "#/components/schemas/ReadOnlyDateTime"
        processedResources:
          type: array
          nullable: true
          maxItems: 1000
          items:
            $ref: "#/components/schemas/ConfigurationAutoPromotionResource"
        failedResources:
          type: array
          nullable: true
          maxItems: 1000
          items:
            $ref: "#/components/schemas/ConfigurationAutoPromotionResource"
        errors:
          type: array
          nullable: true
          maxItems: 1000
          items:
            $ref: "#/components/schemas/ConfigurationAutoPromotionError"
    ConfigurationAutoImportRequest:
      type: object
      description: The request to trigger an auto-import operation.
      required:
        - apply
      properties:
        apply:
          type: boolean
          nullable: false
          description: Whether to apply the changes or just do a dry-run.
    ConfigurationAutoImportReport:
      type: object
      required:
        - status
        - timestamp
        - applied
      properties:
        revision:
          $ref: "#/components/schemas/PromotionRevision"
        status:
          $ref: "#/components/schemas/ConfigurationAutoPromotionStatus"
        applied:
          type: boolean
          nullable: false
          description: Whether or not this import operation was applied, or if this is
            just a dry-run.
        exportRevisions:
          type: array
          nullable: true
          maxItems: 50
          items:
            $ref: "#/components/schemas/PromotionRevision"
        timestamp:
          $ref: "#/components/schemas/ReadOnlyDateTime"
        processedResources:
          type: array
          nullable: true
          maxItems: 1000
          items:
            $ref: "#/components/schemas/ConfigurationAutoPromotionResource"
        failedResources:
          type: array
          nullable: true
          maxItems: 1000
          items:
            $ref: "#/components/schemas/ConfigurationAutoPromotionResource"
        skippedResources:
          type: array
          nullable: true
          maxItems: 1000
          items:
            $ref: "#/components/schemas/ConfigurationAutoPromotionResource"
        fidRestartRequired:
          type: boolean
          nullable: false
          description: If true, then one or more configurations that were imported require
            an FID restart.
        datasourcesNeedingConnectionInfo:
          type: array
          description: During the import process, any new datasources will be imported
            without any connection info. This is because when moving between
            environments the underlying datasource system in question can be
            different. Any datasources listed here will need to have their
            connection info filled in before they are available for use.
          nullable: true
          maxItems: 1000
          items:
            $ref: "#/components/schemas/RequiredDataSourceName"
        impactedCaches:
          type: array
          description: During the import operation, caches may be added or modified, but
            the data inside the cache will not be touched. This means for new
            caches, they will have no data due to not having been initialized,
            and in modified caches the data may be stale. The caches in this
            list may need to be manually (re-)initialized to have accurate data.
          nullable: true
          maxItems: 1000
          items:
            type: string
            nullable: false
        globalSyncTopologiesNeedingConfig:
          type: array
          description: Any global sync topologies that use sensitive information like
            datasource credentials, that information will not be promoted. If
            they are in this list, the info must now be filled in manually.
          nullable: true
          maxItems: 10900
          items:
            type: string
            nullable: false
        errors:
          type: array
          nullable: true
          maxItems: 1000
          items:
            $ref: "#/components/schemas/ConfigurationAutoPromotionError"
    AutoPromotionReportList:
      type: array
      description: The names of the reports left by auto-import and auto-export operations.
      maxItems: 100
      items:
        type: object
        required:
          - timestamp
          - status
          - revision
        properties:
          revision:
            $ref: "#/components/schemas/PromotionRevision"
          timestamp:
            $ref: "#/components/schemas/ReadOnlyDateTime"
          status:
            $ref: "#/components/schemas/ConfigurationAutoPromotionStatus"
    ConfigurationPromotionSettingsResponse:
      type: object
      description: The settings for the configuration promotion feature.
      required:
        - auto
      properties:
        auto:
          type: object
          nullable: false
          description: The settings that apply to the auto mode.
          required:
            - enabled
            - state
          properties:
            state:
              $ref: "#/components/schemas/ConfigurationAutoPromotionState"
            enabled:
              type: boolean
              nullable: false
              description: Whether or not automatic mode is enabled. This depends entirely on
                specific IDDM environment configurations. All auto endpoints
                will fail without this enabled.
            promotionDataLocation:
              type: string
              nullable: true
              description: The location where the promotion data is stored outside of any IDDM
                environment.
            importFromEnvironment:
              type: string
              nullable: true
              description: The name of the environment within the data store where
                configurations to be imported to this IDDM are stored.
            exportToEnvironment:
              type: string
              nullable: true
              description: The name of the environment within the data store where this IDDM
                will export configurations to.
    NamingContextCacheMetadata:
      type: object
      description: Metadata for naming context cache.
      nullable: true
      required:
        - active
      properties:
        active:
          type: boolean
    SyncTopologyPart:
      type: string
      nullable: false
      description: Which end of the sync topology pipeline the current context
        represents - the source or the destination
      enum:
        - source
        - destination
    NamingContextSyncMetadata:
      type: object
      description: Metadata for naming context sync topology.
      nullable: true
      required:
        - active
        - syncPart
        - otherContext
      properties:
        active:
          type: boolean
          nullable: false
        syncPart:
          $ref: "#/components/schemas/SyncTopologyPart"
        otherContext:
          $ref: "#/components/schemas/RequiredDnStrict"
    NamingContextMetadata:
      type: object
      description: Metadata for naming contexts
      required:
        - dn
        - exists
      properties:
        dn:
          $ref: "#/components/schemas/RequiredDnStrict"
        exists:
          type: boolean
          nullable: false
          description: Whether or not the naming context exists already in the IDDM
            environment.
        datasources:
          type: array
          nullable: false
          maxItems: 1000
          description: Any datasources that this naming context depends on
          items:
            $ref: "#/components/schemas/RequiredDataSourceName"
        cache:
          $ref: "#/components/schemas/NamingContextCacheMetadata"
        syncPipelines:
          type: array
          maxItems: 1000
          nullable: false
          items:
            $ref: "#/components/schemas/NamingContextSyncMetadata"
        children:
          type: array
          nullable: false
          maxItems: 1000
          items:
            $ref: "#/components/schemas/NamingContextMetadata"
    ConnectorDiagnostics:
      type: object
      readOnly: true
      properties:
        isConfigurable:
          type: boolean
        message:
          type: string
    Connector:
      type: object
      readOnly: true
      properties:
        isConfigured:
          type: boolean
        dataSourceName:
          type: string
        name:
          type: string
        type:
          type: string
        typeLabel:
          type: string
        connectorId:
          type: string
    ConnectorType:
      type: object
      readOnly: true
      properties:
        name:
          type: string
        label:
          type: string
        configured:
          type: boolean
          default: false
        properties:
          type: array
          items:
            $ref: "#/components/schemas/ConnectorProp"
    ConnectorConfig:
      type: object
      properties:
        type:
          type: string
        properties:
          type: array
          items:
            $ref: "#/components/schemas/ConnectorProp"
      required:
        - properties
    ConnectorProp:
      type: object
      properties:
        name:
          type: string
        label:
          type: string
        description:
          type: string
        required:
          type: boolean
        type:
          $ref: "#/components/schemas/ConnectorPropType"
        value:
          type: string
        section:
          type: string
        editable:
          type: boolean
      required:
        - name
        - value
    ConnectorPropType:
      type: string
      enum:
        - STRING
        - NUMBER
        - BOOLEAN
        - LIST
        - PASSWORD
    RequiredPipelineId:
      type: string
      example: idg_graph_acme_userx
      description: Read only pipeline id.
      minLength: 3
      maxLength: 100
      pattern: ^[a-zA-Z0-9_]+_(pcache|pipeline|graph)_[a-zA-Z0-9_]+$
    RequiredDataSourceName:
      type: string
      description: The given name of the data source
      nullable: false
      minLength: 1
      maxLength: 1000
      pattern: ^[a-zA-Z0-9_.$]+$
    RequiredDnStrict:
      type: string
      example: cn=config
      description: a valid dn
      nullable: false
      minLength: 1
      maxLength: 5000
      x-radiantlogic-validation:
        distinguishedName: strict
    AccessToken:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/RequiredAccessTokenName"
        apiType:
          type: string
          nullable: false
          enum:
            - CONFIG
            - SCIM
            - REST
        roles:
          readOnly: true
          type: array
          maxItems: 100
          items:
            $ref: "#/components/schemas/RequiredRoleName"
          description: The list of roles associated with a service account. To update the
            list of roles, use the /users/{username}/roles endpoint.
        createdOn:
          type: string
          format: date-time
          readOnly: true
        expiresOn:
          type: string
          format: date-time
      required:
        - name
        - apiType
    RequiredAccessTokenName:
      type: string
      nullable: false
      minLength: 1
      maxLength: 1000
      description: the name of the access token
      example: Prod Service Account
      pattern: .*
    RequiredRoleName:
      type: string
      nullable: false
      minLength: 1
      maxLength: 1000
      description: the name of the role
      example: dev
      pattern: .*
    ClientError:
      description: Generic error response object.
      type: object
      properties:
        status:
          description: HTTP status code of the response.
          example: 400
          type: integer
          format: int32
          nullable: false
        code:
          description: RLI-specific error code
          type: string
          enum:
            - created
            - accepted
            - no_content
            - redirect
            - not_modified
            - bad_request
            - unauthorized
            - forbidden
            - not_found
            - method_not_allowed
            - conflict
            - precondition_failed
            - too_many_requests
            - internal_server_error
            - unavailable
            - item_name_invalid
            - insufficient_scope
            - unsupported_media_type
            - request_body_too_large
            - request_headers_too_large
            - request_uri_too_long
        message:
          description: A short message describing the error.
          example: Method Not Allowed
          type: string
          nullable: false
    DirectoryManagerSettings:
      type: object
      properties:
        userName:
          type: string
          nullable: false
          minLength: 1
          maxLength: 1000
        password:
          type: string
          nullable: false
        oldPassword:
          type: string
        allowedIps:
          type: array
          items:
            type: string
            nullable: false
            maxLength: 1000
      required:
        - userName
        - password
    SpecialGroups:
      type: object
      properties:
        specialUsersGroupDn:
          $ref: "#/components/schemas/RequiredDnStrict"
        administratorsGroupDn:
          $ref: "#/components/schemas/RequiredDnStrict"
      required:
        - specialUsersGroupDn
        - administratorsGroupDn
    GetRolesResponseItem:
      type: object
      properties:
        name:
          type: string
        defaultRole:
          type: boolean
    PermissionType:
      type: string
      enum:
        - NONE
        - VIEW
        - EDIT
      nullable: false
      default: NONE
    DataSourceOverride:
      type: object
      properties:
        dataSourceName:
          $ref: "#/components/schemas/RequiredDataSourceName"
        permission:
          $ref: "#/components/schemas/PermissionType"
      required:
        - dataSourceName
        - permission
    DataCatalogPermissions:
      type: object
      description: Any null permissions in create/update will default to NONE.
      properties:
        dataSourcesPermission:
          $ref: "#/components/schemas/PermissionType"
        dataSourceOverrides:
          type: array
          maxLength: 100
          items:
            $ref: "#/components/schemas/DataSourceOverride"
        templateManagementPermission:
          $ref: "#/components/schemas/PermissionType"
        globalRelationshipsPermission:
          $ref: "#/components/schemas/PermissionType"
        dataAssessmentPermission:
          $ref: "#/components/schemas/PermissionType"
    AdministrationPermissions:
      type: object
      description: Any null permissions in create/update will default to NONE.
      properties:
        userManagementPermission:
          $ref: "#/components/schemas/PermissionType"
        entryStatisticsPermission:
          $ref: "#/components/schemas/PermissionType"
        rolesPermission:
          $ref: "#/components/schemas/PermissionType"
        directoryManagerPermission:
          $ref: "#/components/schemas/PermissionType"
        controlPanelConfigPermission:
          $ref: "#/components/schemas/PermissionType"
        accessTokensPermission:
          $ref: "#/components/schemas/PermissionType"
    SecurityPermissions:
      type: object
      description: Any null permissions in create/update will default to NONE.
      properties:
        attributeEncryptionPermission:
          $ref: "#/components/schemas/PermissionType"
        accessControlPermission:
          $ref: "#/components/schemas/PermissionType"
    DirectoryNamespacePermissions:
      type: object
      description: Any null permissions in create/update will default to NONE.
      properties:
        namespaceDesignPermission:
          $ref: "#/components/schemas/PermissionType"
        directorySchemaPermission:
          $ref: "#/components/schemas/PermissionType"
    ClassicControlPanelPermission:
      type: object
      description: If access to the classic control panel is not updated, the
        assumeRole attribute will retain it's previous value. If access to the
        classic control panel is being enabled by setting enabled to true,
        whatever is provided in the assumeRole attribute will be applied. If
        access to the classic control panel is being disabled by setting enabled
        to false, assumeRole will be set to null.
      properties:
        enabled:
          type: boolean
          default: false
        assumeRole:
          type: string
          maxLength: 10000
          example: uid=aciadmin,ou=globalusers,cn=config
    ExportImportPermissions:
      type: object
      description: The permissions that control configuration export/import in IDDM.
      properties:
        exportEnabled:
          type: boolean
          default: false
          nullable: false
        importEnabled:
          type: boolean
          default: false
          nullable: false
    RoleDetails:
      type: object
      description: Any null permissions in create/update will default to NONE.
      properties:
        name:
          $ref: "#/components/schemas/RequiredRoleName"
        entryDn:
          $ref: "#/components/schemas/NullableDnStrict"
        defaultRole:
          type: boolean
          readOnly: true
        directoryBrowserPermission:
          $ref: "#/components/schemas/PermissionType"
        directoryNamespacePermissions:
          $ref: "#/components/schemas/DirectoryNamespacePermissions"
        identityManagerPermission:
          $ref: "#/components/schemas/PermissionType"
        securityPermissions:
          $ref: "#/components/schemas/SecurityPermissions"
        classicControlPanelPermission:
          $ref: "#/components/schemas/ClassicControlPanelPermission"
        tasksPermission:
          $ref: "#/components/schemas/PermissionType"
        settingsPermission:
          $ref: "#/components/schemas/PermissionType"
        globalSyncPermission:
          $ref: "#/components/schemas/PermissionType"
        observabilityPermission:
          $ref: "#/components/schemas/PermissionType"
        dashboardPermission:
          $ref: "#/components/schemas/PermissionType"
        revokeTokenPermission:
          type: boolean
        dataCatalogPermissions:
          $ref: "#/components/schemas/DataCatalogPermissions"
        administrationPermissions:
          $ref: "#/components/schemas/AdministrationPermissions"
        exportImportPermissions:
          $ref: "#/components/schemas/ExportImportPermissions"
      required:
        - name
    UserDetails:
      type: object
      properties:
        username:
          $ref: "#/components/schemas/RequiredUserName"
        password:
          type: string
          maxLength: 1000
          format: password
          description: For GET req, will be "" if password is set, null otherwise.
            Non-empty value required for POST reqs. If null for PUT reqs, then
            password will not change.
        firstName:
          type: string
          nullable: true
          maxLength: 1000
        lastName:
          type: string
          nullable: true
          maxLength: 1000
        email:
          type: string
          format: email
          maxLength: 10000
        active:
          type: boolean
          nullable: false
        roles:
          readOnly: true
          type: array
          maxItems: 100
          items:
            $ref: "#/components/schemas/RequiredRoleName"
          description: The list of roles associated with a user. To update the list of
            roles, use the /users/{username}/roles endpoint.
      required:
        - username
        - active
    GetUsersResponse:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: "#/components/schemas/UserDetails"
        cursor:
          type: string
        next:
          type: string
    NullableDnStrict:
      type: string
      example: cn=config
      description: a valid dn
      nullable: true
      maxLength: 5000
      x-radiantlogic-validation:
        distinguishedName: strict
    RequiredUserName:
      type: string
      minLength: 1
      pattern: ^[a-zA-Z0-9_-]+$
      nullable: false
      maxLength: 1000
      description: A valid username
      example: myuser
    Pagination:
      description: Pagination response object to track current page and page size.
      type: object
      properties:
        limit:
          type: integer
          format: int64
        offset:
          type: integer
          format: int64
    LinksWidgetItem:
      type: object
      properties:
        id:
          type: integer
          nullable: false
          minimum: 1
          description: id 1-10 are reserved for system use. Assign greater than (>) 10 for
            new links.
        headerImageType:
          type: string
          enum:
            - DEFAULT
            - NO_LOGO
            - ALTERNATE
          default: DEFAULT
        textOverlay:
          type: string
          maxLength: 10000
          nullable: false
        title:
          type: string
          maxLength: 5000
          nullable: false
        description:
          $ref: "#/components/schemas/NullableDescription"
        linkPath:
          type: string
          format: url
          nullable: false
          maxLength: 1000
      required:
        - textOverlay
        - title
        - linkPath
    ProductVersionWidget:
      type: object
      properties:
        installDate:
          type: string
          format: date-time
        expireDate:
          type: string
          format: date-time
          description: the date the subscription to the product expires
        version:
          type: string
    ServiceSummaryWidget:
      type: object
      properties:
        dataSources:
          $ref: "#/components/schemas/DataSourcesServiceSummary"
        namingContexts:
          $ref: "#/components/schemas/NamingContextsServiceSummary"
        caches:
          $ref: "#/components/schemas/CachesServiceSummary"
    DataSourcesServiceSummary:
      type: object
      properties:
        ldap:
          type: integer
        database:
          type: integer
        other:
          type: integer
    NamingContextsServiceSummary:
      type: object
      properties:
        active:
          type: integer
        inactive:
          type: integer
    CachesServiceSummary:
      type: object
      properties:
        inactive:
          type: integer
        none:
          type: integer
        periodic:
          type: integer
        realTime:
          type: integer
    DashboardItem:
      type: object
      properties:
        type:
          type: string
          description: Name of the widget
          enum:
            - PRODUCT_VERSION
            - LINKS
            - SERVICE_SUMMARY
            - WHATS_NEW
        widgetUrl:
          type: string
          format: uri
          description: The url to fetch the widget information from
          readOnly: true
        layout:
          $ref: "#/components/schemas/Layout"
      required:
        - type
    Layout:
      type: object
      description: The layout info for the widget; will be null if widget is not
        currently on the dashboard.
      nullable: true
      required:
        - x
        - y
        - w
        - h
      properties:
        x:
          type: integer
          description: the position on the x-axis
          minimum: -1
          maximum: 11
          nullable: false
        y:
          type: integer
          description: the position on the y-axis
          minimum: -1
          maximum: 50
          nullable: false
        w:
          type: integer
          description: the width of the widget
          minimum: -1
          maximum: 12
          nullable: false
        h:
          type: integer
          description: the height of the widget
          minimum: -1
          maximum: 50
          nullable: false
        draggable:
          type: boolean
          description: can the widget be moved
          readOnly: true
    WhatNewWidgetItem:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        linkText:
          type: string
        linkUrl:
          type: string
          format: url
        imageUrl:
          type: string
          format: uri
    PreviewAbstractLdapDataSource:
      type: object
      properties:
        existingDataSource:
          type: boolean
          nullable: false
        ssl:
          type: boolean
          example: false
          nullable: true
        password:
          type: string
          example: password123
          maxLength: 500
          nullable: true
        groupId:
          $ref: "#/components/schemas/NullableGroupId"
      required:
        - existingDataSource
    PreviewExistingLdapDataSource:
      allOf:
        - $ref: "#/components/schemas/PreviewAbstractLdapDataSource"
        - type: object
          properties:
            dataSourceName:
              $ref: "#/components/schemas/RequiredDataSourceName"
            host:
              $ref: "#/components/schemas/NullableHostName"
            port:
              type: integer
              format: int32
              minimum: 1
              maximum: 65535
              nullable: true
            bindDn:
              type: string
              example: cn=DirectoryManager
              maxLength: 500
              nullable: true
              minLength: 1
          required:
            - dataSourceName
    PreviewNewLdapDataSource:
      allOf:
        - $ref: "#/components/schemas/PreviewAbstractLdapDataSource"
        - type: object
          properties:
            host:
              $ref: "#/components/schemas/RequiredHostName"
            port:
              $ref: "#/components/schemas/RequiredPortInt"
            bindDn:
              type: string
              example: cn=DirectoryManager
              maxLength: 500
              nullable: false
              minLength: 1
          required:
            - host
            - port
            - bindDn
    PreviewLdapDataSource:
      description: Information for the ldap data source to connect to.  Either an
        existing ldap data source name or the connection info for a new ldap
        data source.
      oneOf:
        - $ref: "#/components/schemas/PreviewExistingLdapDataSource"
        - $ref: "#/components/schemas/PreviewNewLdapDataSource"
      discriminator:
        propertyName: existingDataSource
        mapping:
          "true": "#/components/schemas/PreviewExistingLdapDataSource"
          "false": "#/components/schemas/PreviewNewLdapDataSource"
    PreviewBaseDnResponse:
      type: object
      properties:
        dn:
          type: string
        rdn:
          type: string
    searchObjectsResponse:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        type:
          type: string
        active:
          type: boolean
        objects:
          type: array
          items:
            type: string
          description: The list of object names matching the objectFilter
        createdOn:
          $ref: "#/components/schemas/ReadOnlyDateTime"
        category:
          $ref: "#/components/schemas/DataSourceCategory"
    genericDataSource:
      type: object
      oneOf:
        - $ref: "#/components/schemas/ldapDataSource"
        - $ref: "#/components/schemas/databaseDataSource"
        - $ref: "#/components/schemas/customDataSource"
      discriminator:
        propertyName: category
        mapping:
          ldap: "#/components/schemas/ldapDataSource"
          database: "#/components/schemas/databaseDataSource"
          custom: "#/components/schemas/customDataSource"
    DataSourceCategory:
      $ref: "#/components/schemas/RequiredDataSourceCategory"
    dataSource:
      description: This is the parent schema for all datasource types.
      type: object
      properties:
        name:
          $ref: "#/components/schemas/RequiredDataSourceName"
        category:
          $ref: "#/components/schemas/DataSourceCategory"
        type:
          $ref: "#/components/schemas/RequiredTemplateName"
        createdOn:
          $ref: "#/components/schemas/ReadOnlyDateTime"
        active:
          type: boolean
          nullable: true
          default: true
        readOnly:
          type: boolean
          example: false
          nullable: true
          default: false
        description:
          $ref: "#/components/schemas/NullableDescription"
        defaultSchema:
          $ref: "#/components/schemas/NullableSchemaName"
        addedSchemas:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/RequiredSchemaName"
          uniqueItems: true
          maxItems: 1000
        groupId:
          $ref: "#/components/schemas/NullableGroupId"
      required:
        - name
        - type
        - category
    ldapDataSource:
      description: LDAP data source
      allOf:
        - $ref: "#/components/schemas/dataSource"
        - type: object
          properties:
            host:
              $ref: "#/components/schemas/RequiredHostName"
            port:
              $ref: "#/components/schemas/RequiredPortInt"
            ssl:
              type: boolean
              example: false
              nullable: true
              default: true
            bindDn:
              type: string
              example: cn=DirectoryManager
              maxLength: 500
              nullable: false
              minLength: 1
            password:
              type: string
              example: password123
              description: For GET req, will be "" if password is set, null otherwise.
              format: password
              maxLength: 500
              nullable: true
            baseDn:
              $ref: "#/components/schemas/NullableDnStrict"
            pagedResultsControl:
              type: boolean
              example: true
              nullable: true
              default: false
            pageSize:
              type: integer
              example: 100
              minimum: 0
              default: 500
              maximum: 100000
              nullable: true
            chaseReferrals:
              type: boolean
              example: false
              nullable: true
              default: false
            dbmsName:
              type: string
              nullable: true
              readOnly: true
              example: AD2008
            failovers:
              type: array
              nullable: true
              maxItems: 100
              items:
                $ref: "#/components/schemas/dataSourceFailOver"
              example:
                - host: 10.11.12.123
                  port: 3000
                  ssl: false
                - host: 10.11.12.789
                  port: 7070
                  ssl: true
            verifySslHostname:
              type: boolean
              example: true
              nullable: true
              default: false
            kerberosProfile:
              type: string
              example: vds_krb5
              maxLength: 500
              nullable: true
            sdcMappings:
              type: object
              additionalProperties:
                $ref: "#/components/schemas/SDCMapping"
              maxItems: 100
          required:
            - bindDn
            - host
            - port
    databaseDataSource:
      allOf:
        - $ref: "#/components/schemas/dataSource"
        - type: object
          properties:
            driverClassName:
              $ref: "#/components/schemas/RequiredDriverClassName"
            url:
              $ref: "#/components/schemas/RequiredUrl"
            username:
              type: string
              example: appUser
              nullable: false
              maxLength: 500
            password:
              type: string
              example: password123
              description: For GET req, will be "" if password is set, null otherwise.
              format: password
              nullable: true
              maxLength: 500
            failOverName:
              type: string
              example: log2db
              nullable: true
              maxLength: 500
            dbmsName:
              type: string
              nullable: true
              readOnly: true
              example: Microsoft SQL Server
            onPremHost:
              $ref: "#/components/schemas/NullableHostName"
            onPremPort:
              $ref: "#/components/schemas/NullablePortInt"
            sdcMappings:
              type: object
              additionalProperties:
                $ref: "#/components/schemas/SDCMapping"
              maxItems: 100
          required:
            - driverClassName
            - url
            - username
    customDataSource:
      allOf:
        - $ref: "#/components/schemas/dataSource"
        - type: object
          properties:
            customProps:
              type: object
              nullable: false
              minProperties: 1
              additionalProperties:
                type: string
              example:
                url: https://fakeurl.com
                fakeProp: fakePropVal
              description: Map<String, String> containing custom properties and their values
            onPremHost:
              $ref: "#/components/schemas/NullableHostName"
            onPremPort:
              $ref: "#/components/schemas/NullablePortInt"
          required:
            - customProps
    dataSourceFailOver:
      description: Failovers for dataSources
      type: object
      nullable: false
      properties:
        host:
          $ref: "#/components/schemas/RequiredHostName"
        port:
          $ref: "#/components/schemas/RequiredPortInt"
        ssl:
          type: boolean
          nullable: true
          default: true
        groupId:
          $ref: "#/components/schemas/RequiredGroupId"
      required:
        - host
        - port
    getDataSourcesReturnObj:
      type: object
      properties:
        totalItems:
          type: integer
        totalPages:
          type: integer
        currentPage:
          type: integer
        result:
          type: array
          items:
            $ref: "#/components/schemas/genericDataSource"
    testConnectionResults:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
          description: If connection fails, this property will give the reason for
            connection failure.
          nullable: true
      required:
        - success
    DatabaseObject:
      type: object
      properties:
        name:
          type: string
        type:
          type: string
          enum:
            - TABLE
            - VIEW
      required:
        - name
        - type
    BaseDatabaseTablesRequestInfo:
      type: object
      properties:
        schemaName:
          $ref: "#/components/schemas/NullableSchemaName"
        tablePattern:
          type: string
          nullable: true
          maxLength: 500
        includeTables:
          type: boolean
          default: true
        includeViews:
          type: boolean
          default: true
        includeSystemTables:
          type: boolean
          default: false
        includeSynonyms:
          type: boolean
          default: false
        existingDataSource:
          type: boolean
          nullable: false
      required:
        - existingDataSource
    DataSourceNameDatabaseTablesRequestInfo:
      allOf:
        - $ref: "#/components/schemas/BaseDatabaseTablesRequestInfo"
        - type: object
          properties:
            dataSourceName:
              $ref: "#/components/schemas/RequiredDataSourceName"
      required:
        - dataSourceName
    DataSourceConnInfoDatabaseTablesRequestInfo:
      allOf:
        - $ref: "#/components/schemas/BaseDatabaseTablesRequestInfo"
        - type: object
          properties:
            driverClassName:
              $ref: "#/components/schemas/RequiredDriverClassName"
            url:
              $ref: "#/components/schemas/RequiredUrl"
            username:
              type: string
              example: appUser
              maxLength: 500
            password:
              type: string
              example: password123
              format: password
              nullable: true
              maxLength: 500
            groupId:
              $ref: "#/components/schemas/NullableGroupId"
            onPremHost:
              $ref: "#/components/schemas/NullableHostName"
            onPremPort:
              $ref: "#/components/schemas/NullablePortInt"
      required:
        - driverClassName
        - url
    DatabaseTablesRequestInfo:
      oneOf:
        - $ref: "#/components/schemas/DataSourceNameDatabaseTablesRequestInfo"
        - $ref: "#/components/schemas/DataSourceConnInfoDatabaseTablesRequestInfo"
      discriminator:
        propertyName: existingDataSource
        mapping:
          "true": "#/components/schemas/DataSourceNameDatabaseTablesRequestInfo"
          "false": "#/components/schemas/DataSourceConnInfoDatabaseTablesRequestInfo"
    SDCGroup:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/RequiredGroupId"
        name:
          $ref: "#/components/schemas/RequiredGroupName"
      required:
        - id
        - name
    SDCMapping:
      type: object
      properties:
        host:
          $ref: "#/components/schemas/RequiredHostName"
        port:
          $ref: "#/components/schemas/RequiredPortInt"
        groupId:
          $ref: "#/components/schemas/RequiredGroupId"
      required:
        - host
        - port
    OperationResult:
      description: Represents partial success for 2xx responses that need to report
        errors in the response body.
      type: object
      properties:
        errors:
          description: List of errors reported during the data source import.
          type: array
          nullable: false
          readOnly: true
          items:
            $ref: "#/components/schemas/OperationError"
      required:
        - errors
    OperationError:
      description: Object for reporting errors during resource import and export operations.
      type: object
      properties:
        resourceName:
          description: Name of the resource being imported/exported when error occurred.
          type: string
          nullable: false
          default: ""
        resourceType:
          description: Type of resource being imported/exported when error occurred.
          type: string
          nullable: false
          default: ""
        errorMessage:
          type: string
          nullable: false
          default: ""
      required:
        - resourceName
        - resourceType
        - errorMessage
    DriverFile:
      type: object
      properties:
        name:
          type: string
        driverClass:
          type: string
          nullable: true
      required:
        - name
    DriverFileClassName:
      type: object
      properties:
        driverClass:
          $ref: "#/components/schemas/RequiredDriverClassName"
      required:
        - driverClass
    BackendCategory:
      $ref: "#/components/schemas/RequiredDataSourceCategory"
    AbstractDataSourceType:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/RequiredTemplateName"
        description:
          $ref: "#/components/schemas/NullableDescription"
        backendCategory:
          $ref: "#/components/schemas/BackendCategory"
        userCreated:
          readOnly: true
          type: boolean
          description: If true, this data source type is a built-in part of Radiant One.
          example: false
        readOnly:
          readOnly: true
          type: boolean
          description: If true, this data source type cannot be modified directly by
            client requests because it is built-in from Radiant One, or
            predefined in a plugin.
        icon:
          type: string
          example: /activedirectory.svg
          maxLength: 500
          nullable: true
      required:
        - name
        - backendCategory
    LdapDataSourceType:
      description: The information associated with a specific data source type
      allOf:
        - $ref: "#/components/schemas/AbstractDataSourceType"
        - type: object
          properties:
            isLdap:
              type: boolean
            meta:
              readOnly: true
              type: array
              items:
                $ref: "#/components/schemas/MetadataProperty"
              nullable: false
              maxItems: 100
          required:
            - isLdap
    DatabaseDataSourceType:
      description: The information associated with a specific data source type
      allOf:
        - $ref: "#/components/schemas/AbstractDataSourceType"
        - type: object
          properties:
            driverClass:
              $ref: "#/components/schemas/RequiredDriverClassName"
            urlPattern:
              type: string
              nullable: false
              minLength: 1
              maxLength: 500
            meta:
              readOnly: true
              type: array
              items:
                $ref: "#/components/schemas/MetadataProperty"
              nullable: false
              maxItems: 100
          required:
            - driverClass
            - urlPattern
    CustomDataSourceType:
      description: The information associated with a specific data source type
      allOf:
        - $ref: "#/components/schemas/AbstractDataSourceType"
        - type: object
          properties:
            pluginName:
              $ref: "#/components/schemas/NullablePluginName"
            javaClassName:
              type: string
              nullable: false
              maxLength: 500
              pattern: .*
            isSchemaExtractable:
              type: boolean
              readOnly: true
            meta:
              type: array
              items:
                $ref: "#/components/schemas/MetadataProperty"
              nullable: true
              maxItems: 100
          required:
            - javaClassName
    DataSourceType:
      oneOf:
        - $ref: "#/components/schemas/LdapDataSourceType"
        - $ref: "#/components/schemas/DatabaseDataSourceType"
        - $ref: "#/components/schemas/CustomDataSourceType"
      discriminator:
        propertyName: backendCategory
        mapping:
          ldap: "#/components/schemas/LdapDataSourceType"
          database: "#/components/schemas/DatabaseDataSourceType"
          custom: "#/components/schemas/CustomDataSourceType"
    MetadataProperty:
      title: metaDataProperty
      type: object
      properties:
        name:
          type: string
          example: url
          minLength: 1
          maxLength: 500
          pattern: .*
          nullable: false
        description:
          $ref: "#/components/schemas/NullableDescription"
        sectionName:
          type: string
          description: An optional section name under which the property will appear on
            the data source details form
          example: Authentication
          maxLength: 500
          nullable: true
        defaultValue:
          type: string
          example: com.rli.scripts.customobjects.acsclient
          maxLength: 500
          nullable: true
        dataType:
          type: string
          enum:
            - STRING
            - PASSWORD
            - BOOLEAN
            - NUMBER
            - FILE
            - LIST
          nullable: false
        isRequired:
          type: boolean
          example: false
          nullable: true
          default: false
        accept:
          type: object
          nullable: true
          description: Provide a pattern for file uploads. This allows restrictions on
            specific types of file uploads.
          additionalProperties:
            type: array
            items:
              type: string
              pattern: ^\.[a-zA-Z0-9]+$
          example:
            application/java-archive:
              - .jar
              - .war
              - .ear
            application/pdf:
              - .pdf
            image/jpeg:
              - .jpg
              - .jpeg
            image/png:
              - .png
            application/json:
              - .json
            text/plain:
              - .txt
            application/x-java-keystore:
              - .jks
              - .keystore
            application/octet-stream:
              - .bin
              - .exe
              - .dll
            application/zip:
              - .zip
              - .rar
            text/csv:
              - .csv
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
              - .xlsx
        hiddenBy:
          type: string
          nullable: true
          example: fieldName
        hidden:
          type: boolean
          nullable: true
          default: false
        readOnly:
          type: boolean
          nullable: true
          default: false
        regex:
          type: string
          description: Validate the values entered for the property
          example: /^[a-z]/i
          nullable: true
          maxLength: 500
      required:
        - name
        - dataType
    IsLoadedRequestBody:
      type: object
      properties:
        className:
          $ref: "#/components/schemas/RequiredDriverClassName"
      required:
        - className
    IsLoadedResponse:
      type: object
      properties:
        isLoaded:
          type: boolean
      required:
        - isLoaded
    Template:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/RequiredTemplateName"
        backendCategory:
          $ref: "#/components/schemas/BackendCategory"
        icon:
          type: string
          maxLength: 500
          nullable: false
          minLength: 1
        readOnly:
          type: boolean
          description: If true, this template is loaded from a plugin and cannot be
            directly modified.
      required:
        - name
        - type
        - icon
    TemplatePlugin:
      type: object
      readOnly: true
      properties:
        name:
          type: string
          maxLength: 500
          pattern: .*
          nullable: false
          minLength: 1
        isConflicting:
          readOnly: true
          type: boolean
          description: If true, this plugin is not currently importable due to conflict
            with existing plugins
        requiredBy:
          type: array
          description: Metas listed here require this plugin to operate; Importing any of
            them will cause this plugin to be imported
          items:
            type: string
          maxItems: 100
          uniqueItems: true
        autoIncludes:
          type: array
          description: Metas listed here will automatically be imported if this plugin is.
          items:
            type: string
          maxItems: 100
          uniqueItems: true
      required:
        - name
    TemplateJdbcDriver:
      type: object
      readOnly: true
      properties:
        name:
          type: string
          maxLength: 500
          nullable: false
          minLength: 1
        driverClass:
          $ref: "#/components/schemas/RequiredDriverClassName"
        isConflicting:
          readOnly: true
          type: boolean
          description: If true, this driver cannot currently be imported due to conflicts
            with existing drivers.
        requiredBy:
          type: array
          items:
            type: string
          maxItems: 100
          uniqueItems: true
          description: Metas listed here require this driver to operate; importing any of
            them will import this driver automatically.
      required:
        - name
        - driverClass
    TemplateContents:
      type: object
      readOnly: true
      properties:
        newTemplates:
          type: array
          description: Metas in the upload that are currently importable
          items:
            $ref: "#/components/schemas/Template"
          maxItems: 500
        conflictingTemplates:
          type: array
          description: Metas in the upload that are not currently importable due to
            conflicts w/existing metas
          items:
            $ref: "#/components/schemas/Template"
          maxItems: 500
        plugins:
          type: array
          description: Plugin jars contained in the upload
          items:
            $ref: "#/components/schemas/TemplatePlugin"
          maxItems: 500
        jdbc_drivers:
          type: array
          description: JDBC drivers contained in the upload
          items:
            $ref: "#/components/schemas/TemplateJdbcDriver"
          maxItems: 500
        expiration:
          $ref: "#/components/schemas/ReadOnlyDateTime"
        id:
          type: string
          description: Unique identifier for this pending import operation
          maxLength: 100
          nullable: false
          minLength: 1
      required:
        - newTemplates
        - conflictingTemplates
        - plugins
        - jdbc_drivers
        - expiration
        - id
    SelectedTemplates:
      type: object
      properties:
        templates:
          type: array
          items:
            type: string
          nullable: false
          minItems: 1
          maxItems: 100
          uniqueItems: true
      required:
        - templates
    FileOperationCode:
      type: string
      description: Operational code for the file operation.
      nullable: false
      default: NO_OP
      enum:
        - SUCCESS
        - UPLOAD_ERROR
        - DELETE_ERROR
        - INTERNAL_ERROR
        - NO_OP
    PrivateBinaryFile:
      type: object
      description: File we are uploading into the private files directory.
      properties:
        file:
          type: string
          format: binary
    FileOperationResult:
      description: Represents a file upload response.
      type: object
      properties:
        path:
          type: string
          description: The path of the file operation.
          nullable: false
          default: ""
        message:
          type: string
          nullable: true
        opcode:
          $ref: "#/components/schemas/FileOperationCode"
    Attributes:
      type: array
      items:
        $ref: "#/components/schemas/RequiredAttribute"
      nullable: true
      uniqueItems: true
      maxItems: 10000
      default: []
    SearchHistoryEntry:
      type: object
      properties:
        dn:
          $ref: "#/components/schemas/NullableDnStrict"
        filter:
          type: string
          maxLength: 1000
        scope:
          $ref: "#/components/schemas/Scope"
        attributes:
          $ref: "#/components/schemas/Attributes"
        maxEntries:
          type: integer
          nullable: true
          format: int64
          minimum: 0
          maximum: 100000
        timeout:
          type: integer
          nullable: true
          format: int64
          minimum: 0
          maximum: 1000
      required:
        - dn
        - scope
    LaunchedTask:
      type: object
      properties:
        taskId:
          type: string
      required:
        - taskId
    Entry:
      type: object
      properties:
        dn:
          $ref: "#/components/schemas/NullableDnStrict"
        rdn:
          $ref: "#/components/schemas/NullableRdnStrict"
        attributes:
          type: array
          items:
            $ref: "#/components/schemas/Attribute"
          nullable: true
          uniqueItems: true
          maxItems: 10000
          default: []
        children:
          type: array
          items:
            $ref: "#/components/schemas/Entry"
          nullable: true
          uniqueItems: true
          maxItems: 10000
          default: []
      required:
        - dn
    EntryResponse:
      type: object
      properties:
        nodes:
          type: array
          items:
            $ref: "#/components/schemas/Entry"
        cursor:
          type: string
          nullable: true
          description: The cursor value returned by the server. This value can be used in
            subsequent requests to fetch the next page of results. For a given
            request, a cursor will not be returned if if `hierarchical` is true,
            `pageSize` is not provided, or if there are no more results (ie, we
            have run out of pages).
        next:
          type: string
          nullable: true
          description: A url that can be used to fetch the next page of results.
      required:
        - nodes
    Attribute:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/RequiredAttribute"
        values:
          type: array
          items:
            type: string
            maxLength: 1000
            minLength: 1
            nullable: false
          maxItems: 10000
      required:
        - name
        - values
    ModAttribute:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/RequiredAttribute"
        values:
          type: array
          items:
            type: string
            maxLength: 1000
            minLength: 1
            nullable: false
          maxItems: 10000
          default: []
      required:
        - name
    ModificationType:
      type: string
      enum:
        - ADD
        - DELETE
        - REPLACE
      nullable: false
    LDAPModification:
      type: object
      properties:
        modifyType:
          $ref: "#/components/schemas/ModificationType"
        attributes:
          type: array
          items:
            $ref: "#/components/schemas/ModAttribute"
          nullable: false
          maxItems: 10000
      required:
        - modifyType
        - attributes
    Scope:
      type: string
      enum:
        - BASE
        - ONE
        - SUB
      default: BASE
    TestAuthenticationRequestBody:
      type: object
      properties:
        dn:
          type: string
          example: cn=config
          description: a valid DN, or a simple username that has been mapped internally to
            a DN
          nullable: false
          minLength: 1
          maxLength: 5000
        password:
          $ref: "#/components/schemas/RequiredPassword"
      required:
        - dn
        - password
    TestAuthenticationResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
      required:
        - success
    ExportLdifOptions:
      type: object
      properties:
        sourceDn:
          $ref: "#/components/schemas/RequiredDnStrict"
        targetDn:
          $ref: "#/components/schemas/NullableDnStrict"
        scope:
          $ref: "#/components/schemas/Scope"
        maxEntries:
          type: integer
          nullable: true
          format: int64
          minimum: 0
          maximum: 100000
        fileName:
          type: string
          nullable: false
          pattern: ^[\w,\s-]+\.(ldif|ldifz|LDIF|LDIFZ)$
          maxLength: 500
          minLength: 1
        isExportForReplication:
          type: boolean
          nullable: true
          default: false
      required:
        - sourceDn
        - scope
        - fileName
    GroupMembersSearchOptions:
      type: object
      properties:
        type:
          type: string
          enum:
            - USERS
            - GROUPS
          nullable: false
        dn:
          $ref: "#/components/schemas/RequiredDnStrict"
        keywords:
          type: string
          nullable: true
          maxLength: 5000
      required:
        - type
        - dn
    ModRdnRequestBody:
      type: object
      properties:
        newRdn:
          $ref: "#/components/schemas/RequiredRdnStrict"
      required:
        - newRdn
    MoveEntryRequestBody:
      type: object
      properties:
        newParentDn:
          $ref: "#/components/schemas/RequiredDnStrict"
      required:
        - newParentDn
    AndOrFilter:
      type: object
      properties:
        operator:
          type: string
          enum:
            - AND
            - OR
          default: AND
          maxItems: 100
        fields:
          type: array
          items:
            type: string
          default: []
          maxItems: 100
        groups:
          type: array
          items:
            $ref: "#/components/schemas/AndOrFilter"
          default: []
          maxItems: 100
      required:
        - operator
        - fields
        - groups
    DirectoryBrowserSearchInfo:
      type: object
      properties:
        history:
          type: array
          items:
            $ref: "#/components/schemas/DirectoryBrowserFilter"
          maxItems: 10
          default: []
        tabs:
          type: array
          items:
            $ref: "#/components/schemas/DirectoryBrowserFilter"
          default: []
    DirectoryBrowserFilter:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the filter. Must start with 'filter_'
            followed by digits (timestamp-based).
          pattern: ^filter_\d+$
          example: filter_1704721867766
        name:
          type: string
          pattern: ^Search\s+\d+$
          description: Display name for the filter
        dn:
          $ref: "#/components/schemas/RequiredDnStrict"
        scope:
          $ref: "#/components/schemas/Scope"
        filter:
          $ref: "#/components/schemas/AndOrFilter"
          description: And or Filter LDAP Filter. (Used by the LDAP Query Builder)
        manualFilter:
          type: string
          maxLength: 4000
          description: Manual LDAP filter string when not using structured filter
        manual:
          type: boolean
          description: Whether to use the manual filter instead of structured filter
        returnAttributes:
          type: array
          items:
            type: string
            maxLength: 500
            minLength: 1
            pattern: .*
          default: []
          maxItems: 1000
          description: List of attributes to return in search results
        maxEntries:
          type: integer
          minimum: 1
          maximum: 10000
          description: Maximum number of entries to return
        timeOut:
          type: integer
          minimum: 1
          maximum: 1000
          description: Search timeout in seconds
        searchTime:
          type: string
          description: Timestamp of when the search was performed in format
            YYYYMMDDHHmmss.SSSZ (* Note this is only used for internal
            processing and is set when we actually insert the searched entry)
          pattern: ^\d{14}\.\d{3}Z$
          example: 20250108033107.766Z
      required:
        - id
        - name
        - dn
        - scope
        - filter
        - manualFilter
        - manual
        - returnAttributes
        - maxEntries
        - timeOut
    NodeType:
      type: string
      enum:
        - LDAP_PROXY
        - DB_PROXY
        - VIRTUAL_TREE
        - CONTENT
        - CONTAINER
        - LABEL
        - STANDARD_LINK
        - MERGE_LINK
        - CACHE
        - STORE
        - RESERVED_STORE
        - HTTP
        - MERGED_BACKEND
    NamingContextNode:
      type: object
      properties:
        label:
          type: string
        nodeType:
          $ref: "#/components/schemas/NodeType"
        dn:
          type: string
        isRoot:
          type: boolean
        isActive:
          type: boolean
        datasources:
          type: array
          items:
            type: string
        description:
          type: string
        primaryDataSource:
          type: string
        childNamingContexts:
          type: array
          items:
            type: string
        hasChildren:
          type: boolean
    CacheNode:
      type: object
      properties:
        label:
          type: string
        cacheType:
          $ref: "#/components/schemas/CacheRefreshType"
        isActive:
          type: boolean
        isConfigured:
          type: boolean
          readOnly: true
        isInitialized:
          type: boolean
          readOnly: true
    StoreProperties:
      type: object
      properties:
        isActive:
          type: boolean
          default: true
        storageLocation:
          type: string
          maxLength: 1000
          nullable: true
        isSchemaChecking:
          type: boolean
          default: false
        isEnsureSuperiorObjectClasses:
          type: boolean
          default: false
        isNormalizeAttributeNames:
          type: boolean
          default: false
        indexedAttributes:
          type: array
          maxItems: 10000
          items:
            $ref: "#/components/schemas/RequiredAttribute"
        nonIndexedAttributes:
          type: array
          maxItems: 10000
          items:
            $ref: "#/components/schemas/RequiredAttribute"
        sortedAttributes:
          type: array
          maxItems: 10000
          items:
            $ref: "#/components/schemas/RequiredAttribute"
        encryptedAttributes:
          type: array
          maxItems: 10000
          items:
            $ref: "#/components/schemas/RequiredAttribute"
        isInterClusterRep:
          type: boolean
          default: false
        isEnsurePushModeEnabled:
          type: boolean
          default: false
        pushModeDataSources:
          type: array
          maxItems: 100
          items:
            $ref: "#/components/schemas/RequiredDataSourceName"
        replicationExcludedAttributes:
          type: array
          maxItems: 10000
          items:
            $ref: "#/components/schemas/RequiredAttribute"
        isFullTextSearchEnabled:
          type: boolean
          default: false
        isOptimizeLinkAttributes:
          type: boolean
          default: false
        enableChangelog:
          type: boolean
          default: false
        asyncIndexing:
          type: boolean
          default: false
    LDAPProxyBackendProperties:
      type: object
      properties:
        baseDn:
          $ref: "#/components/schemas/RequiredDnStrict"
        datasource:
          $ref: "#/components/schemas/RequiredDataSourceName"
        isActive:
          type: boolean
          default: true
        isDedicatedConnection:
          type: boolean
          default: false
        isPassThroughAuthorization:
          type: boolean
          default: false
        isProxyAuthorization:
          type: boolean
          default: false
        schemaEnforcementMode:
          type: string
          enum:
            - PASS_THROUGH
            - FILTER
            - STRICT
          default: PASS_THROUGH
        namespaceDn:
          type: string
      required:
        - baseDn
        - datasource
    MergeBackendConfiguration:
      type: object
      properties:
        dataSource:
          $ref: "#/components/schemas/RequiredDataSourceName"
        remoteBaseDn:
          $ref: "#/components/schemas/RequiredDnStrict"
        radiantoneNamespaceDn:
          $ref: "#/components/schemas/RequiredDnStrict"
      required:
        - dataSource
        - remoteBaseDn
        - radiantoneNamespaceDn
    LdapProxyAdvancedProperties:
      type: object
      properties:
        javaClass:
          type: string
          readOnly: true
        sourceLocation:
          type: string
          readOnly: true
        interceptOn:
          type: array
          maxItems: 8
          items:
            $ref: "#/components/schemas/InterceptOn"
        limitedAttributesRequested:
          type: boolean
          default: false
        joinOptimized:
          type: boolean
          default: false
        useClientSizeLimit:
          type: boolean
          default: false
        objectClassMapping:
          type: array
          maxItems: 10000
          items:
            $ref: "#/components/schemas/ObjectClassMapping"
        preProcessingFilter:
          type: string
          nullable: true
          maxLength: 1000
        postProcessingFilter:
          type: string
          nullable: true
          maxLength: 1000
        suffixBranchExclusion:
          type: array
          nullable: true
          maxItems: 1000
          items:
            $ref: "#/components/schemas/NullableDnStrict"
        suffixBranchInclusion:
          type: array
          nullable: true
          maxItems: 1000
          items:
            $ref: "#/components/schemas/NullableDnStrict"
        globalAttributesHandling:
          type: array
          maxItems: 10000
          items:
            $ref: "#/components/schemas/GlobalAttributesHandling"
    InterceptOn:
      type: string
      nullable: false
      enum:
        - BIND
        - SEARCH
        - MODIFY
        - DELETE
        - ADD
        - SEARCH_RESULT_ENTRY_PROCESSING
        - COMPARE
        - SPECIAL_OPERATIONS
    ObjectClassMapping:
      type: object
      properties:
        actualObjectClass:
          $ref: "#/components/schemas/RequiredObjectClass"
        mappedObjectClass:
          $ref: "#/components/schemas/RequiredObjectClass"
      required:
        - actualObjectClass
        - mappedObjectClass
    GlobalAttributesHandling:
      type: object
      properties:
        actualName:
          $ref: "#/components/schemas/RequiredAttribute"
        virtualName:
          type: string
          maxLength: 1000
          nullable: false
        dnRemapping:
          type: boolean
          default: false
        alwaysRequested:
          type: boolean
          default: false
        hidden:
          type: boolean
          default: false
      required:
        - actualName
        - virtualName
    ContentProperties:
      type: object
      properties:
        rdnName:
          type: string
          maxLength: 1000
          nullable: false
          minLength: 1
        rdnValues:
          type: array
          maxItems: 10000
          items:
            $ref: "#/components/schemas/RequiredAttribute"
        primaryKey:
          type: string
          maxLength: 1000
        schema:
          $ref: "#/components/schemas/NullableSchemaName"
        type:
          type: string
          enum:
            - CONTENT
            - CONTAINER
          default: CONTENT
          nullable: true
      required:
        - rdnName
        - rdnValues
    ContentAdvancedSettings:
      type: object
      properties:
        interceptionScriptFileName:
          type: string
        javaClass:
          type: string
          readOnly: true
        objectClass:
          type: string
          readOnly: true
        interceptOn:
          type: array
          maxItems: 8
          items:
            $ref: "#/components/schemas/InterceptOn"
          default: []
        processJoinComputedAttrsNecessary:
          type: boolean
          default: false
        objectClassMapping:
          type: string
          nullable: false
          maxLength: 5000
        dataSourceType:
          type: string
          maxLength: 1000
          readOnly: true
        requestNecessaryAttrOnly:
          type: boolean
          default: false
        distinct:
          type: boolean
          default: false
        leftOuterJoin:
          type: boolean
          default: false
        searchCaseSensitivity:
          type: string
          enum:
            - AS_IS
            - IGNORE_CASE
            - TRANSLATE_TO_UPPER
          default: AS_IS
        sqlWhereClause:
          type: string
          maxLength: 10000
        ldapFilter:
          type: string
          maxLength: 1000
        maxRequestedAttributes:
          type: integer
          format: int32
          default: 30
        ldapFilterAttributes:
          type: array
          maxItems: 10000
          items:
            $ref: "#/components/schemas/RequiredAttribute"
          readOnly: true
      required:
        - objectClassMapping
    CacheProperties:
      type: object
      properties:
        isActive:
          type: boolean
          default: false
        isConfigured:
          type: boolean
          readOnly: true
        isInitialized:
          type: boolean
          readOnly: true
        startingSuffix:
          type: string
          readOnly: true
        internalSuffix:
          type: string
          readOnly: true
        isFullTextSearch:
          type: boolean
          default: false
        storageLocation:
          type: string
          maxLength: 1000
        isUseCacheForAuth:
          type: boolean
        isLocalBindOnly:
          type: boolean
          default: false
        isDelegateOnFailure:
          type: boolean
          default: false
        isEnablePasswordPolicyEnforcement:
          type: boolean
          default: false
        isPasswordWriteBack:
          type: boolean
          default: false
        isOptimizeLinkedAttributes:
          type: boolean
          default: false
        caseSensitiveAttributesCompare:
          type: boolean
          default: false
        caseSensitiveAttributes:
          type: array
          maxItems: 10000
          items:
            $ref: "#/components/schemas/RequiredAttribute"
        nonIndexedAttributes:
          type: array
          maxItems: 10000
          items:
            $ref: "#/components/schemas/RequiredAttribute"
        sortedAttributes:
          type: array
          maxItems: 10000
          items:
            $ref: "#/components/schemas/RequiredAttribute"
        encryptedAttributes:
          type: array
          maxItems: 10000
          items:
            $ref: "#/components/schemas/RequiredAttribute"
        extensionAttributes:
          type: array
          items:
            $ref: "#/components/schemas/RequiredAttribute"
          maxItems: 10000
        invariantAttribute:
          $ref: "#/components/schemas/RequiredAttribute"
        isInterClusterReplication:
          type: boolean
          default: false
        isEnsurePushMode:
          type: boolean
          default: false
        pushModeDataSources:
          type: array
          items:
            $ref: "#/components/schemas/RequiredDataSourceName"
        replicationExcludedAttributes:
          type: array
          items:
            $ref: "#/components/schemas/RequiredAttribute"
        isAcceptChangesFromReplicas:
          type: boolean
          default: false
        updatableAttributesFromReplicas:
          type: array
          maxItems: 10000
          items:
            $ref: "#/components/schemas/RequiredAttribute"
        changeLogEnabled:
          type: boolean
          default: false
        asyncIndexingEnabled:
          type: boolean
          default: false
    DBProxyProperties:
      type: object
      properties:
        mappedBaseDn:
          $ref: "#/components/schemas/NullableDnStrict"
        directoryView:
          type: string
          readOnly: true
        isActive:
          type: boolean
          default: true
        dataSource:
          $ref: "#/components/schemas/RequiredDataSourceName"
      required:
        - dataSource
    VirtualTreeProperties:
      type: object
      properties:
        namingContext:
          type: string
          readOnly: true
        directoryView:
          type: string
          nullable: false
          maxLength: 1000
        schema:
          type: string
          readOnly: true
        isActive:
          type: boolean
          default: true
        dataSourceType:
          $ref: "#/components/schemas/DataSourceCategoryEnum"
        dataSourceName:
          $ref: "#/components/schemas/NullableDataSourceName"
        virtualAttributes:
          type: array
          maxItems: 10000
          items:
            $ref: "#/components/schemas/VirtualAttribute"
        baseDn:
          $ref: "#/components/schemas/NullableDnStrict"
      required:
        - directoryView
    VirtualAttribute:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/RequiredAttribute"
        mappedName:
          $ref: "#/components/schemas/RequiredAttribute"
      required:
        - name
        - mappedName
    LabelVirtualAttribute:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/RequiredAttribute"
        mappedName:
          type: array
          maxItems: 10000
          nullable: false
          items:
            $ref: "#/components/schemas/RequiredAttribute"
      required:
        - name
        - mappedName
    LabelProperties:
      type: object
      properties:
        rdnPrefix:
          type: string
          maxLength: 1000
          nullable: false
          minLength: 1
        rdnSuffix:
          type: string
          maxLength: 1000
          nullable: false
          minLength: 1
        objectClasses:
          type: array
          maxItems: 1000
          items:
            $ref: "#/components/schemas/RequiredObjectClass"
        description:
          $ref: "#/components/schemas/NullableDescription"
        virtualAttributes:
          type: array
          maxItems: 10000
          items:
            $ref: "#/components/schemas/LabelVirtualAttribute"
      required:
        - rdnPrefix
        - rdnSuffix
        - objectClasses
    CacheRefreshType:
      type: string
      enum:
        - NONE
        - PERIODIC
        - EVENT_DRIVEN
      nullable: false
    CacheRefreshSettings:
      type: object
      properties:
        refreshType:
          $ref: "#/components/schemas/CacheRefreshType"
        PeriodicRefreshSettings:
          $ref: "#/components/schemas/PeriodicRefreshSettings"
      required:
        - refreshType
    PeriodicRefreshSettings:
      type: object
      properties:
        refreshCronExpression:
          type: string
          maxLength: 1000
          nullable: false
          minLength: 1
        validationScriptPath:
          type: string
          maxLength: 1000
        deleteValidationThreshold:
          type: integer
          minimum: 0
          maximum: 100
          description: this is a percentage
        addValidationThreshold:
          type: integer
          minimum: 0
          maximum: 100
          description: this is a percentage
      required:
        - refreshCronExpression
        - validationScriptPath
    ExecuteResponse:
      type: object
      properties:
        isSuccessful:
          type: boolean
          readOnly: true
        message:
          type: string
    RelationshipNode:
      type: object
      properties:
        dn:
          type: string
        rdn:
          type: string
        type:
          $ref: "#/components/schemas/RelationshipNodeType"
        primaryObject:
          type: string
        secondaryObject:
          type: string
        children:
          type: array
          items:
            $ref: "#/components/schemas/RelationshipNode"
      required:
        - dn
        - rdn
        - type
        - primaryObject
        - secondaryObject
    RelationshipNodeType:
      type: string
      enum:
        - TABLE
        - VIEW
    NewScriptName:
      type: object
      properties:
        name:
          type: string
          nullable: false
          minLength: 1
          maxLength: 1000
      required:
        - name
    ExistingScriptPath:
      type: object
      properties:
        scriptPath:
          type: string
          nullable: false
          minLength: 1
          maxLength: 1000
      required:
        - scriptPath
    InterceptionJarBuildResults:
      type: object
      properties:
        exitCode:
          type: integer
          format: int32
        messages:
          type: string
      required:
        - exitCode
        - messages
    InterceptionScriptContents:
      type: object
      properties:
        classname:
          type: string
          example: myinterception22
          maxLength: 1000
        filename:
          type: string
          example: myInterception.java
          maxLength: 1000
        scriptContents:
          type: string
          nullable: false
          maxLength: 100000
          example: |-
            public class MyInterception {
              public static void main(String[] args) {
                int a = 1;
              }
            }
      required:
        - scriptContents
    StoredProcedure:
      type: object
      properties:
        name:
          type: string
        catalog:
          type: string
        schema:
          type: string
      required:
        - name
        - catalog
        - schema
    StoredProcedureParametersResponse:
      type: object
      properties:
        params:
          type: array
          maxItems: 1000
          items:
            $ref: "#/components/schemas/StoredProcedureParameter"
        attributes:
          type: array
          maxLength: 1000
          items:
            nullable: false
            type: string
      required:
        - params
        - attributes
    StoredProcedureParameter:
      type: object
      properties:
        name:
          type: string
          nullable: false
          minLength: 1
          maxLength: 1000
        option:
          type: string
          nullable: false
          maxLength: 1000
        type:
          type: string
          nullable: false
          maxLength: 1000
        value:
          type: string
          nullable: false
          maxLength: 1000
      required:
        - name
        - option
        - type
        - value
    StoreProcedureCallParams:
      type: object
      properties:
        schema:
          $ref: "#/components/schemas/RequiredSchemaName"
        name:
          type: string
          minLength: 1
          maxLength: 1000
          nullable: false
        params:
          type: array
          maxItems: 10000
          items:
            $ref: "#/components/schemas/StoredProcedureParameter"
      required:
        - schema
        - name
        - params
    StoredProcedureCall:
      type: string
    MountBackendType:
      type: string
      enum:
        - LDAP_PROXY
        - DB_PROXY
        - VIRTUAL_TREE
        - STORE
        - DSML_SPML_SERVICE
      nullable: false
    MountBackendStoreOptions:
      type: object
      properties:
        backendType:
          $ref: "#/components/schemas/MountBackendType"
        isActive:
          type: boolean
          default: true
      required:
        - backendType
    MountBackendLdapProxyOptions:
      type: object
      properties:
        backendType:
          $ref: "#/components/schemas/MountBackendType"
        datasource:
          $ref: "#/components/schemas/RequiredDataSourceName"
        remoteBaseDn:
          $ref: "#/components/schemas/RequiredDnStrict"
      required:
        - backendType
        - datasource
        - remoteBaseDn
    MountBackendDBProxyOptions:
      type: object
      properties:
        backendType:
          $ref: "#/components/schemas/MountBackendType"
        datasource:
          $ref: "#/components/schemas/RequiredDataSourceName"
        schema:
          $ref: "#/components/schemas/NullableSchemaName"
        isTables:
          type: boolean
          default: true
        isViews:
          type: boolean
          default: true
        isSystemTables:
          type: boolean
          default: false
        isSynonyms:
          type: boolean
          default: false
        isQuoteTableNames:
          type: boolean
          default: false
        isQuoteColumnNames:
          type: boolean
          default: false
        tableViews:
          type: array
          maxItems: 10000
          items:
            $ref: "#/components/schemas/RequiredTableName"
      required:
        - backendType
        - datasource
        - tableViews
    MountBackendVirtualTreeOptions:
      type: object
      properties:
        backendType:
          $ref: "#/components/schemas/MountBackendType"
        existingViewName:
          $ref: "#/components/schemas/NullableView"
      required:
        - backendType
    MountBackendDsmlSpmlServiceOptions:
      type: object
      properties:
        backendType:
          $ref: "#/components/schemas/MountBackendType"
        datasource:
          $ref: "#/components/schemas/RequiredDataSourceName"
        remoteBaseDn:
          $ref: "#/components/schemas/RequiredDnStrict"
        targetId:
          type: string
          nullable: false
          maxLength: 1000
      required:
        - backendType
        - datasource
        - remoteBaseDn
        - targetId
    MountBackendOptions:
      description: Options required for mounting a backend on a label.
      oneOf:
        - $ref: "#/components/schemas/MountBackendStoreOptions"
        - $ref: "#/components/schemas/MountBackendLdapProxyOptions"
        - $ref: "#/components/schemas/MountBackendDBProxyOptions"
        - $ref: "#/components/schemas/MountBackendVirtualTreeOptions"
        - $ref: "#/components/schemas/MountBackendDsmlSpmlServiceOptions"
      discriminator:
        propertyName: backendType
        mapping:
          LDAP_PROXY: "#/components/schemas/MountBackendLdapProxyOptions"
          DB_PROXY: "#/components/schemas/MountBackendDBProxyOptions"
          VIRTUAL_TREE: "#/components/schemas/MountBackendVirtualTreeOptions"
          STORE: "#/components/schemas/MountBackendStoreOptions"
          DSML_SPML_SERVICE: "#/components/schemas/MountBackendDsmlSpmlServiceOptions"
    LinkProperties:
      type: object
      properties:
        viewName:
          $ref: "#/components/schemas/NullableView"
        linkType:
          type: string
          enum:
            - STANDARD_LINK
            - MERGE_LINK
          default: STANDARD_LINK
        objectClass:
          $ref: "#/components/schemas/NullableObjectClass"
        datasource:
          $ref: "#/components/schemas/RequiredDataSourceName"
        baseDn:
          $ref: "#/components/schemas/NullableDnStrict"
        linkParameters:
          type: string
          maxLength: 1000
        schema:
          $ref: "#/components/schemas/NullableSchemaName"
        virtualAttributes:
          type: array
          maxItems: 10000
          items:
            $ref: "#/components/schemas/VirtualAttribute"
      required:
        - virtualAttributes
    LinkParametersTreeNode:
      type: object
      properties:
        label:
          type: string
        path:
          type: string
        linkParamNodeType:
          type: string
          enum:
            - LABEL
            - CONTENT
        children:
          type: array
          items:
            $ref: "#/components/schemas/LinkParametersTreeNode"
      required:
        - label
        - path
        - linkParamNodeType
        - children
    LinkParametersTreeNodeAttribute:
      type: object
      properties:
        name:
          type: string
        attrType:
          type: string
      required:
        - name
        - attrType
    MappedAttribute:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/RequiredAttribute"
        virtualName:
          $ref: "#/components/schemas/NullableAttribute"
        tags:
          type: array
          maxItems: 100
          items:
            nullable: false
            type: string
            maxLength: 1000
        source:
          type: string
          nullable: false
          maxLength: 1000
      required:
        - name
        - virtualName
        - source
    ComputedAttribute:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/RequiredAttribute"
        expression:
          type: string
          nullable: false
          maxLength: 100000
        active:
          type: boolean
          default: true
      required:
        - name
        - expression
        - active
    NamingContextNodeList:
      description: Paginated list of naming context nodes.
      type: object
      properties:
        nodes:
          type: array
          items:
            $ref: "#/components/schemas/NamingContextNode"
        pagination:
          $ref: "#/components/schemas/Pagination"
      required:
        - nodes
        - pagination
    NewLinkProps:
      description: Required information for creating a new link node.
      type: object
      properties:
        linkType:
          type: string
          enum:
            - STANDARD_LINK
            - MERGE_LINK
          nullable: false
        existingView:
          $ref: "#/components/schemas/RequiredView"
      required:
        - linkType
        - existingView
    NewContentProps:
      type: object
      properties:
        relationshipObjectDn:
          type: string
          example: APP.CUSTOMERS
          maxLength: 500
          nullable: false
          minLength: 1
        isQuoteTableNames:
          type: boolean
          default: false
        isQuoteColumnNames:
          type: boolean
          default: false
        isRelatedObjectsOnly:
          type: boolean
          default: true
        schema:
          $ref: "#/components/schemas/NullableSchemaName"
      required:
        - relationshipObjectDn
    IsActive:
      description: Used to toggle if a naming context is active or not.
      type: object
      properties:
        isActive:
          type: boolean
          nullable: false
      required:
        - isActive
    ViewFile:
      type: object
      properties:
        viewName:
          type: string
        lastModified:
          type: string
          format: date-time
    NewNamingContextResponse:
      type: object
      properties:
        dn:
          type: string
    InitCacheOptions:
      type: object
      properties:
        useExistingLdif:
          type: boolean
          nullable: false
        useLdifz:
          type: boolean
          default: false
          nullable: true
        existingLdifFilePath:
          type: string
          maxLength: 1000
      required:
        - useExistingLdif
    NewLabelProps:
      type: object
      properties:
        rdn:
          $ref: "#/components/schemas/RequiredRdnStrict"
      required:
        - rdn
    ReferentialIntegrityRule:
      type: object
      properties:
        enabled:
          type: boolean
          default: true
        groupsLocations:
          type: array
          maxItems: 1000
          nullable: false
          items:
            $ref: "#/components/schemas/RequiredDnRelaxed"
        usersLocation:
          $ref: "#/components/schemas/RequiredDnRelaxed"
        attributes:
          type: array
          maxItems: 10000
          items:
            $ref: "#/components/schemas/RequiredAttribute"
        validateUsersInDit:
          type: boolean
          default: true
      required:
        - groupsLocations
        - attributes
        - usersLocation
    SpecialAttributes:
      type: object
      properties:
        linkedAttributes:
          type: array
          maxItems: 1000
          items:
            $ref: "#/components/schemas/LinkedAttributeMapping"
        dynamicGroupSettings:
          $ref: "#/components/schemas/DynamicGroupSettings"
        unnestGroups:
          type: array
          maxItems: 1000
          items:
            $ref: "#/components/schemas/RequiredDnRelaxed"
        referentialIntegrityRules:
          type: array
          maxItems: 1000
          items:
            $ref: "#/components/schemas/ReferentialIntegrityRule"
        attributeUniquenessRules:
          type: array
          maxItems: 1000
          items:
            $ref: "#/components/schemas/AttributeUniqueness"
    LinkedAttributeMapping:
      type: object
      properties:
        targetDn:
          $ref: "#/components/schemas/RequiredDnStrict"
        backlinkAttribute:
          $ref: "#/components/schemas/RequiredAttribute"
        sourceDns:
          type: array
          maxItems: 1000
          nullable: false
          items:
            $ref: "#/components/schemas/RequiredDnStrict"
        forwardLinkAttributes:
          type: array
          maxItems: 10000
          nullable: false
          items:
            $ref: "#/components/schemas/RequiredAttribute"
        sourceObjectClasses:
          type: array
          maxItems: 100
          nullable: false
          items:
            $ref: "#/components/schemas/RequiredObjectClass"
        nestedRelationshipsEnabled:
          type: boolean
          default: false
      required:
        - targetDn
        - backlinkAttribute
        - sourceDns
        - forwardLinkAttributes
        - sourceObjectClasses
    DynamicGroupSettings:
      type: object
      properties:
        memberAttribute:
          type: string
          enum:
            - MEMBER
            - UNIQUE_MEMBER
          default: MEMBER
        dynamicGroups:
          type: array
          maxItems: 1000
          items:
            $ref: "#/components/schemas/DynamicGroup"
    AttributeUniqueness:
      type: object
      properties:
        dnList:
          type: array
          maxItems: 1000
          items:
            $ref: "#/components/schemas/RequiredDnStrict"
          nullable: false
          minItems: 1
        attributeList:
          type: array
          maxItems: 10000
          items:
            $ref: "#/components/schemas/RequiredAttribute"
          nullable: false
          minItems: 1
      required:
        - dnList
        - attributeList
    DynamicGroup:
      type: object
      properties:
        dn:
          type: string
          nullable: false
          minLength: 1
          maxLength: 5000
        cache:
          type: boolean
          default: false
      required:
        - dn
    DynamicGroupFormat:
      type: object
      properties:
        dn:
          type: string
      required:
        - dn
    LinkedAttributeDefault:
      type: object
      properties:
        backlinkAttr:
          type: string
        forwardLinkAttrs:
          type: array
          items:
            type: string
        sourceObjectClasses:
          type: array
          items:
            type: string
      required:
        - backlinkAttr
        - forwardLinkAttrs
    ServerFilePath:
      type: object
      properties:
        filePath:
          type: string
          nullable: false
          minLength: 1
          maxLength: 5000
      required:
        - filePath
    DirectoryNamespaceLaunchedTask:
      type: object
      properties:
        taskId:
          type: string
      required:
        - taskId
    StoreBackup:
      type: object
      properties:
        id:
          type: string
        label:
          type: string
      required:
        - id
    RestoreOptions:
      type: object
      properties:
        backupId:
          type: string
          nullable: false
          minLength: 1
          maxLength: 1000
      required:
        - backupId
    GenericConfigurationParameters:
      type: object
      oneOf:
        - $ref: "#/components/schemas/LdapConfigurationParameters"
        - $ref: "#/components/schemas/DbConfigurationParameters"
        - $ref: "#/components/schemas/CustomConfigurationParameters"
      discriminator:
        propertyName: nodeType
        mapping:
          LDAP: "#/components/schemas/LdapConfigurationParameters"
          DATABASE: "#/components/schemas/DbConfigurationParameters"
          CUSTOM: "#/components/schemas/CustomConfigurationParameters"
    ConfigurationParameters:
      type: object
      properties:
        linkParameters:
          type: string
          nullable: true
          maxLength: 1000
        additionalClause:
          type: string
          maxLength: 1000
        baseSearchParameters:
          type: string
          maxLength: 1000
        baseUpdateParameters:
          type: string
          maxLength: 1000
        nodeType:
          $ref: "#/components/schemas/DataSourceCategoryEnum"
      required:
        - nodeType
    LdapConfigurationParameters:
      allOf:
        - $ref: "#/components/schemas/ConfigurationParameters"
        - type: object
          properties:
            parentDnBaseDn:
              $ref: "#/components/schemas/NullableDnStrict"
            parentDnSearchScope:
              $ref: "#/components/schemas/DirectoryNamespaceEntryScope"
    DbConfigurationParameters:
      allOf:
        - $ref: "#/components/schemas/ConfigurationParameters"
        - type: object
          properties:
            storedProceduresInsert:
              type: array
              maxItems: 100
              default: []
              items:
                nullable: false
                type: string
                maxLength: 5000
            storedProceduresUpdate:
              type: array
              maxItems: 100
              default: []
              items:
                nullable: false
                type: string
                maxLength: 5000
            storedProceduresDelete:
              type: array
              maxItems: 100
              default: []
              items:
                nullable: false
                type: string
                maxLength: 5000
    DirectoryNamespaceEntryScope:
      type: string
      enum:
        - ONE
        - SUB
        - BASE
      default: BASE
    CustomConfigurationParameters:
      allOf:
        - $ref: "#/components/schemas/ConfigurationParameters"
        - type: object
          properties:
            serviceParameters:
              type: string
              maxLength: 1000
    NewCacheParams:
      type: object
      properties:
        dn:
          $ref: "#/components/schemas/RequiredDnRelaxed"
      required:
        - dn
    LinkParametersStringResponse:
      type: object
      properties:
        linkParametersString:
          type: string
      required:
        - linkParametersString
    AbstractInputSource:
      type: object
      properties:
        sourceType:
          type: string
          enum:
            - PRIMARY
            - NAMESPACE_OBJECT
            - EXTERNAL_DATA_SOURCE
            - EXTENSIBLE_OBJECT
          nullable: false
        attributes:
          type: array
          maxItems: 10000
          items:
            $ref: "#/components/schemas/DirectoryNamespaceAttribute"
        name:
          type: string
          maxLength: 1000
          nullable: false
          minLength: 1
        dataSource:
          $ref: "#/components/schemas/RequiredDataSourceName"
        id:
          type: string
          maxLength: 1000
          nullable: false
          minLength: 1
      required:
        - sourceType
        - attributes
        - name
        - dataSource
        - id
    InputSource:
      oneOf:
        - $ref: "#/components/schemas/PrimaryInputSource"
        - $ref: "#/components/schemas/NamespaceObjectInputSource"
        - $ref: "#/components/schemas/ExternalDataSourceInputSource"
        - $ref: "#/components/schemas/ExtensibleObject"
      discriminator:
        propertyName: sourceType
        mapping:
          PRIMARY: "#/components/schemas/PrimaryInputSource"
          NAMESPACE_OBJECT: "#/components/schemas/NamespaceObjectInputSource"
          EXTERNAL_DATA_SOURCE: "#/components/schemas/ExternalDataSourceInputSource"
          EXTENSIBLE_OBJECT: "#/components/schemas/ExtensibleObject"
    PrimaryInputSource:
      allOf:
        - $ref: "#/components/schemas/AbstractInputSource"
        - type: object
          properties:
            dataSourceCategory:
              $ref: "#/components/schemas/DataSourceCategoryEnum"
            schema:
              $ref: "#/components/schemas/RequiredSchemaName"
            relatedObjects:
              type: array
              maxItems: 10000
              nullable: false
              items:
                $ref: "#/components/schemas/RelatedObject"
            objectClass:
              $ref: "#/components/schemas/RequiredObjectClass"
      required:
        - sourceType
        - attributes
        - name
        - dataSource
        - id
        - dataSourceCategory
        - schema
        - objectClass
    RelatedObject:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/RequiredTableName"
        tableName:
          $ref: "#/components/schemas/RequiredTableName"
        relationshipDn:
          type: string
          example: APP.CUSTOMERS,APP.ORDERS
          maxLength: 500
          nullable: true
          minLength: 1
        attributes:
          type: array
          maxItems: 10000
          items:
            $ref: "#/components/schemas/DirectoryNamespaceAttribute"
        id:
          nullable: false
          minLength: 1
          maxLength: 1000
          type: string
      required:
        - name
        - tableName
        - id
    NamespaceObjectInputSource:
      allOf:
        - $ref: "#/components/schemas/AbstractInputSource"
        - type: object
          properties:
            targetBaseDn:
              $ref: "#/components/schemas/RequiredDnStrict"
            objectClass:
              $ref: "#/components/schemas/RequiredObjectClass"
            scope:
              $ref: "#/components/schemas/DirectoryNamespaceEntryScope"
            sizeLimit:
              $ref: "#/components/schemas/NullableSizeLimit"
      required:
        - sourceType
        - attributes
        - name
        - dataSource
        - id
        - targetBaseDn
        - objectClass
        - scope
        - sizeLimit
    ExternalDataSourceInputSource:
      allOf:
        - $ref: "#/components/schemas/AbstractInputSource"
        - type: object
          properties:
            dataSourceCategory:
              $ref: "#/components/schemas/DataSourceCategoryEnum"
            schema:
              $ref: "#/components/schemas/RequiredSchemaName"
            objectClass:
              $ref: "#/components/schemas/RequiredObjectClass"
            object:
              $ref: "#/components/schemas/RequiredTableName"
      required:
        - sourceType
        - attributes
        - name
        - dataSource
        - id
        - dataSourceCategory
        - schema
        - objectClass
        - object
    ExtensibleObject:
      allOf:
        - $ref: "#/components/schemas/AbstractInputSource"
        - type: object
          properties:
            objectClass:
              $ref: "#/components/schemas/RequiredObjectClass"
      required:
        - sourceType
        - attributes
        - name
        - dataSource
        - id
        - objectClass
    DataSourceCategoryEnum:
      type: string
      enum:
        - LDAP
        - DATABASE
        - CUSTOM
      nullable: false
    Join:
      properties:
        joinId:
          $ref: "#/components/schemas/RequiredJoinId"
        active:
          type: boolean
          default: false
        order:
          type: integer
          format: int32
          maximum: 10000
        source:
          type: string
          maxLength: 1000
          nullable: false
          minLength: 1
        attributes:
          type: array
          maxItems: 10000
          items:
            $ref: "#/components/schemas/JoinProfileAttribute"
        secondaryObject:
          $ref: "#/components/schemas/EditJoinProfileSecondaryObject"
        filter:
          maxLength: 1000
          type: string
        sizeLimit:
          $ref: "#/components/schemas/NullableSizeLimit"
        joinType:
          $ref: "#/components/schemas/JoinType"
        extendedObjectClass:
          $ref: "#/components/schemas/NullableObjectClass"
        externalDsName:
          $ref: "#/components/schemas/NullableDataSourceName"
        externalDsSchema:
          $ref: "#/components/schemas/NullableSchemaName"
        externalDsObject:
          $ref: "#/components/schemas/NullableTableName"
        returnAllAttributes:
          type: boolean
          default: false
      required:
        - joinId
        - order
        - source
    JoinType:
      type: string
      enum:
        - INNER
        - LEFT
        - UNION
      default: INNER
    FinalOutput:
      properties:
        attributes:
          type: array
          maxItems: 10000
          nullable: false
          items:
            $ref: "#/components/schemas/FinalAttribute"
        bindOrder:
          $ref: "#/components/schemas/BindOrder"
        computedAttributes:
          type: array
          maxItems: 10000
          nullable: false
          items:
            $ref: "#/components/schemas/ComputedAttribute"
        packagesAndClasses:
          type: array
          maxItems: 10000
          nullable: false
          items:
            type: string
            maxLength: 5000
            nullable: false
      required:
        - attributes
        - bindOrder
        - computedAttributes
        - packagesAndClasses
    BindOrder:
      type: object
      properties:
        isDelegateAuth:
          type: boolean
          nullable: false
        isCachePassword:
          type: boolean
          nullable: false
        sources:
          type: array
          maxItems: 100
          nullable: false
          items:
            $ref: "#/components/schemas/BindOrderSource"
      required:
        - isDelegateAuth
        - isCachePassword
        - sources
    ObjectMap:
      type: object
      properties:
        inputSources:
          type: array
          nullable: false
          maxItems: 1000
          items:
            $ref: "#/components/schemas/InputSource"
        attributeMappings:
          type: array
          maxItems: 1000
          items:
            $ref: "#/components/schemas/MappedAttribute"
        joins:
          type: array
          nullable: false
          maxItems: 1000
          items:
            $ref: "#/components/schemas/Join"
        joinComputedAttributes:
          type: array
          nullable: false
          maxItems: 1000
          items:
            $ref: "#/components/schemas/ComputedAttribute"
        finalOutput:
          $ref: "#/components/schemas/FinalOutput"
      required:
        - inputSources
        - joins
        - joinComputedAttributes
        - finalOutput
    DirectoryNamespaceAttribute:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/RequiredAttribute"
        virtualName:
          type: string
          maxLength: 1000
        tags:
          readOnly: true
          type: array
          maxItems: 100
          items:
            type: string
            nullable: false
            minLength: 1
            maxLength: 1000
      required:
        - name
    AddObjectCurrentSchemaOptions:
      type: object
      properties:
        objectDn:
          type: string
          example: APP.CUSTOMERS
          maxLength: 500
          nullable: false
          minLength: 1
      required:
        - objectDn
    AddObjectNamespaceOptions:
      type: object
      properties:
        targetBaseDn:
          $ref: "#/components/schemas/RequiredDnStrict"
        objectClass:
          $ref: "#/components/schemas/RequiredObjectClass"
        scope:
          $ref: "#/components/schemas/DirectoryNamespaceEntryScope"
        sizeLimit:
          $ref: "#/components/schemas/NullableSizeLimit"
      required:
        - targetBaseDn
        - objectClass
        - scope
    AddObjectDataSourceSchemaOptions:
      type: object
      properties:
        dataSource:
          $ref: "#/components/schemas/RequiredDataSourceName"
        schema:
          $ref: "#/components/schemas/RequiredSchemaName"
        object:
          $ref: "#/components/schemas/RequiredTableName"
      required:
        - dataSource
        - schema
        - object
    FinalAttribute:
      type: object
      properties:
        virtualName:
          $ref: "#/components/schemas/NullableAttribute"
        origin:
          type: array
          nullable: false
          maxItems: 100
          items:
            nullable: false
            maxLength: 1000
            type: string
        isHidden:
          type: boolean
          default: false
        canModifyHidden:
          type: boolean
          nullable: false
          readOnly: true
        tags:
          type: array
          maxItems: 100
          readOnly: true
          items:
            nullable: false
            maxLength: 1000
            type: string
        precedentAttributes:
          type: array
          maxItems: 10000
          items:
            $ref: "#/components/schemas/PrecedentAttribute"
      required:
        - origin
        - canModifyHidden
    PrecedentAttribute:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/RequiredAttribute"
        origin:
          type: string
          maxLength: 1000
          nullable: false
        priority:
          type: string
          enum:
            - LOWEST
            - LOW
            - NORMAL
            - HIGH
            - HIGHEST
          nullable: false
        tags:
          type: array
          maxItems: 100
          readOnly: true
          items:
            nullable: false
            maxLength: 1000
            type: string
        isUpdatable:
          type: boolean
          nullable: false
        isSearchable:
          type: boolean
          nullable: false
        canModifySearchable:
          type: boolean
          nullable: false
          readOnly: true
        canModifyUpdatable:
          type: boolean
          nullable: false
          readOnly: true
      required:
        - name
        - origin
        - priority
        - isUpdatable
        - isSearchable
        - canModifySearchable
        - canModifyUpdatable
    JoinInputSource:
      type: object
      oneOf:
        - $ref: "#/components/schemas/ExternalDataSourceInputSource"
        - $ref: "#/components/schemas/NamespaceObjectInputSource"
      discriminator:
        propertyName: sourceType
        mapping:
          NAMESPACE_OBJECT: "#/components/schemas/NamespaceObjectInputSource"
          EXTERNAL_DATA_SOURCE: "#/components/schemas/ExternalDataSourceInputSource"
    NewJoinProfileOptions:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/RequiredJoinId"
        joinInputSource:
          $ref: "#/components/schemas/JoinInputSource"
        joinCondition:
          type: string
          maxLength: 10000
          nullable: false
        returnAttributes:
          type: array
          maxItems: 10000
          items:
            $ref: "#/components/schemas/DirectoryNamespaceAttribute"
        returnAllAttributes:
          default: false
          type: boolean
      required:
        - name
        - joinInputSource
        - joinCondition
    JoinProfileAttribute:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/RequiredAttribute"
        virtualName:
          $ref: "#/components/schemas/NullableAttribute"
        source:
          type: string
          maxLength: 1000
          nullable: false
      required:
        - name
        - source
    EditJoinProfileSecondaryObject:
      type: object
      properties:
        dataSource:
          $ref: "#/components/schemas/NullableDataSourceName"
        objectClass:
          $ref: "#/components/schemas/NullableObjectClass"
        targetBaseDn:
          $ref: "#/components/schemas/RequiredDnStrict"
        scope:
          $ref: "#/components/schemas/DirectoryNamespaceEntryScope"
        joinCondition:
          type: string
          nullable: false
          maxLength: 10000
      required:
        - targetBaseDn
        - scope
        - joinCondition
    ExtensibleObjectOptions:
      type: object
      properties:
        objectClass:
          $ref: "#/components/schemas/RequiredObjectClass"
        attributes:
          type: array
          maxItems: 10000
          items:
            $ref: "#/components/schemas/DirectoryNamespaceAttribute"
      required:
        - objectClass
    ManualJoinString:
      type: object
      properties:
        joinString:
          type: string
          nullable: false
          maxLength: 10000
      required:
        - joinString
    IsValid:
      type: object
      properties:
        isValid:
          type: boolean
      required:
        - isValid
    BindOrderSource:
      type: object
      properties:
        name:
          type: string
          nullable: false
          maxLength: 1000
          minLength: 1
        isEnabled:
          type: boolean
          nullable: true
      required:
        - name
        - isEnabled
    ComputedAttributeExpression:
      type: object
      properties:
        expression:
          type: string
          nullable: false
          minLength: 1
          maxLength: 10000
      required:
        - expression
    ComputedAttributeExpressionAndAddedAttrs:
      type: object
      properties:
        expression:
          type: string
          nullable: false
          minLength: 1
          maxLength: 10000
        attributes:
          type: array
          items:
            type: string
      required:
        - expression
    JoinConditionObject:
      type: object
      properties:
        joinCondition:
          type: string
          maxLength: 10000
          nullable: false
          minLength: 1
      required:
        - joinCondition
    ComputedAttributeFunction:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        example:
          type: string
        parameters:
          type: array
          items:
            $ref: "#/components/schemas/ComputedAttributeFunctionParameter"
        isIncompatibleWithOtherFunctions:
          type: boolean
        hasBooleanReturn:
          type: boolean
        signature:
          type: string
      required:
        - name
        - description
        - example
        - parameters
        - isIncompatibleWithOtherFunctions
        - hasBooleanReturn
        - signature
    ComputedAttributeFunctionParameter:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        type:
          type: string
          enum:
            - ATTRIBUTE
            - STRING
            - DN
            - SCOPE
            - DATASOURCE_ID
            - LDAP_FILTER
            - POSITIVE_INT
            - DN_ATTR
        required:
          type: boolean
      required:
        - name
        - description
        - type
        - required
    ComputedAttributeFunctionValue:
      type: object
      properties:
        signature:
          type: string
          nullable: false
          maxLength: 10000
        values:
          type: array
          maxItems: 1000
          nullable: false
          items:
            $ref: "#/components/schemas/ComputedAttributeFunctionParameterValue"
      required:
        - signature
        - values
    ComputedAttributeFunctionParameterValue:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/RequiredAttribute"
        value:
          type: string
          maxLength: 1000
      required:
        - name
    ValidateManualJoinStringResponse:
      type: object
      properties:
        isValid:
          type: boolean
        join:
          $ref: "#/components/schemas/Join"
      required:
        - isValid
    IsValidResponse:
      type: object
      properties:
        isValid:
          type: boolean
        errorMsg:
          type: string
          nullable: true
      required:
        - isValid
    NewRootNamingContextDn:
      type: object
      properties:
        dn:
          $ref: "#/components/schemas/RequiredDnStrict"
      required:
        - dn
    ScriptCompilationResults:
      type: object
      properties:
        isSuccessful:
          type: boolean
        output:
          type: string
      required:
        - isSuccessful
        - output
    GlobalInterceptionSettings:
      type: object
      properties:
        javaClassName:
          type: string
          readOnly: true
        preOperationInterceptOn:
          type: array
          maxItems: 7
          uniqueItems: true
          items:
            $ref: "#/components/schemas/PreOperationInterceptOn"
          default: []
        postOperationInterceptAfter:
          type: array
          maxItems: 7
          uniqueItems: true
          items:
            $ref: "#/components/schemas/PostOperationInterceptAfter"
          default: []
    PostOperationInterceptAfter:
      type: string
      nullable: false
      enum:
        - BIND
        - MODIFY
        - DELETE
        - ADD
        - SEARCH_RESULT_ENTRY_PROCESSING
        - COMPARE
        - PROCESS_SEARCH_RESULT_CODE
    PreOperationInterceptOn:
      type: string
      nullable: false
      enum:
        - BIND
        - MODIFY
        - DELETE
        - ADD
        - COMPARE
        - SEARCH
        - SPECIAL_OPERATION
    NullableGroupId:
      type: string
      maxLength: 500
      pattern: ^[a-zA-Z0-9_-]+$
      nullable: true
      description: The data source group id
    NullableHostName:
      type: string
      nullable: true
      maxLength: 500
      format: hostname
    RequiredHostName:
      type: string
      example: host.fake.test.com
      nullable: false
      minLength: 1
      maxLength: 500
      format: hostname
    RequiredPortInt:
      type: integer
      example: 2388
      minimum: 1
      maximum: 65535
      nullable: false
    ReadOnlyDateTime:
      type: string
      format: date-time
      example: 2021-01-30T08:30:00Z
      readOnly: true
      description: this date-time is read-only
    RequiredDataSourceCategory:
      type: string
      enum:
        - ldap
        - database
        - custom
      description: The major category of data source
      nullable: false
    RequiredTemplateName:
      type: string
      maxLength: 500
      pattern: .*
      description: The template name of the data source
      nullable: false
      minLength: 1
    RequiredDriverClassName:
      type: string
      example: org.apache.derby.jdbc.ClientDriver
      description: the name of the template driver class
      nullable: false
      minLength: 1
      maxLength: 500
      pattern: .*
    RequiredSchemaName:
      type: string
      nullable: false
      maxLength: 500
      minLength: 1
      pattern: .*
      description: The name of the schema
    NullableDescription:
      type: string
      maxLength: 10000
      nullable: true
      description: description of object
    NullableSchemaName:
      type: string
      nullable: true
      maxLength: 500
      pattern: .*
      description: The name of the schema
    RequiredPassword:
      type: string
      nullable: false
      minLength: 1
      maxLength: 1000
      format: password
      example: mynewpassword123
    NullableRdnStrict:
      type: string
      example: cn=config
      description: a valid rdn
      nullable: true
      maxLength: 5000
      x-radiantlogic-validation:
        distinguishedName: strict
    NullablePortInt:
      type: integer
      format: int64
      minimum: 1
      maximum: 65535
      nullable: true
    RequiredAttribute:
      type: string
      nullable: false
      maxLength: 500
      minLength: 1
      pattern: .*
      description: a valid ldap attribute name
    RequiredRdnStrict:
      type: string
      example: cn=config
      description: a valid rdn
      nullable: false
      minLength: 1
      maxLength: 5000
      x-radiantlogic-validation:
        distinguishedName: strict
    RequiredGroupId:
      type: string
      maxLength: 500
      pattern: ^[a-zA-Z0-9_-]+$
      nullable: false
      minLength: 1
      description: The data source group id
    RequiredGroupName:
      type: string
      nullable: false
      maxLength: 200
      pattern: ^[a-zA-Z0-9_-]+$
      minLength: 1
      description: The data source group name
    NullablePluginName:
      type: string
      maxLength: 500
      pattern: .*
      nullable: true
      minLength: 1
    RequiredObjectClass:
      type: string
      nullable: false
      maxLength: 1000
      minLength: 1
      pattern: .*
      description: a valid object class
    NullableDataSourceName:
      type: string
      description: The given name of the data source
      nullable: true
      maxLength: 1000
      pattern: ^[a-zA-Z0-9_.$]+$
    RequiredTableName:
      type: string
      description: Name of the table
      nullable: false
      minLength: 1
      maxLength: 500
      pattern: .*
    NullableView:
      type: string
      maxLength: 1000
      pattern: .*
      description: a valid view file name (without extension)
    NullableObjectClass:
      type: string
      nullable: true
      maxLength: 1000
      pattern: .*
      description: a valid object class
    NullableAttribute:
      type: string
      nullable: true
      maxLength: 500
      pattern: .*
      description: a valid ldap attribute name
    RequiredView:
      type: string
      maxLength: 1000
      minLength: 1
      nullable: false
      pattern: .*
      description: a valid view file name (without extension)
    RequiredDnRelaxed:
      type: string
      example: cn=config
      description: a valid dn
      nullable: false
      minLength: 1
      maxLength: 5000
      x-radiantlogic-validation:
        distinguishedName: relaxed
    RequiredRdnRelaxed:
      type: string
      example: cn=config
      description: a valid rdn
      nullable: false
      minLength: 1
      maxLength: 5000
      x-radiantlogic-validation:
        distinguishedName: relaxed
    NullableSizeLimit:
      type: integer
      format: int32
      minimum: 0
      maximum: 100000
      nullable: true
      default: 500
    RequiredJoinId:
      type: string
      maxLength: 1000
      minLength: 1
      nullable: false
      pattern: .*
      description: a join id
    NullableTableName:
      type: string
      nullable: true
      maxLength: 500
      pattern: .*
    RequiredUrl:
      type: string
      example: jdbc:derby://hostname:1527/AdvWorks
      format: uri
      maxLength: 500
      minLength: 1
      nullable: false
    ImportServerFileOptions:
      type: object
      properties:
        file:
          type: string
          nullable: false
          pattern: ^[\w,\s-]+\.(ldif|ldifz|LDIF|LDIFZ)$
          minLength: 1
          maxLength: 1000
        addBehavior:
          type: string
          enum:
            - ADD
            - ADD_OR_OVERRIDE
          default: ADD
    SyntaxEnum:
      type: string
      enum:
        - Enhanced Guide
        - Presentation Address
        - Facsimile Telephone Number
        - Printable String
        - Postal Address
        - Protocol Information
        - Guide
        - IA5 String syntax
        - Fax
        - Generalized Time syntax
        - URI
        - Octet String
        - DIT Content Rule Description syntax
        - String for containing OIDs
        - DITStructure Rule Description syntax
        - Other Mailbox
        - Certificate Pair
        - LDAP Syntax Description syntax
        - Country String
        - MHS OR Address
        - Matching Rule Description
        - Telex Number
        - Matching Rule Use Description
        - Delivery Method
        - Numeric String
        - Substring Assertion
        - Directory String syntax
        - Object Class Description syntax
        - DN - distinguished name
        - Name And Optional UID
        - Name Form Description
        - Telephone Number syntax
        - Teletex Terminal Identifier
        - Boolean - TRUE/FALSE
        - Certificate
        - Certificate List
        - Integer syntax - integral number
        - Supported Algorithm
        - JPEG
        - Attribute Type Description syntax
        - Binary - octet string
        - Bit String
    DirectorySchemaAttribute:
      title: attribute
      description: ""
      type: object
      properties:
        name:
          $ref: "#/components/schemas/RequiredAttribute"
        alias:
          type: array
          maxItems: 100
          items:
            type: string
            nullable: false
            maxLength: 1000
          nullable: true
        oid:
          type: string
          nullable: true
          maxLength: 1000
        description:
          $ref: "#/components/schemas/NullableDescription"
        syntax:
          $ref: "#/components/schemas/SyntaxEnum"
        multiValued:
          type: boolean
          nullable: true
          default: false
        operational:
          type: boolean
          nullable: true
          default: false
        isRequired:
          type: boolean
          nullable: true
          default: false
        isUserGenerated:
          type: boolean
          readOnly: true
        objectclass:
          $ref: "#/components/schemas/NullableObjectClass"
      required:
        - name
        - syntax
    ObjectClass:
      title: objectClass
      type: object
      properties:
        objectClass:
          $ref: "#/components/schemas/RequiredObjectClass"
        superClass:
          type: string
          example: person
          nullable: true
          maxLength: 1000
          default: top
        oid:
          type: string
          example: 2.5.4.6
          readOnly: true
        isUserDefined:
          type: boolean
          readOnly: true
        isAuxiliary:
          type: boolean
          nullable: true
          default: false
        requiredAttrs:
          type: array
          maxItems: 10000
          items:
            $ref: "#/components/schemas/DirectorySchemaAttribute"
          nullable: true
          default: []
          example:
            - name: firstName
              alias:
                - fn
              oid: 2.5.4.6
              syntax: binary
              multiValued: false
              operational: false
            - name: lastName
              alias:
                - ln
              oid: 2.5.4.6
              syntax: binary
              multiValued: false
              operational: false
        optionalAttrs:
          type: array
          maxItems: 10000
          items:
            $ref: "#/components/schemas/DirectorySchemaAttribute"
          nullable: true
          default: []
          example:
            - name: emailAddress
              alias:
                - email
              oid: 2.5.4.6
              syntax: binary
              multiValued: true
              operational: true
      required:
        - objectClass
    AttributeRequiredObjectClassInfo:
      type: object
      properties:
        name:
          type: string
          nullable: false
        requiredForObjectClasses:
          type: array
          items:
            type: string
            nullable: false
            minLength: 1
          nullable: false
          minItems: 1
          maxItems: 1000
          uniqueItems: true
      required:
        - name
        - requiredForObjectClasses
    AbstractAttributesResponse:
      type: object
      properties:
        meta:
          type: boolean
      oneOf:
        - $ref: "#/components/schemas/ListAttributes"
        - $ref: "#/components/schemas/ListStringAttributes"
      discriminator:
        propertyName: meta
        mapping:
          "true": "#/components/schemas/ListAttributes"
          "false": "#/components/schemas/ListStringAttributes"
    ListAttributes:
      allOf:
        - $ref: "#/components/schemas/AbstractAttributesResponse"
        - type: object
          properties:
            attributes:
              type: array
              items:
                $ref: "#/components/schemas/DirectorySchemaAttribute"
    ListStringAttributes:
      allOf:
        - $ref: "#/components/schemas/AbstractAttributesResponse"
        - type: object
          properties:
            attributes:
              type: array
              items:
                type: string
    GenerateSchemaDiffRequest:
      type: object
      properties:
        dataSourceName:
          $ref: "#/components/schemas/RequiredDataSourceName"
        name:
          $ref: "#/components/schemas/RequiredSchemaName"
        ldap:
          type: boolean
          nullable: false
        objects:
          type: array
          nullable: false
          maxItems: 10000
          minItems: 1
          uniqueItems: true
          items:
            $ref: "#/components/schemas/RequiredTableName"
    SchemaDiffTree:
      type: object
      properties:
        schemaName:
          type: string
        dataSourceName:
          type: string
        numberOfDifferences:
          type: integer
          format: int64
        rootNode:
          $ref: "#/components/schemas/DiffTreeNode"
    DiffTreeNode:
      type: object
      properties:
        changeType:
          $ref: "#/components/schemas/ChangeType"
        path:
          type: array
          items:
            type: string
        current:
          $ref: "#/components/schemas/ComponentNode"
        new:
          $ref: "#/components/schemas/ComponentNode"
        children:
          type: array
          items:
            $ref: "#/components/schemas/DiffTreeNode"
    ComponentNode:
      type: object
      properties:
        componentType:
          $ref: "#/components/schemas/ComponentType"
        label:
          type: string
    ComponentType:
      type: string
      enum:
        - FIELD
        - FIELD_PK
        - LABEL
        - TABLE
        - VIEW
        - RELATIONSHIP
        - EMPTY
    ChangeType:
      type: string
      nullable: false
      enum:
        - NONE
        - ADD
        - REMOVE
        - CHANGED
      default: NONE
    SchemaDiffPostBody:
      type: object
      properties:
        applyType:
          type: string
          enum:
            - SAVE_AS_NEW
            - UPDATE
          nullable: false
        newSchemaName:
          $ref: "#/components/schemas/NullableSchemaName"
        oldSchemaName:
          $ref: "#/components/schemas/RequiredSchemaName"
        isLdap:
          type: boolean
          nullable: false
        datasource:
          $ref: "#/components/schemas/RequiredDataSourceName"
        objects:
          type: array
          items:
            type: string
            description: Name of the table
            nullable: false
            minLength: 1
            maxLength: 500
            pattern: .*
          nullable: false
          uniqueItems: true
          minItems: 1
          maxItems: 10000
        changes:
          type: array
          items:
            $ref: "#/components/schemas/ChangeInfo"
          nullable: false
          minItems: 1
          maxItems: 1000
      required:
        - applyType
        - oldSchemaName
        - isLdap
        - datasource
        - objects
        - changes
    ChangeInfo:
      type: object
      properties:
        changeType:
          $ref: "#/components/schemas/ChangeType"
        path:
          type: array
          items:
            type: string
          nullable: false
          minItems: 1
          maxItems: 100
      required:
        - changeType
        - path
    SchemaComplete:
      description: Complete schema object used by ui
      allOf:
        - $ref: "#/components/schemas/SchemaProperties"
        - type: object
          properties:
            tablesWithFields:
              type: array
              items:
                $ref: "#/components/schemas/TableWithFields"
              maxItems: 10000
            relationships:
              type: array
              items:
                $ref: "#/components/schemas/Relationship"
              maxItems: 10000
    SchemaProperties:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/RequiredSchemaName"
        lastModified:
          $ref: "#/components/schemas/ReadOnlyDateTime"
        type:
          $ref: "#/components/schemas/SchemaType"
        dataSourceName:
          $ref: "#/components/schemas/RequiredDataSourceName"
        baseDn:
          $ref: "#/components/schemas/NullableDnStrict"
        publishToServer:
          type: boolean
          description: Default is false. Set to false when new schema is created.
          default: false
          nullable: true
        objects:
          type: array
          items:
            $ref: "#/components/schemas/RequiredTableName"
          description: The list of tables and views selected when schema is created. Set
            to null/empty for a custom schema. Set to null/empty when a schema
            is updated.
          writeOnly: true
          maxItems: 10000
          uniqueItems: true
          nullable: true
      required:
        - name
        - type
        - dataSourceName
    SchemaType:
      type: string
      description: The type of schema file
      enum:
        - LDAP
        - DATABASE
        - CUSTOM
      nullable: false
    GetSchemaNameTypeResponse:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/RequiredSchemaName"
        type:
          $ref: "#/components/schemas/SchemaType"
    Table:
      type: object
      description: Contains the views or tables information for a schema
      properties:
        baseTable:
          $ref: "#/components/schemas/NullableTableName"
        candidateKeyName:
          type: string
          maxLength: 500
        candidateKeys:
          type: array
          items:
            type: string
            maxLength: 500
            nullable: false
          uniqueItems: true
          nullable: true
          maxItems: 100
        name:
          $ref: "#/components/schemas/RequiredTableName"
        parent:
          $ref: "#/components/schemas/Parent"
        objectClass:
          $ref: "#/components/schemas/RequiredObjectClass"
        owner:
          type: string
          nullable: true
          maxLength: 500
        primaryKeys:
          type: array
          items:
            type: string
            maxLength: 500
            nullable: false
          uniqueItems: true
          nullable: true
          maxItems: 100
        isTable:
          type: boolean
          description: Set to false if object is a View
          default: true
          nullable: true
      required:
        - name
        - objectClass
    TableWithFields:
      allOf:
        - $ref: "#/components/schemas/Table"
        - type: object
          properties:
            fields:
              type: array
              items:
                $ref: "#/components/schemas/Field"
              maxItems: 100000
    Relationship:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/NullableRelationshipId"
        parent:
          $ref: "#/components/schemas/Parent"
        dest:
          $ref: "#/components/schemas/RequiredTableName"
        destAttrs:
          type: array
          items:
            $ref: "#/components/schemas/RequiredAttribute"
          minItems: 1
          nullable: false
          uniqueItems: true
          maxItems: 100
        source:
          $ref: "#/components/schemas/RequiredTableName"
        sourceAttrs:
          type: array
          items:
            $ref: "#/components/schemas/RequiredAttribute"
          minItems: 1
          nullable: false
          uniqueItems: true
          maxItems: 100
      required:
        - dest
        - source
        - sourceAttrs
        - destAttrs
    RecursiveRelationship:
      type: object
      properties:
        source:
          $ref: "#/components/schemas/RequiredTableName"
        foreignKeys:
          type: array
          items:
            type: string
            maxLength: 500
            nullable: false
          minItems: 1
          nullable: false
          uniqueItems: true
          maxItems: 100
        depth:
          type: number
          nullable: false
          minimum: 1
          maximum: 50
      required:
        - source
        - foreignKeys
        - depth
    DeriveViewReqBody:
      type: object
      properties:
        sourceTable:
          $ref: "#/components/schemas/RequiredTableName"
        field:
          type: string
          example: address
          description: A single attribute from the table/view to generate the derived view
          nullable: false
          minLength: 1
          maxLength: 500
      required:
        - sourceTable
        - field
    MergeObjectsReqBody:
      type: object
      properties:
        sourceTable:
          $ref: "#/components/schemas/RequiredTableName"
        mergedViewName:
          $ref: "#/components/schemas/RequiredTableName"
        objectsToMerge:
          type: array
          items:
            $ref: "#/components/schemas/RequiredTableName"
          example:
            - view1
            - oldTable
            - fakeView
          description: table/view names to merge
          nullable: false
          minItems: 1
          maxItems: 1000
          uniqueItems: true
      required:
        - sourceTable
        - mergedViewName
        - objectsToMerge
    DerivedObjects:
      type: object
      properties:
        relationship:
          $ref: "#/components/schemas/Relationship"
        view:
          $ref: "#/components/schemas/Table"
    Field:
      type: object
      properties:
        name:
          type: string
          nullable: false
          minLength: 1
          maxLength: 1000
          pattern: .*
        parent:
          $ref: "#/components/schemas/Parent"
        mappedAttrName:
          type: string
          nullable: true
          maxLength: 1000
        nullable:
          type: boolean
          nullable: true
          default: false
        type:
          type: string
          maxLength: 500
          nullable: true
        primaryKey:
          type: boolean
          default: false
          nullable: true
        tags:
          type: array
          items:
            type: string
            nullable: false
            maxLength: 500
          maxItems: 100
          uniqueItems: true
          nullable: true
      required:
        - name
    Parent:
      type: object
      readOnly: true
      nullable: true
      properties:
        name:
          type: string
          description: The name of the parent schema (for relationships, tables and views)
            or parent table/view (for fields).
        url:
          type: string
          description: The URL to get the parent resource.
          format: uri
    SchemaManagerRelationshipNode:
      type: object
      properties:
        dn:
          type: string
          example: ou=test,cn=config
          maxLength: 500
          nullable: false
          minLength: 1
        rdn:
          type: string
          example: cn=Directory Manager
          maxLength: 500
          nullable: false
          minLength: 1
        type:
          $ref: "#/components/schemas/SchemaManagerRelationshipNodeType"
        primaryObject:
          $ref: "#/components/schemas/RequiredTableName"
        secondaryObject:
          $ref: "#/components/schemas/RequiredTableName"
        children:
          type: array
          maxItems: 10000
          items:
            $ref: "#/components/schemas/SchemaManagerRelationshipNode"
          nullable: true
      required:
        - dn
        - rdn
        - type
        - primaryObject
        - secondaryObject
    SchemaManagerRelationshipNodeType:
      type: string
      nullable: true
      default: TABLE
      enum:
        - TABLE
        - VIEW
    AccessControl:
      type: object
      description: Authorization settings in access control settings.
      properties:
        enableAci:
          type: boolean
          default: true
        allowAnonAccess:
          type: boolean
          default: false
        allowRootUserImpersonateOthers:
          type: boolean
          default: true
        bindReqPassword:
          type: boolean
          default: true
        enableNestedGroups:
          type: boolean
          default: false
        enableRootDseAci:
          type: boolean
          default: false
    TargetScopeType:
      type: string
      enum:
        - BASE
        - ONE
        - SUBTREE
      default: BASE
    PermsType:
      type: string
      enum:
        - ALLOW
        - DENY
      default: DENY
    SelectedOperationTypes:
      type: string
      enum:
        - READ
        - WRITE
        - SEARCH
        - SELF_WRITE
        - ADD
        - PROXY
        - DELETE
        - MOVE_CURRENT
        - COMPARE
        - MOVE_FUTURE
      nullable: false
    DaysOfWeekTypes:
      type: string
      enum:
        - MONDAY
        - TUESDAY
        - WEDNESDAY
        - THURSDAY
        - FRIDAY
        - SATURDAY
        - SUNDAY
    Aci:
      type: object
      description: Contains attributes of an aci object.
      properties:
        aciString:
          type: string
          description: A custom aci as a string
          maxLength: 50000
        parsable:
          type: boolean
          description: Is aci parsable as an object or is ACI a string
        aciId:
          type: integer
          description: A hashCode of the entire ACI as a raw string
          nullable: true
        name:
          type: string
          maxLength: 1000
        targetDn:
          $ref: "#/components/schemas/NullableDnStrict"
        targetScope:
          $ref: "#/components/schemas/TargetScopeType"
        targetFilter:
          type: string
          maxLength: 5000
        includeTargetAttributes:
          type: boolean
          description: Set to true if inclusive for target attribute expression.
          default: false
        targetAttributes:
          type: array
          items:
            type: string
            maxLength: 1000
            minLength: 1
            nullable: false
          nullable: true
          maxItems: 10000
          description: Return null if "all" target attributes. If "custom" target
            attributes, return the list of target attribute names that the user
            selected.
        permsType:
          $ref: "#/components/schemas/PermsType"
        selectedOperations:
          description: The operations selected to be allowed/denied
          type: array
          items:
            $ref: "#/components/schemas/SelectedOperationTypes"
          maxItems: 10
          example:
            - READ
            - SEARCH
        loaOperator:
          type: string
          description: Operator used in level of assurance.
          example: <=
          maxLength: 10
        loaLevel:
          type: integer
          minimum: 0
          maximum: 4
        daysOfWeek:
          type: array
          maxItems: 7
          items:
            $ref: "#/components/schemas/DaysOfWeekTypes"
        timeRanges:
          type: array
          items:
            type: string
            maxLength: 50
            minLength: 1
            nullable: false
          maxItems: 100
          example:
            - 1030-1230
            - 1945-0430
        applyUserDns:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/RequiredDnStrict"
          maxItems: 100
          description: |-
            List of users to apply the acl to. 
            For "Allow Public", include "anyone". 
            For "Allow Authenticated", include "all".
            For "Allow Self", include "self".
            For "Allow Parent", include "parent".
        applyGroupDns:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/RequiredDnStrict"
          maxItems: 1000
          description: List of groups to apply the acl to.
        applyIps:
          type: array
          nullable: true
          items:
            type: string
            format: ipv4
            maxLength: 1000
            minLength: 1
            nullable: false
          maxItems: 1000
          description: List of ips to apply the acl to.
    AttributeEncryption:
      type: object
      description: This object is read-only.
      properties:
        encryptKeyInUse:
          type: boolean
          description: Keys cannot be changed if encryption key is in use.
        currentHdapCipher:
          type: string
        hdapAttrKeyExists:
          type: boolean
        currentLdifzCipher:
          type: string
          example: AES256
        ldifzKeyExists:
          type: boolean
        secureLdifExport:
          type: boolean
        availableCiphers:
          type: array
          items:
            type: string
          example:
            - AES256
            - AES128
            - DES3
    AwsKmsSettingsGet:
      type: object
      description: This object is read-only
      properties:
        accessKeyIdExists:
          type: boolean
        accessKeySecretExists:
          type: boolean
        cmkRegion:
          type: string
          example: us-east-2
        cmkAlias:
          type: string
          example: alias/My_Master_Key
    AwsKmsSettingsPut:
      type: object
      description: This object is write-only
      properties:
        accessKeyId:
          $ref: "#/components/schemas/NullableAwsKmsAccessKeyId"
        accessKeySecret:
          type: string
          example: mySecret
          maxLength: 1000
        cmkRegion:
          type: string
          example: us-east-2
          maxLength: 5000
        cmkAlias:
          type: string
          example: alias/My_Master_Key
          maxLength: 5000
    LdapConfig:
      type: object
      description: These settings control whether optional LDAP SupportedControls
        supported by FID are enabled
      properties:
        pagedResults:
          type: boolean
          description: Enables clients to retrieve results in chunks so they don't have to
            process with the entire list at once
          default: true
        virtualListView:
          type: boolean
          description: Enables clients to limit results to a smaller subset of a large
            server-sorted list
          default: false
        persistentSearch:
          type: boolean
          description: Enables clients to receive notifications of updates to a past search
          default: false
        proxyAuthorization:
          type: boolean
          description: Enables clients to switch user IDs for authorization purposes
            without needing to re-authenticate
          default: false
      required:
        - pagedResults
        - virtualListView
        - persistentSearch
        - proxyAuthorization
    RestConfig:
      type: object
      description: Settings for accessing FID via ADAP and other REST protocols
      properties:
        tokenTimeout:
          type: integer
          example: 36000
          description: Timeout period of tokens, in seconds
          minimum: 0
          default: 360000
        cookieTimeout:
          type: integer
          example: 60
          description: Timeout period of cookies, in seconds
          minimum: 0
          default: 600
        maxThreads:
          type: integer
          example: 100
          description: Maximum threads for processing client HTTP/HTTPS requests
          minimum: 1
          maximum: 10000
          default: 1000
        alwaysAuthenticate:
          type: boolean
          example: false
          default: true
        enabled:
          type: boolean
          default: true
      required:
        - tokenTimeout
        - cookieTimeout
        - maxThreads
        - alwaysAuthenticate
    UserToDnMapping:
      type: object
      properties:
        userId:
          type: string
          maxLength: 1000
          nullable: false
          minLength: 1
        mappedDn:
          $ref: "#/components/schemas/RequiredDnStrict"
      required:
        - userId
        - mappedDn
    CertificateDetails:
      type: object
      properties:
        alias:
          type: string
          maxLength: 1000
          minLength: 1
          nullable: false
        generalInfo:
          type: string
          maxLength: 100000
        issuedTo:
          type: string
          maxLength: 1000
        issuedBy:
          type: string
          maxLength: 1000
        validFrom:
          type: string
          format: date
          example: 2022-02-14
        validTo:
          type: string
          format: date
        status:
          type: string
          enum:
            - OK
            - EXPIRED
            - NOT_YET_VALID
        certificateProperties:
          type: array
          items:
            $ref: "#/components/schemas/CertificateProperty"
          maxItems: 100
        certificationPath:
          type: array
          items:
            $ref: "#/components/schemas/CertificationPath"
          maxItems: 100
    CertificateProperty:
      type: object
      properties:
        name:
          type: string
          maxLength: 1000
          minLength: 1
          nullable: false
        value:
          type: string
          maxLength: 1000
        type:
          type: string
          enum:
            - TYPE_V1_FIELDS_ONLY
            - TYPE_EXTENSIONS_ONLY
            - TYPE_CRIT_EXT_ONLY
            - TYPE_PROPERTIES_ONLY
          description: Used to filter certificates.
    CertificationPath:
      type: object
      properties:
        dn:
          $ref: "#/components/schemas/RequiredDnStrict"
        children:
          type: array
          items:
            $ref: "#/components/schemas/CertificationPath"
          maxItems: 100
      required:
        - dn
    OidcProvider:
      type: object
      deprecated: true
      properties:
        providerName:
          type: string
          enum:
            - Apple
            - Google
            - Microsoft
            - Salesforce
            - Yahoo
            - Custom
          example: Apple
          nullable: true
        enabled:
          type: boolean
          default: true
          nullable: false
        discoveryUrl:
          $ref: "#/components/schemas/NullableUrl"
        authorizationEndpointUri:
          $ref: "#/components/schemas/NullableUrl"
        tokenEndpointUri:
          $ref: "#/components/schemas/NullableUrl"
        clientId:
          type: string
          maxLength: 5000
          nullable: true
        clientSecret:
          type: string
          nullable: true
          format: password
          description: For GET req, will be "" if password is set, null otherwise. If null
            for PUT reqs, then password will not change.
          maxLength: 5000
        clientAuthenticationMethod:
          type: string
          nullable: true
          default: CLIENT_SECRET_POST
          enum:
            - CLIENT_SECRET_POST
            - CLIENT_SECRET_BASIC
        oidcToFidUserMappings:
          type: array
          items:
            type: string
          nullable: true
          maxItems: 1000
        requestedScopes:
          type: array
          items:
            type: string
          maxItems: 500
    ProviderName:
      type: string
      enum:
        - Apple
        - Google
        - Microsoft
        - Salesforce
        - Yahoo
        - Custom
      example: Apple
      nullable: false
      description: Yahoo is no longer a supported provider as of RadiantOne version
        8.1.3. It remains in the this for legacy purposes; if used it will be
        converted to Custom in the backend.
    OidcProviderListItem:
      type: object
      properties:
        configurationName:
          type: string
          nullable: false
          minLength: 1
          maxLength: 100
          pattern: ^[a-zA-Z0-9\s_-]+$
          example: myAppleConfig
        providerName:
          $ref: "#/components/schemas/ProviderName"
        enabled:
          type: boolean
          default: true
          nullable: false
        discoveryUrl:
          $ref: "#/components/schemas/RequiredUrl"
        authorizationEndpointUri:
          $ref: "#/components/schemas/RequiredUrl"
        tokenEndpointUri:
          $ref: "#/components/schemas/RequiredUrl"
        clientId:
          type: string
          nullable: false
          maxLength: 5000
          minLength: 1
        clientSecret:
          type: string
          nullable: true
          format: password
          description: For GET req, will be "" if password is set, null otherwise. If null
            for PUT reqs, then password will not change.
          maxLength: 5000
        clientAuthenticationMethod:
          type: string
          nullable: true
          default: CLIENT_SECRET_POST
          enum:
            - CLIENT_SECRET_POST
            - CLIENT_SECRET_BASIC
        oidcToFidUserMappings:
          type: array
          items:
            type: string
          nullable: true
          maxItems: 1000
        requestedScopes:
          type: array
          description: openid scope must be present.
          items:
            type: string
            nullable: false
            maxLength: 150
            minLength: 1
          nullable: false
          minItems: 1
          maxItems: 500
      required:
        - configurationName
        - providerName
        - discoveryUrl
        - authorizationEndpointUri
        - tokenEndpointUri
        - clientId
        - requestedScopes
    OidcProviderLoginInfo:
      type: object
      deprecated: true
      properties:
        enabled:
          type: boolean
        authority:
          type: string
          nullable: true
        clientId:
          type: string
          nullable: true
        clientSecret:
          type: string
          nullable: true
          description: Property will be null for all providers except Google.
        requestedScopes:
          type: array
          nullable: true
          items:
            type: string
    OidcProviderLoginInfoListItem:
      type: object
      properties:
        configurationName:
          type: string
          nullable: false
          minLength: 1
          maxLength: 100
          example: myAppleConfig
        providerName:
          $ref: "#/components/schemas/ProviderName"
        authority:
          type: string
          nullable: true
        clientId:
          type: string
          nullable: true
        clientSecret:
          type: string
          nullable: true
          description: Property will be null for all providers except Google.
        requestedScopes:
          type: array
          nullable: true
          items:
            type: string
    GetCommonDiscoveryProvidersResponse:
      type: object
      properties:
        discoveryProviders:
          type: object
          description: Map<String,String> of a provider to its discovery url.
          example:
            Google: http://goog.discover.url
            Yahoo: http://yahoo.discover.url
            Salesforce: http://sf.discover.url
    GetScopesAndClaimsResponse:
      type: object
      properties:
        possibleRequestedScopes:
          type: array
          items:
            type: string
        supportedClaims:
          type: array
          items:
            type: string
    GetDiscoveryEndpointInfoResponse:
      type: object
      properties:
        tokenEndpointUri:
          type: string
        authorizationEndpointUri:
          type: string
    RefreshOperationName:
      description: Unique (server assigned) name identifying the refresh operation.
      type: string
      format: uuid
      nullable: false
      example: 550e8400-e29b-41d4-a716-446655440000
    StringNonBlankReadOnly:
      description: Non-nullable, non-blank, read-only string.
      type: string
      nullable: false
      pattern: ^\s*\S+[\S\s]+$
      minLength: 1
      maxLength: 5000
      readOnly: true
    StoreEntryCount:
      description: Entry count for a single directory store or view.
      type: object
      properties:
        count:
          description: Number of entries in the view.
          type: integer
          minimum: 0
          readOnly: true
        inTotalEntryCount:
          description: Indicates if the entry count of this single store/view is included
            in the total entry count for  its parent naming context (as
            described by the NamingContextStatistics property entryCount).
          type: boolean
          default: false
          readOnly: true
        baseDn:
          type: string
          nullable: false
          pattern: ^\s*\S+[\S\s]+$
          minLength: 1
          maxLength: 5000
          readOnly: true
        datasource:
          type: string
          nullable: false
          pattern: ^\s*\S+[\S\s]+$
          minLength: 1
          maxLength: 5000
          readOnly: true
        objectName:
          type: string
          nullable: false
          pattern: ^\s*\S+[\S\s]+$
          minLength: 1
          maxLength: 5000
          readOnly: true
        processed:
          description: Indicates if store was counted.
          type: boolean
          readOnly: true
      required:
        - count
        - baseDn
        - datasource
        - objectName
        - inTotalEntryCount
        - processed
    NamingContextStatistics:
      description: Complete statistics for a single naming context, which might be
        composed to multiple stores/views.
      type: object
      properties:
        dn:
          description: Naming context that contains the analyzed entries.
          type: string
          nullable: false
          pattern: ^\s*\S+[\S\s]+$
          minLength: 1
          maxLength: 5000
          readOnly: true
        type:
          $ref: "#/components/schemas/NamingContextType"
        entryCount:
          description: Number of entries returned in the view.
          type: integer
          readOnly: true
          minimum: 0
        accounted:
          $ref: "#/components/schemas/AccountingState"
        similarNamingContexts:
          description: Other naming contexts that are associated with the same backend
            data source.
          type: array
          items:
            type: string
          readOnly: true
        perObjectBreakdown:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/StoreEntryCount"
          readOnly: true
        info:
          description: Additional information about the naming context.
          type: string
          nullable: false
          pattern: ^\s*\S+[\S\s]+$
          minLength: 1
          maxLength: 5000
          readOnly: true
        active:
          type: boolean
          readOnly: true
        state:
          $ref: "#/components/schemas/NamingContextStatisticsState"
      required:
        - dn
        - type
        - active
        - similarNamingContexts
        - perObjectBreakdown
        - state
    EntryStatistics:
      description: Collection of entry statistics for each naming context.
      type: object
      properties:
        stats:
          description: List of statistics for each naming context.
          type: array
          items:
            $ref: "#/components/schemas/NamingContextStatistics"
          nullable: false
          readOnly: true
        state:
          $ref: "#/components/schemas/EntryStatisticsState"
        totalEntryCount:
          description: Total number of counted managed entries in the system. Value is
            populated only when refresh successfully completes. Otherwise, no
            value is returned as there is no accurate value. Client should check
            EntryStatistics.state for COMPLETE.
          type: integer
          minimum: 0
          readOnly: true
        timestamp:
          description: Unix timestamp (UTC) in millisecond indicating when the statistics
            refresh began.
          type: integer
          format: int64
          minimum: 0
          readOnly: true
      required:
        - state
        - timestamp
        - stats
    RefreshOperation:
      type: object
      description: Long running refresh operation. Contains fields needed to monitor
        the operation's progress. When  the refresh completes successfully, the
        object contains the entry statistics that would have been
        returned  directly, if the refresh was not long running.
      properties:
        name:
          $ref: "#/components/schemas/RefreshOperationName"
        status:
          $ref: "#/components/schemas/RefreshOperationStatus"
        result:
          $ref: "#/components/schemas/EntryStatistics"
      required:
        - name
        - status
    NamingContextType:
      description: Type of view mounted at the naming context.
      type: string
      enum:
        - UNIVERSAL_DIRECTORY
        - PERSISTENT_CACHE
        - LDAP_VIEW
        - RDBMS_VIEW
        - CUSTOM_VIEW
        - LAYERED_VIEW
        - LDAP_PROXY
    AccountingState:
      description: Indicates how many entries in the view contributed to the total
        entry count.<br/> * `FULL` - All entries are included in the total<br/>
        * `PARTIAL` - Some entries are included in the total but others are
        not<br/> * `NONE` - No entries were included in the total
      type: string
      enum:
        - FULL
        - PARTIAL
        - NONE
    NamingContextStatisticsState:
      description: Describes state of the individual naming context statistics. *
        `COMPLETE` - Naming context has been successfully counted.<br/> *
        `PENDING` - Naming context has not yet been counted.<br/> * `ERROR` -
        Error occurred while counting entries in the naming context
      type: string
      enum:
        - COMPLETE
        - PENDING
        - ERROR
    EntryStatisticsState:
      description: Describes state of the entry statistics. * `DONE` - Entries were
        counted and statistics are complete.<br/> * `INCOMPLETE` - Statistics
        may be inaccurate because refresh was interrupted.<br/> * `ERROR` -
        Statistics may be inaccurate because of a problem during the
        refresh.<br/> * `UPDATING` - Statistics are currently being updated
        during an running refresh.
      type: string
      enum:
        - DONE
        - INCOMPLETE
        - ERROR
        - UPDATING
    RefreshOperationStatus:
      description: Current execution status of the refresh operation.
      type: string
      enum:
        - DONE
        - ERROR
        - RUNNING
        - STOPPED
    InfoModel:
      title: InfoModel
      type: object
      properties:
        iddmTenant:
          type: string
          example: radiant-one-v8-api-eks-cluster
    TaskSchedulerRequest:
      type: object
      anyOf:
        - required:
            - defaultJvmParameters
          properties:
            defaultJvmParameters:
              type: string
              example: -server -Xms512m
        - required:
            - deleteTasksOlderThanDays
          properties:
            deleteTasksOlderThanDays:
              description: Delete tasks older than this number of days
              type: number
              minimum: 1
              maximum: 90
              example: 9
    TaskSchedulerResponse:
      type: object
      properties:
        defaultJvmParameters:
          type: string
          example: -server -Xms512m
        deleteTasksOlderThanDays:
          type: number
          minimum: 1
          maximum: 90
          example: 9
        status:
          type: string
          enum:
            - RUNNING
            - STOPPED
        logLevel:
          type: string
          enum:
            - DEBUG
            - ERROR
            - FATAL
            - INFO
            - OFF
            - TRACE
            - WARN
        taskLogLevel:
          type: string
          enum:
            - DEBUG
            - ERROR
            - FATAL
            - INFO
            - OFF
            - TRACE
            - WARN
    TaskRequest:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          example: e4ef6b3ec8828b74098acf63a94c458a869da8d63a70546d5f8c1a38fc48ed95
        name:
          type: string
          example: JStackMonitorTask
      anyOf:
        - required:
            - dedicatedJvm
          properties:
            dedicatedJvm:
              type: boolean
        - required:
            - jvmParameters
          properties:
            jvmParameters:
              type: string
              example: -Xms1024m -Xmx1024m
        - required:
            - executionInterval
          properties:
            executionInterval:
              type: string
              pattern: ^[0-9]{2}h [0-9]{2}m [0-9]{2}s$
              example: 00h 00m 05s
    TaskResponse:
      type: object
      properties:
        id:
          type: string
          example: e4ef6b3ec8828b74098acf63a94c458a869da8d63a70546d5f8c1a38fc48ed95
        name:
          type: string
          example: JStackMonitorTask
        recurrent:
          type: boolean
        dedicatedJvm:
          type: boolean
        jvmParameters:
          type: string
          example: "Ex: -Xms1024m -Xmx1024m"
        executionInterval:
          type: string
          pattern: ^[0-9]{2}h [0-9]{2}m [0-9]{2}s$
          example: 00h 00m 05s
        status:
          type: string
          enum:
            - RUNNING
            - SCHEDULED
            - NOTSCHEDULED
            - FINISHED
            - UNKNOWN
            - ERROR
            - DEP_ERROR
            - INTERRUPTED
            - ERR_SCHEDULED
        description:
          type: string
          example: JStack Monitor Task
        lastTermination:
          type: string
          format: date-time
          example: Tue Dec 26 00:18:46 UTC 2023
        lastExecution:
          type: string
          format: date-time
          example: Tue Dec 26 00:18:46 UTC 2023
        nextExecution:
          type: string
          format: date-time
          example: Tue Dec 26 00:18:46 UTC 2023
        logs:
          $ref: "#/components/schemas/TaskLogsResponse"
    TaskLogsResponse:
      type: array
      items:
        type: string
      example:
        - 2023-12-26T00:44:11,954 INFO  com.rli.scheduler.jobs.ClassJob:32 - ___
          Start Task ___
        - 2023-12-26T00:44:11,955 INFO  com.rli.tasks.JStackMonitorTask:41 -
          Starting JStackMonitorTask
        - 2023-12-26T00:44:11,955 INFO  com.rli.scheduler.jobs.ClassJob:55 - ___
          End Task ___
        - 2023-12-26T00:44:16,954 INFO  com.rli.scheduler.jobs.ClassJob:32 - ___
          Start Task ___
        - 2023-12-26T00:44:16,954 INFO  com.rli.tasks.JStackMonitorTask:41 -
          Starting JStackMonitorTask
    NullableAwsKmsAccessKeyId:
      type: string
      example: 1234abcd-12ab-34cd-56ef-1234567890ab
      maxLength: 1000
      nullable: true
      format: ^[a-zA-Z0-9-]+$
    NullableRelationshipId:
      type: string
      description: Automatically generated on create. String representation of the
        relationship.
      nullable: true
      maxLength: 1000
    NullableUrl:
      type: string
      example: jdbc:derby://hostname:1527/AdvWorks
      description: a valid url
      format: uri
      maxLength: 500
    RequiredCertificateAlias:
      type: string
      description: The unique alias given to the certificate
      nullable: false
      maxLength: 1000
      minLength: 1
    ControlPanelBannerMessage:
      type: object
      description: The banner message and related metadata to display in the control
        panel UI.
      required:
        - bannerText
        - bannerBackgroundColor
        - bannerTextColor
      properties:
        bannerText:
          type: string
          nullable: false
          default: ""
        bannerBackgroundColor:
          type: string
          nullable: false
          default: ""
        bannerTextColor:
          type: string
          nullable: false
          default: ""
    ControlPanelMessageOfTheDay:
      type: object
      description: The message of the day and related metadata to display in the
        control panel UI.
      required:
        - messageContent
        - messageTitle
        - popup
        - warning
      properties:
        messageContent:
          type: string
          nullable: false
          default: ""
        messageTitle:
          type: string
          nullable: false
          default: ""
        warning:
          type: boolean
          nullable: false
          default: false
        popup:
          type: boolean
          nullable: false
          default: false
  securitySchemes:
    bearer_auth:
      $ref: "#/components/securitySchemes/AuthToken"
    BasicAuth:
      type: http
      scheme: basic
      description: Basic Auth header
    AuthToken:
      type: http
      scheme: bearer
